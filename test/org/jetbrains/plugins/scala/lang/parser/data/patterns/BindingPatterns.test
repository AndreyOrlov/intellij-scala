case class Some(n :int){
}
case class Some2 {
}
object A {
  val x = 1
  def foo() = a match {
    case x@(y,z) => {}
    case x@Some(y) => {}
  }
}
-----
ScalaFile
  ScClass
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Some')
    ClassParametersClauses
      ClassParametersClause
        PsiElement(()('(')
        ClassParameter
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(identifier)('n')
          PsiWhiteSpace(' ')
          PsiElement(:)(':')
          ParameterType
            FunctionalType
              InfixType
                CompoundType
                  TypeWithAnnotation
                    AnnotationsList
                      <empty list>
                    SimpleType
                      StableIdentifier
                        PsiElement(identifier)('int')
        PsiElement())(')')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiElement(newline)('\n')
  ScClass
    AnnotationsList
      <empty list>
    Modifiers
      PsiElement(case)('case')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('Some2')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n')
        PsiElement(})('}')
  PsiElement(newline)('\n')
  ScObject
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(object)('object')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('A')
    PsiWhiteSpace(' ')
    ExtendsBlock
      ScTemplateBody
        PsiElement({)('{')
        PsiWhiteSpace('\n  ')
        ScPatternDefinition
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          InfixPattern
            ReferenceIdentifierPattern
              StableIdentifier
                PsiElement(identifier)('x')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          PostfixExpression
            InfixExpression
              PrefixExpression
                SimpleExpression
                  Literal
                    PsiElement(integer)('1')
        PsiElement(newline)('\n  ')
        ScFunctionDefinition
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(def)('def')
          PsiWhiteSpace(' ')
          ScScalaCodeReferenseElement
            PsiElement(identifier)('foo')
          ParametersClauses
            ParametersClause
              PsiElement(()('(')
              PsiElement())(')')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          MatchStatement
            PostfixExpression
              InfixExpression
                PrefixExpression
                  SimpleExpression
                    Path
                      StableIdentifier
                        PsiElement(identifier)('a')
            PsiWhiteSpace(' ')
            PsiElement(match)('match')
            PsiWhiteSpace(' ')
            PsiElement({)('{')
            PsiWhiteSpace('\n    ')
            CaseClauses
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                CompositePattern
                  BindingPattern
                    PsiElement(identifier)('x')
                    PsiElement(@)('@')
                    InfixPattern
                      TuplePattern
                        PsiElement(()('(')
                        ArgumentPatterns
                          CompositePattern
                            InfixPattern
                              ReferenceIdentifierPattern
                                StableIdentifier
                                  PsiElement(identifier)('y')
                          PsiElement(,)(',')
                          CompositePattern
                            InfixPattern
                              ReferenceIdentifierPattern
                                StableIdentifier
                                  PsiElement(identifier)('z')
                        PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                PsiElement({)('{')
                Block
                  PsiElement(})('}')
                PsiErrorElement:'}' expected
                  <empty list>
              PsiWhiteSpace('\n    ')
              CaseClause
                PsiElement(case)('case')
                PsiWhiteSpace(' ')
                CompositePattern
                  BindingPattern
                    PsiElement(identifier)('x')
                    PsiElement(@)('@')
                    InfixPattern
                      SimplePattern
                        StableIdentifier
                          PsiElement(identifier)('Some')
                        PsiElement(()('(')
                        CompositePattern
                          InfixPattern
                            ReferenceIdentifierPattern
                              StableIdentifier
                                PsiElement(identifier)('y')
                        PsiElement())(')')
                PsiWhiteSpace(' ')
                PsiElement(=>)('=>')
                PsiWhiteSpace(' ')
                PsiElement({)('{')
                Block
                  PsiElement(})('}')
                PsiWhiteSpace('\n  ')
                PsiElement(})('}')
            PsiWhiteSpace('\n')
            PsiElement(})('}')