<?xml version="1.0" encoding="UTF-8"?>

<component name="LanguageInjectionConfiguration">
  <option name="LANGUAGE_ANNOTATION" value="org.intellij.lang.annotations.Language" />
  <injection language="RegExp" injector-id="scala">
    <display-name>String.r (scala)</display-name>
    <place><![CDATA[scalaLiteral().isRegExpLiteral()]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>BatchSqlUpdate (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.BatchSqlUpdate", "BatchSqlUpdate", "javax.sql.DataSource", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.BatchSqlUpdate", "BatchSqlUpdate", "javax.sql.DataSource", "java.lang.String", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.BatchSqlUpdate", "BatchSqlUpdate", "javax.sql.DataSource", "java.lang.String", "int[]", "int")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>Connection (java.sql)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "nativeSQL", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "prepareCall", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "prepareCall", "java.lang.String", "int", "int")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "prepareCall", "java.lang.String", "int", "int", "int")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "prepareStatement", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "prepareStatement", "java.lang.String", "int")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "prepareStatement", "java.lang.String", "int", "int")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "prepareStatement", "java.lang.String", "int", "int", "int")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "prepareStatement", "java.lang.String", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Connection", "prepareStatement", "java.lang.String", "java.lang.String[]")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>EntityManager.createNativeQuery (javax.persistence)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "javax.persistence.EntityManager", "createNativeQuery", "java.lang.String")]]></place>
  </injection>
  <injection language="JPAQL" injector-id="scala">
    <display-name>EntityManager.createQuery (javax.persistence)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "javax.persistence.EntityManager", "createQuery", "java.lang.String")]]></place>
  </injection>
  <injection language="Groovy" injector-id="scala">
    <display-name>GroovyShell (groovy.lang)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "groovy.lang.GroovyShell", "evaluate", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "groovy.lang.GroovyShell", "evaluate", "java.lang.String", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "groovy.lang.GroovyShell", "evaluate", "java.lang.String", "java.lang.String", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "groovy.lang.GroovyShell", "parse", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "groovy.lang.GroovyShell", "parse", "java.lang.String", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "groovy.lang.GroovyShell", "run", "java.lang.String", "java.lang.String", "java.lang.String[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "groovy.lang.GroovyShell", "run", "java.lang.String", "java.lang.String", "java.util.List")]]></place>
  </injection>
  <injection language="HQL" injector-id="scala">
    <display-name>HibernateOperations (org.springframework.orm.hibernate)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate.HibernateOperations", "find", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate.HibernateOperations", "find", "java.lang.String", "java.lang.Object")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate.HibernateOperations", "find", "java.lang.String", "java.lang.Object", "net.sf.hibernate.type.Type")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate.HibernateOperations", "find", "java.lang.String", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate.HibernateOperations", "find", "java.lang.String", "java.lang.Object[]", "net.sf.hibernate.type.Type[]")]]></place>
  </injection>
  <injection language="HQL" injector-id="scala">
    <display-name>HibernateOperations (org.springframework.orm.hibernate3)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "bulkUpdate", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "bulkUpdate", "java.lang.String", "java.lang.Object")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "bulkUpdate", "java.lang.String", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "find", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "find", "java.lang.String", "java.lang.Object")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "find", "java.lang.String", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "findByNamedParam", "java.lang.String", "java.lang.String", "java.lang.Object")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "findByNamedParam", "java.lang.String", "java.lang.String[]", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "findByValueBean", "java.lang.String", "java.lang.Object")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "iterate", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "iterate", "java.lang.String", "java.lang.Object")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.hibernate3.HibernateOperations", "iterate", "java.lang.String", "java.lang.Object[]")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>JdbcOperations (org.springframework.jdbc.core)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "batchUpdate", "java.lang.String", "org.springframework.jdbc.core.BatchPreparedStatementSetter")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "batchUpdate", "java.lang.String[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "execute", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "execute", "java.lang.String", "org.springframework.jdbc.core.PreparedStatementCallback")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "java.lang.Object[]", "int[]", "org.springframework.jdbc.core.ResultSetExtractor")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "java.lang.Object[]", "int[]", "org.springframework.jdbc.core.RowCallbackHandler")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "java.lang.Object[]", "int[]", "org.springframework.jdbc.core.RowMapper")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "java.lang.Object[]", "org.springframework.jdbc.core.ResultSetExtractor")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "java.lang.Object[]", "org.springframework.jdbc.core.RowCallbackHandler")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "java.lang.Object[]", "org.springframework.jdbc.core.RowMapper")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "org.springframework.jdbc.core.PreparedStatementSetter", "org.springframework.jdbc.core.ResultSetExtractor")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "org.springframework.jdbc.core.PreparedStatementSetter", "org.springframework.jdbc.core.RowCallbackHandler")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "org.springframework.jdbc.core.PreparedStatementSetter", "org.springframework.jdbc.core.RowMapper")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "org.springframework.jdbc.core.ResultSetExtractor")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "org.springframework.jdbc.core.RowCallbackHandler")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "query", "java.lang.String", "org.springframework.jdbc.core.RowMapper")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForInt", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForInt", "java.lang.String", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForInt", "java.lang.String", "java.lang.Object[]", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForList", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForList", "java.lang.String", "java.lang.Class")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForList", "java.lang.String", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForList", "java.lang.String", "java.lang.Object[]", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForList", "java.lang.String", "java.lang.Object[]", "int[]", "java.lang.Class")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForList", "java.lang.String", "java.lang.Object[]", "java.lang.Class")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForLong", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForLong", "java.lang.String", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForLong", "java.lang.String", "java.lang.Object[]", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForMap", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForMap", "java.lang.String", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForMap", "java.lang.String", "java.lang.Object[]", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForObject", "java.lang.String", "java.lang.Class")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForObject", "java.lang.String", "java.lang.Object[]", "int[]", "java.lang.Class")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForObject", "java.lang.String", "java.lang.Object[]", "int[]", "org.springframework.jdbc.core.RowMapper")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForObject", "java.lang.String", "java.lang.Object[]", "java.lang.Class")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForObject", "java.lang.String", "java.lang.Object[]", "org.springframework.jdbc.core.RowMapper")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForObject", "java.lang.String", "org.springframework.jdbc.core.RowMapper")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForRowSet", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForRowSet", "java.lang.String", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "queryForRowSet", "java.lang.String", "java.lang.Object[]", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "update", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "update", "java.lang.String", "java.lang.Object[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "update", "java.lang.String", "java.lang.Object[]", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.JdbcOperations", "update", "java.lang.String", "org.springframework.jdbc.core.PreparedStatementSetter")]]></place>
  </injection>
  <injection language="JPAQL" injector-id="scala">
    <display-name>JpaOperations (org.springframework.orm.jpa)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.jpa.JpaOperations", "find", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.jpa.JpaOperations", "find", "java.lang.String", "java.lang.Object...")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.orm.jpa.JpaOperations", "findByNamedParams", "java.lang.String", "java.util.Map")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>MappingSqlQuery.MappingSqlQuery (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.MappingSqlQuery", "MappingSqlQuery", "javax.sql.DataSource", "java.lang.String")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>MappingSqlQueryWithParameters.MappingSqlQueryWithParameters (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.MappingSqlQueryWithParameters", "MappingSqlQueryWithParameters", "javax.sql.DataSource", "java.lang.String")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>NamedNativeQuery.query (javax.persistence)</display-name>
    <place><![CDATA[psiMethod().withName("query").withParameters().definedInClass("javax.persistence.NamedNativeQuery")]]></place>
  </injection>
  <injection language="JPAQL" injector-id="scala">
    <display-name>NamedQuery.query (javax.persistence)</display-name>
    <place><![CDATA[psiMethod().withName("query").withParameters().definedInClass("javax.persistence.NamedQuery")]]></place>
  </injection>
  <injection language="XPath" injector-id="scala">
    <display-name>Node.createXPath (org.dom4j)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.dom4j.Node", "createXPath", "java.lang.String")]]></place>
  </injection>
  <injection language="XPath" injector-id="scala">
    <display-name>Node.selectNodes (org.dom4j)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.dom4j.Node", "selectNodes", "java.lang.String")]]></place>
  </injection>
  <injection language="XPath" injector-id="scala">
    <display-name>Node.selectSingleNode (org.dom4j)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.dom4j.Node", "selectSingleNode", "java.lang.String")]]></place>
  </injection>
  <injection language="RegExp" injector-id="scala">
    <display-name>Path.value (javax.ws.rs)</display-name>
    <value-pattern>[^:]*:[\s]*([^\}]*)</value-pattern>
    <place><![CDATA[scalaLiteral().callArgument(0, "javax.ws.rs.Path", "value", )]]></place>
  </injection>
  <injection language="RegExp" injector-id="scala">
    <display-name>Pattern (java.util.regex)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.util.regex.Pattern", "compile", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.util.regex.Pattern", "compile", "java.lang.String", "int")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.util.regex.Pattern", "matches", "java.lang.String", "java.lang.CharSequence")]]></place>
  </injection>
  <injection language="RegExp" injector-id="scala">
    <display-name>Pattern.regexp (javax.validation.constraints)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "javax.validation.constraints.Pattern", "regexp", )]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>RdbmsOperation.setSql (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.object.RdbmsOperation", "setSql", "java.lang.String")]]></place>
  </injection>
  <injection language="HQL" injector-id="scala">
    <display-name>Session.createQuery (org.hibernate)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.hibernate.Session", "createQuery", "java.lang.String")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>Session.createSQLQuery (org.hibernate)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.hibernate.Session", "createSQLQuery", "java.lang.String")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>SimpleJdbcOperations (org.springframework.jdbc.core.simple)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.simple.SimpleJdbcOperations", "query", "java.lang.String", "org.springframework.jdbc.core.simple.ParameterizedRowMapper<T>", "java.lang.Object...")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.simple.SimpleJdbcOperations", "queryForInt", "java.lang.String", "java.lang.Object...")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.simple.SimpleJdbcOperations", "queryForList", "java.lang.String", "java.lang.Object...")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.simple.SimpleJdbcOperations", "queryForLong", "java.lang.String", "java.lang.Object...")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.simple.SimpleJdbcOperations", "queryForMap", "java.lang.String", "java.lang.Object...")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.simple.SimpleJdbcOperations", "queryForObject", "java.lang.String", "java.lang.Class<T>", "java.lang.Object...")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.simple.SimpleJdbcOperations", "queryForObject", "java.lang.String", "org.springframework.jdbc.core.simple.ParameterizedRowMapper<T>", "java.lang.Object...")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.core.simple.SimpleJdbcOperations", "update", "java.lang.String", "java.lang.Object...")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>SqlCall.SqlCall (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.SqlCall", "SqlCall", "javax.sql.DataSource", "java.lang.String")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>SqlFunction (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.SqlFunction", "SqlFunction", "javax.sql.DataSource", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.SqlFunction", "SqlFunction", "javax.sql.DataSource", "java.lang.String", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.SqlFunction", "SqlFunction", "javax.sql.DataSource", "java.lang.String", "int[]", "java.lang.Class")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>SqlOperation.newPreparedStatementCreator (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.object.SqlOperation", "newPreparedStatementCreator", "java.lang.String", "java.lang.Object[]")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>SqlQuery (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.object.SqlQuery", "execute", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.springframework.jdbc.object.SqlQuery", "execute", "java.lang.String", "java.util.Map")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.SqlQuery", "SqlQuery", "javax.sql.DataSource", "java.lang.String")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>SqlUpdate (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.SqlUpdate", "SqlUpdate", "javax.sql.DataSource", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.SqlUpdate", "SqlUpdate", "javax.sql.DataSource", "java.lang.String", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.SqlUpdate", "SqlUpdate", "javax.sql.DataSource", "java.lang.String", "int[]", "int")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>Statement (java.sql)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "addBatch", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "execute", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "execute", "java.lang.String", "int")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "execute", "java.lang.String", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "execute", "java.lang.String", "java.lang.String[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "executeQuery", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "executeUpdate", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "executeUpdate", "java.lang.String", "int")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "executeUpdate", "java.lang.String", "int[]")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.sql.Statement", "executeUpdate", "java.lang.String", "java.lang.String[]")]]></place>
  </injection>
  <injection language="RegExp" injector-id="scala">
    <display-name>String (java.lang)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.lang.String", "replaceAll", "java.lang.String", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.lang.String", "replaceFirst", "java.lang.String", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.lang.String", "split", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "java.lang.String", "split", "java.lang.String", "int")]]></place>
  </injection>
  <injection language="SQL" injector-id="scala">
    <display-name>UpdatableSqlQuery.UpdatableSqlQuery (org.springframework.jdbc.object)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.springframework.jdbc.object.UpdatableSqlQuery", "UpdatableSqlQuery", "javax.sql.DataSource", "java.lang.String")]]></place>
  </injection>
  <injection language="XPath" injector-id="scala">
    <display-name>XPath (javax.xml.xpath)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "javax.xml.xpath.XPath", "compile", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "javax.xml.xpath.XPath", "evaluate", "java.lang.String", "java.lang.Object")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "javax.xml.xpath.XPath", "evaluate", "java.lang.String", "java.lang.Object", "javax.xml.namespace.QName")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "javax.xml.xpath.XPath", "evaluate", "java.lang.String", "org.xml.sax.InputSource")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(0, "javax.xml.xpath.XPath", "evaluate", "java.lang.String", "org.xml.sax.InputSource", "javax.xml.namespace.QName")]]></place>
  </injection>
  <injection language="XPath" injector-id="scala">
    <display-name>XPath (org.jdom.xpath)</display-name>
    <place><![CDATA[scalaLiteral().callArgument(0, "org.jdom.xpath.XPath", "newInstance", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.jdom.xpath.XPath", "selectNodes", "java.lang.Object", "java.lang.String")]]></place>
    <place><![CDATA[scalaLiteral().callArgument(1, "org.jdom.xpath.XPath", "selectSingleNode", "java.lang.Object", "java.lang.String")]]></place>
  </injection>
</component>
