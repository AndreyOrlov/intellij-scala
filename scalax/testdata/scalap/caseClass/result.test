case class CaseClass extends java.lang.Object with scala.ScalaObject with scala.Product {
  def this() = { /* compiled code */ }
  def foo : scala.Int = { /* compiled code */ }
  override def $tag() : scala.Int = { /* compiled code */ }
  override def hashCode() : scala.Int = { /* compiled code */ }
  override def toString() : scala.Predef.String = { /* compiled code */ }
  override def equals(a : scala.Any) : scala.Boolean = { /* compiled code */ }
  override def productPrefix : java.lang.String = { /* compiled code */ }
  override def productArity : scala.Int = { /* compiled code */ }
  override def productElement(i : scala.Int) : scala.Any = { /* compiled code */ }
}
final object CaseClass extends java.lang.Object with scala.Function0[CaseClass] with scala.ScalaObject {
  def this() = { /* compiled code */ }
  def apply() : CaseClass = { /* compiled code */ }
  def unapply(c : CaseClass) : scala.Boolean = { /* compiled code */ }
}