/* The following code was generated by JFlex 1.4.1 on 18.04.08 14:34 */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 18.04.08 14:34 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NEW_LINE_ALLOWED = 1;
  public static final int NEW_LINE_DEPRECATED = 1;
  public static final int PROCESS_NEW_LINE = 2;
  public static final int WAIT_FOR_XML = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\33\1\75\1\35\1\0\1\75\1\72\16\33\4\0\1\75\1\22"+
    "\1\41\1\23\1\32\1\65\1\24\1\40\1\104\1\67\1\24\1\13"+
    "\1\60\1\14\1\10\1\30\1\3\7\6\2\5\1\25\1\61\1\64"+
    "\1\62\1\63\1\76\1\26\1\37\1\7\1\77\1\17\1\11\1\15"+
    "\5\32\1\1\6\32\1\52\1\100\6\32\1\66\1\27\1\70\1\24"+
    "\1\34\1\21\1\43\1\101\1\42\1\20\1\12\1\16\1\111\1\45"+
    "\1\54\1\102\1\110\1\2\1\53\1\47\1\50\1\105\1\56\1\51"+
    "\1\46\1\44\1\36\1\107\1\57\1\4\1\55\1\106\1\103\1\31"+
    "\1\71\1\24\6\33\1\73\32\33\2\0\4\32\4\0\1\32\2\0"+
    "\1\33\7\0\1\32\4\0\1\32\5\0\27\32\1\0\37\32\1\0"+
    "\u013f\32\31\0\162\32\4\0\14\32\16\0\5\32\11\0\1\32\21\0"+
    "\130\33\5\0\23\33\12\0\1\32\13\0\1\32\1\0\3\32\1\0"+
    "\1\32\1\0\24\32\1\0\54\32\1\0\46\32\1\0\5\32\4\0"+
    "\202\32\1\0\4\33\3\0\105\32\1\0\46\32\2\0\2\32\6\0"+
    "\20\32\41\0\46\32\2\0\1\32\7\0\47\32\11\0\21\33\1\0"+
    "\27\33\1\0\3\33\1\0\1\33\1\0\2\33\1\0\1\33\13\0"+
    "\33\32\5\0\3\32\15\0\4\33\14\0\6\33\13\0\32\32\5\0"+
    "\13\32\16\33\7\0\12\33\4\0\2\32\1\33\143\32\1\0\1\32"+
    "\10\33\1\0\6\33\2\32\2\33\1\0\4\33\2\32\12\33\3\32"+
    "\2\0\1\32\17\0\1\33\1\32\1\33\36\32\33\33\2\0\3\32"+
    "\60\0\46\32\13\33\1\32\u014f\0\3\33\66\32\2\0\1\33\1\32"+
    "\20\33\2\0\1\32\4\33\3\0\12\32\2\33\2\0\12\33\21\0"+
    "\3\33\1\0\10\32\2\0\2\32\2\0\26\32\1\0\7\32\1\0"+
    "\1\32\3\0\4\32\2\0\1\33\1\32\7\33\2\0\2\33\2\0"+
    "\3\33\11\0\1\33\4\0\2\32\1\0\3\32\2\33\2\0\12\33"+
    "\4\32\15\0\3\33\1\0\6\32\4\0\2\32\2\0\26\32\1\0"+
    "\7\32\1\0\2\32\1\0\2\32\1\0\2\32\2\0\1\33\1\0"+
    "\5\33\4\0\2\33\2\0\3\33\13\0\4\32\1\0\1\32\7\0"+
    "\14\33\3\32\14\0\3\33\1\0\11\32\1\0\3\32\1\0\26\32"+
    "\1\0\7\32\1\0\2\32\1\0\5\32\2\0\1\33\1\32\10\33"+
    "\1\0\3\33\1\0\3\33\2\0\1\32\17\0\2\32\2\33\2\0"+
    "\12\33\1\0\1\32\17\0\3\33\1\0\10\32\2\0\2\32\2\0"+
    "\26\32\1\0\7\32\1\0\2\32\1\0\5\32\2\0\1\33\1\32"+
    "\6\33\3\0\2\33\2\0\3\33\10\0\2\33\4\0\2\32\1\0"+
    "\3\32\4\0\12\33\1\0\1\32\20\0\1\33\1\32\1\0\6\32"+
    "\3\0\3\32\1\0\4\32\3\0\2\32\1\0\1\32\1\0\2\32"+
    "\3\0\2\32\3\0\3\32\3\0\10\32\1\0\3\32\4\0\5\33"+
    "\3\0\3\33\1\0\4\33\11\0\1\33\17\0\11\33\11\0\1\32"+
    "\7\0\3\33\1\0\10\32\1\0\3\32\1\0\27\32\1\0\12\32"+
    "\1\0\5\32\4\0\7\33\1\0\3\33\1\0\4\33\7\0\2\33"+
    "\11\0\2\32\4\0\12\33\22\0\2\33\1\0\10\32\1\0\3\32"+
    "\1\0\27\32\1\0\12\32\1\0\5\32\2\0\1\33\1\32\7\33"+
    "\1\0\3\33\1\0\4\33\7\0\2\33\7\0\1\32\1\0\2\32"+
    "\4\0\12\33\22\0\2\33\1\0\10\32\1\0\3\32\1\0\27\32"+
    "\1\0\20\32\4\0\6\33\2\0\3\33\1\0\4\33\11\0\1\33"+
    "\10\0\2\32\4\0\12\33\22\0\2\33\1\0\22\32\3\0\30\32"+
    "\1\0\11\32\1\0\1\32\2\0\7\32\3\0\1\33\4\0\6\33"+
    "\1\0\1\33\1\0\10\33\22\0\2\33\15\0\60\32\1\33\2\32"+
    "\7\33\4\0\10\32\10\33\1\0\12\33\47\0\2\32\1\0\1\32"+
    "\2\0\2\32\1\0\1\32\2\0\1\32\6\0\4\32\1\0\7\32"+
    "\1\0\3\32\1\0\1\32\1\0\1\32\2\0\2\32\1\0\4\32"+
    "\1\33\2\32\6\33\1\0\2\33\1\32\2\0\5\32\1\0\1\32"+
    "\1\0\6\33\2\0\12\33\2\0\2\32\42\0\1\32\27\0\2\33"+
    "\6\0\12\33\13\0\1\33\1\0\1\33\1\0\1\33\4\0\2\33"+
    "\10\32\1\0\42\32\6\0\24\33\1\0\2\33\4\32\4\0\10\33"+
    "\1\0\44\33\11\0\1\33\71\0\42\32\1\0\5\32\1\0\2\32"+
    "\1\0\7\33\3\0\4\33\6\0\12\33\6\0\6\32\4\33\106\0"+
    "\46\32\12\0\51\32\7\0\132\32\5\0\104\32\5\0\122\32\6\0"+
    "\7\32\1\0\77\32\1\0\1\32\1\0\4\32\2\0\7\32\1\0"+
    "\1\32\1\0\4\32\2\0\47\32\1\0\1\32\1\0\4\32\2\0"+
    "\37\32\1\0\1\32\1\0\4\32\2\0\7\32\1\0\1\32\1\0"+
    "\4\32\2\0\7\32\1\0\7\32\1\0\27\32\1\0\37\32\1\0"+
    "\1\32\1\0\4\32\2\0\7\32\1\0\47\32\1\0\23\32\16\0"+
    "\11\33\56\0\125\32\14\0\u026c\32\2\0\10\32\12\0\32\32\5\0"+
    "\113\32\3\0\3\32\17\0\15\32\1\0\4\32\3\33\13\0\22\32"+
    "\3\33\13\0\22\32\2\33\14\0\15\32\1\0\3\32\1\0\2\33"+
    "\14\0\64\32\40\33\3\0\1\32\3\0\2\32\1\33\2\0\12\33"+
    "\41\0\3\33\2\0\12\33\6\0\130\32\10\0\51\32\1\33\126\0"+
    "\35\32\3\0\14\33\4\0\14\33\12\0\12\33\36\32\2\0\5\32"+
    "\u038b\0\154\32\224\0\234\32\4\0\132\32\6\0\26\32\2\0\6\32"+
    "\2\0\46\32\2\0\6\32\2\0\10\32\1\0\1\32\1\0\1\32"+
    "\1\0\1\32\1\0\37\32\2\0\65\32\1\0\7\32\1\0\1\32"+
    "\3\0\3\32\1\0\7\32\3\0\4\32\2\0\6\32\4\0\15\32"+
    "\5\0\3\32\1\0\7\32\17\0\4\33\30\0\1\74\1\74\5\33"+
    "\20\0\2\32\23\0\1\32\13\0\4\33\6\0\6\33\1\0\1\32"+
    "\15\0\1\32\40\0\22\32\36\0\15\33\4\0\1\33\3\0\6\33"+
    "\27\0\1\32\4\0\1\32\2\0\12\32\1\0\1\32\3\0\5\32"+
    "\6\0\1\32\1\0\1\32\1\0\1\32\1\0\4\32\1\0\3\32"+
    "\1\0\7\32\3\0\3\32\5\0\5\32\26\0\44\32\116\0\1\112"+
    "\u0e32\0\3\32\31\0\11\32\6\33\1\0\5\32\2\0\5\32\4\0"+
    "\126\32\2\0\2\33\2\0\3\32\1\0\137\32\5\0\50\32\4\0"+
    "\136\32\21\0\30\32\70\0\20\32\u0200\0\u19b6\32\112\0\u51a6\32\132\0"+
    "\u048d\32\u0773\0\u2ba4\32\u215c\0\u012e\32\2\0\73\32\225\0\7\32\14\0"+
    "\5\32\5\0\1\32\1\33\12\32\1\0\15\32\1\0\5\32\1\0"+
    "\1\32\1\0\2\32\1\0\2\32\1\0\154\32\41\0\u016b\32\22\0"+
    "\100\32\2\0\66\32\50\0\15\32\3\0\20\33\20\0\4\33\17\0"+
    "\2\32\30\0\3\32\31\0\1\32\6\0\5\32\1\0\207\32\2\0"+
    "\1\33\4\0\1\32\13\0\12\33\7\0\32\32\4\0\1\32\1\0"+
    "\32\32\12\0\132\32\3\0\6\32\2\0\6\32\2\0\6\32\2\0"+
    "\3\32\3\0\2\32\3\0\2\32\22\0\3\33\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\1\4\4\2\1\1\1\5"+
    "\1\6\1\7\1\2\1\10\1\11\1\1\1\12\13\2"+
    "\1\13\1\14\1\15\2\2\1\16\1\17\1\20\1\21"+
    "\1\11\1\22\1\23\2\2\1\24\1\15\1\25\1\26"+
    "\1\27\2\30\1\31\1\32\2\33\2\2\2\3\2\0"+
    "\1\34\1\0\2\34\6\2\1\35\1\0\1\2\1\0"+
    "\1\36\1\0\3\37\1\0\3\12\16\2\1\40\4\2"+
    "\1\41\1\42\1\43\1\44\1\45\2\0\3\2\1\46"+
    "\2\47\1\50\2\47\2\50\5\47\1\50\3\47\1\0"+
    "\1\51\3\0\1\2\1\0\4\3\2\0\1\34\1\0"+
    "\3\2\1\52\1\2\1\53\1\54\3\37\2\0\1\12"+
    "\1\0\10\2\1\55\3\2\1\56\12\2\1\57\2\0"+
    "\1\60\2\0\3\2\1\61\1\62\1\0\1\63\1\0"+
    "\1\63\11\0\1\64\2\0\1\65\4\0\1\66\2\3"+
    "\1\0\1\67\4\2\5\0\2\2\1\70\2\2\1\71"+
    "\1\72\1\2\1\73\2\2\1\74\11\2\1\75\4\0"+
    "\3\2\1\63\17\0\1\2\1\76\1\2\1\77\3\0"+
    "\1\100\1\101\1\0\2\2\1\102\1\103\1\2\1\104"+
    "\4\2\1\105\2\2\1\106\1\107\2\0\3\2\3\0"+
    "\1\110\5\0\3\2\4\0\3\2\1\111\1\112\1\2"+
    "\1\113\2\2\1\114\2\0\3\2\4\0\1\63\4\0"+
    "\1\115\1\116\1\117\3\0\6\2\2\0\1\120\1\2"+
    "\1\121\13\0\2\2\1\122\1\123\1\124\1\125\2\0"+
    "\1\2\7\0\2\2\2\0\1\126\4\0\1\127\1\0"+
    "\1\127\1\2\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[407];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0339"+
    "\0\u0339\0\u0339\0\u0465\0\u0177\0\u04b0\0\u04fb\0\u0546\0\u0591"+
    "\0\u05dc\0\u0627\0\u0672\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9"+
    "\0\u0834\0\u087f\0\u012c\0\u012c\0\u08ca\0\u0915\0\u0960\0\u012c"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u09ab\0\u09f6\0\u0a41\0\u0a8c"+
    "\0\u012c\0\u0ad7\0\u012c\0\u012c\0\u012c\0\u012c\0\u0b22\0\u0b6d"+
    "\0\u0bb8\0\u012c\0\u0c03\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a"+
    "\0\u0dc5\0\u0e10\0\u0e5b\0\u012c\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87"+
    "\0\u0fd2\0\u101d\0\u1068\0\u0177\0\u041a\0\u041a\0\u10b3\0\u10fe"+
    "\0\u1149\0\u1194\0\u11df\0\u122a\0\u11df\0\u1275\0\u12c0\0\u130b"+
    "\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd\0\u1518\0\u1563"+
    "\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725\0\u0177\0\u1770"+
    "\0\u17bb\0\u1806\0\u1851\0\u0339\0\u0339\0\u0339\0\u0339\0\u0339"+
    "\0\u189c\0\u18e7\0\u1932\0\u197d\0\u19c8\0\u0339\0\u012c\0\u1a13"+
    "\0\u1a5e\0\u1aa9\0\u1af4\0\u012c\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20"+
    "\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c\0\u1d97\0\u0b6d\0\u1de2\0\u012c"+
    "\0\u1e2d\0\u1e78\0\u0339\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef"+
    "\0\u203a\0\u2085\0\u203a\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc"+
    "\0\u2247\0\u2292\0\u0177\0\u012c\0\u22dd\0\u2328\0\u2373\0\u23be"+
    "\0\u2409\0\u012c\0\u2454\0\u249f\0\u24ea\0\u2535\0\u2580\0\u25cb"+
    "\0\u2616\0\u2661\0\u26ac\0\u0177\0\u26f7\0\u2742\0\u278d\0\u0177"+
    "\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f\0\u299a\0\u29e5"+
    "\0\u2a30\0\u2a7b\0\u012c\0\u2ac6\0\u2b11\0\u012c\0\u2b5c\0\u2ba7"+
    "\0\u2bf2\0\u2c3d\0\u2c88\0\u0177\0\u0177\0\u1a13\0\u2cd3\0\u2d1e"+
    "\0\u012c\0\u2d69\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u2ee0\0\u2f2b"+
    "\0\u2f76\0\u2fc1\0\u012c\0\u300c\0\u3057\0\u012c\0\u30a2\0\u30ed"+
    "\0\u3138\0\u3183\0\u0177\0\u31ce\0\u2085\0\u3219\0\u0177\0\u3264"+
    "\0\u32af\0\u32fa\0\u3345\0\u2373\0\u3390\0\u33db\0\u3426\0\u3471"+
    "\0\u34bc\0\u3507\0\u3552\0\u359d\0\u35e8\0\u0177\0\u0177\0\u3633"+
    "\0\u0177\0\u367e\0\u36c9\0\u0177\0\u3714\0\u375f\0\u37aa\0\u37f5"+
    "\0\u3840\0\u388b\0\u38d6\0\u3921\0\u396c\0\u0177\0\u39b7\0\u3a02"+
    "\0\u3a4d\0\u3a98\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f\0\u3c5a"+
    "\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c\0\u3e67\0\u3eb2"+
    "\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074\0\u0177\0\u40bf"+
    "\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u0177\0\u0177\0\u4236\0\u4281"+
    "\0\u42cc\0\u0177\0\u0177\0\u4317\0\u0177\0\u4362\0\u43ad\0\u43f8"+
    "\0\u4443\0\u0177\0\u448e\0\u44d9\0\u0177\0\u0177\0\u4524\0\u456f"+
    "\0\u45ba\0\u4605\0\u4650\0\u469b\0\u46e6\0\u4731\0\u477c\0\u47c7"+
    "\0\u4812\0\u485d\0\u48a8\0\u48f3\0\u493e\0\u4989\0\u49d4\0\u4a1f"+
    "\0\u4a6a\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96\0\u4be1\0\u0177\0\u0177"+
    "\0\u4c2c\0\u0177\0\u4c77\0\u4cc2\0\u0177\0\u4d0d\0\u4d58\0\u4da3"+
    "\0\u4dee\0\u4e39\0\u4e84\0\u4ecf\0\u4f1a\0\u4f65\0\u4f65\0\u4fb0"+
    "\0\u4ffb\0\u5046\0\u5091\0\u0177\0\u0177\0\u0177\0\u50dc\0\u5127"+
    "\0\u5172\0\u51bd\0\u5208\0\u5253\0\u529e\0\u52e9\0\u5334\0\u537f"+
    "\0\u53ca\0\u0177\0\u5415\0\u0177\0\u5460\0\u54ab\0\u54f6\0\u5541"+
    "\0\u558c\0\u55d7\0\u5622\0\u566d\0\u56b8\0\u5703\0\u574e\0\u5799"+
    "\0\u57e4\0\u0177\0\u0177\0\u0177\0\u0177\0\u582f\0\u587a\0\u58c5"+
    "\0\u5910\0\u595b\0\u59a6\0\u59f1\0\u5a3c\0\u5a87\0\u5ad2\0\u5b1d"+
    "\0\u5b68\0\u5bb3\0\u5bfe\0\u0177\0\u5c49\0\u5c94\0\u5cdf\0\u5d2a"+
    "\0\u012c\0\u5d75\0\u0177\0\u5dc0\0\u5e0b\0\u5e56\0\u5ea1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[407];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\6\2\11\1\6\1\12"+
    "\1\6\1\13\2\14\1\6\1\15\1\6\1\16\1\17"+
    "\1\14\1\20\1\14\1\21\1\22\1\14\1\23\1\14"+
    "\1\6\1\5\1\24\1\25\2\6\1\26\1\27\1\30"+
    "\1\31\1\32\1\6\1\33\1\34\1\35\1\36\1\6"+
    "\1\37\1\40\1\41\1\6\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\14\1\50\1\51\1\52\1\53\3\25"+
    "\1\54\1\14\4\6\1\55\1\56\1\57\1\6\1\60"+
    "\2\6\1\61\1\5\1\6\1\7\1\10\1\6\2\11"+
    "\1\6\1\12\1\6\1\13\2\14\1\6\1\15\1\6"+
    "\1\16\1\17\1\14\1\20\1\14\1\21\1\22\1\14"+
    "\1\23\1\14\1\6\1\5\1\24\1\25\2\6\1\26"+
    "\1\27\1\30\1\31\1\32\1\6\1\33\1\34\1\35"+
    "\1\36\1\6\1\37\1\40\1\41\1\6\1\42\1\43"+
    "\1\44\1\62\1\46\1\47\1\14\1\50\1\63\1\64"+
    "\1\65\3\25\1\54\1\14\4\6\1\55\1\56\1\57"+
    "\1\6\1\60\2\6\1\61\30\66\1\67\4\66\1\70"+
    "\34\66\3\70\1\71\15\66\64\72\1\73\26\72\114\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\1\6\1\75"+
    "\14\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\2\76\1\77\1\100\1\101\1\77\1\0\1\102\2\103"+
    "\2\0\4\104\73\0\2\76\1\11\1\0\2\11\1\0"+
    "\1\102\2\103\2\0\4\104\75\0\1\105\1\0\2\105"+
    "\105\0\1\6\1\106\1\6\1\107\3\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\3\0\4\6\2\0\5\6\14\0"+
    "\2\14\5\0\10\14\30\0\4\14\10\0\1\14\15\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\1\6\1\110\4\6\1\111\3\6"+
    "\1\112\3\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\1\6\1\113\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\6\6\1\114\7\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\1\0\21\115"+
    "\1\116\5\115\1\117\5\115\1\0\3\115\1\0\30\115"+
    "\3\0\16\115\13\0\2\14\5\0\6\14\1\120\1\14"+
    "\30\0\4\14\10\0\1\14\51\0\1\25\34\0\4\25"+
    "\15\0\1\121\2\122\1\121\1\122\2\121\1\122\1\121"+
    "\2\122\2\123\4\122\1\121\5\123\1\124\1\123\1\125"+
    "\1\122\1\121\1\122\1\0\2\122\1\0\1\121\16\122"+
    "\2\121\4\123\4\121\1\0\3\121\1\123\4\122\2\121"+
    "\5\122\1\121\27\126\1\127\5\126\1\0\3\126\1\130"+
    "\30\126\1\0\20\126\1\0\1\6\1\131\5\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\1\6\1\132\14\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\3\0\2\6\1\133\1\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\3\6\1\134\3\6\1\135\3\6"+
    "\1\136\2\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\1\6\1\137\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\1\140\1\6\2\0\16\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\1\6\1\141\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\1\142\1\6\2\0\16\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\3\0\2\6\1\143\1\6\2\0\2\6\1\144"+
    "\2\6\2\0\7\6\1\0\1\6\1\145\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\1\6\1\146\14\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\1\6"+
    "\1\147\2\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\11\6\1\150\4\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\12\6\1\151\3\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\3\6\1\152\6\6\1\153\3\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\14\0\2\14\5\0"+
    "\10\14\30\0\1\14\1\154\2\14\10\0\1\14\27\0"+
    "\2\14\5\0\3\14\1\155\4\14\30\0\4\14\10\0"+
    "\1\14\27\0\1\14\1\156\5\0\3\14\1\157\4\14"+
    "\30\0\3\14\1\160\10\0\1\14\100\0\1\161\112\0"+
    "\1\162\27\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\1\6\1\163\5\6"+
    "\1\164\6\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\1\6\1\165\14\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\14\0\2\14\5\0"+
    "\10\14\30\0\1\14\1\166\2\14\10\0\1\14\44\0"+
    "\1\120\62\0\3\167\1\170\1\167\2\170\1\167\1\171"+
    "\1\167\1\172\3\167\1\173\4\167\1\174\1\167\1\174"+
    "\6\167\1\175\1\70\4\167\1\176\6\167\1\177\1\167"+
    "\1\200\1\167\1\201\1\167\1\202\2\174\1\203\1\204"+
    "\1\205\1\167\4\174\4\206\15\167\64\0\1\207\27\0"+
    "\2\210\1\0\1\210\2\0\1\210\1\0\2\210\2\0"+
    "\4\210\1\0\1\211\7\0\1\210\1\0\1\210\1\0"+
    "\2\210\2\0\16\210\16\0\1\212\4\210\2\0\5\210"+
    "\2\0\7\6\1\0\2\6\2\14\4\6\1\0\7\14"+
    "\1\213\2\6\1\74\1\0\2\6\2\0\16\6\2\0"+
    "\4\14\5\0\1\6\2\0\1\14\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\3\0"+
    "\4\6\2\0\1\6\1\214\3\6\11\0\1\215\103\0"+
    "\2\76\1\77\1\0\1\101\1\77\1\0\1\102\2\103"+
    "\2\0\4\104\75\0\1\216\1\0\3\216\1\0\2\216"+
    "\2\0\4\216\16\0\1\216\2\0\2\216\33\0\1\216"+
    "\1\0\1\216\14\0\1\101\1\0\2\101\1\0\1\105"+
    "\2\103\2\0\4\104\73\0\2\217\1\105\1\217\2\105"+
    "\1\217\1\0\2\220\2\221\4\217\1\222\7\221\1\223"+
    "\1\217\1\0\1\217\1\215\2\217\2\0\16\217\2\0"+
    "\4\221\4\0\4\215\1\221\4\217\2\0\5\217\4\0"+
    "\1\224\1\0\2\224\4\0\2\225\101\0\1\105\1\0"+
    "\2\105\2\0\2\103\2\0\4\104\73\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\4\6\1\226\11\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\2\6\1\227"+
    "\13\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\1\6\1\230\5\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\7\6\1\231\6\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\5\6\1\232\10\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\1\6\1\233\2\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\1\0\21\115\1\116\5\115\1\117"+
    "\5\115\1\0\34\115\1\0\20\115\35\120\1\0\34\120"+
    "\1\0\20\120\27\0\1\234\10\0\1\234\53\0\7\235"+
    "\1\0\2\235\2\0\4\235\6\0\1\234\2\0\2\235"+
    "\1\236\1\0\2\235\1\234\1\0\16\235\13\0\1\235"+
    "\3\0\4\235\2\0\5\235\14\0\2\237\5\0\10\237"+
    "\6\0\1\234\21\0\4\237\10\0\1\237\14\0\3\121"+
    "\1\240\2\121\1\240\4\121\2\123\5\121\10\123\3\121"+
    "\1\0\1\241\23\121\4\123\4\121\1\0\3\121\1\123"+
    "\14\121\27\126\1\127\5\126\1\0\3\126\1\242\30\126"+
    "\1\0\55\126\1\0\34\126\1\0\20\126\41\0\1\243"+
    "\52\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\1\6\1\244\14\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\2\6\1\245\1\6\1\246\11\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\4\6\1\247\11\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\7\6\1\250\2\6"+
    "\1\251\3\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\1\252\1\6\2\0\1\6\1\253\11\6"+
    "\1\254\2\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\3\0"+
    "\4\6\2\0\1\255\4\6\2\0\7\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\1\6\1\256\14\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\3\0\4\6\2\0\1\257\4\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\15\6\1\260\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\1\6\1\261\5\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\3\0\3\6\1\262"+
    "\2\0\5\6\2\0\7\6\1\0\1\6\1\263\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\2\6\1\264\11\6\1\265\1\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\2\6\1\266\13\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\3\0\4\6\2\0\1\267\4\6\2\0\7\6"+
    "\1\0\1\6\1\270\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\12\6\1\271"+
    "\3\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\2\6\1\272\13\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\2\273\1\0\1\273"+
    "\2\0\1\273\1\0\2\273\2\0\4\273\1\0\1\274"+
    "\7\0\1\273\1\0\1\273\1\0\2\273\2\0\16\273"+
    "\16\0\1\275\4\273\2\0\5\273\2\0\2\276\1\0"+
    "\1\276\2\0\1\276\1\0\2\276\2\0\4\276\1\0"+
    "\1\277\7\0\1\276\1\0\1\276\1\0\2\276\2\0"+
    "\16\276\16\0\1\300\4\276\2\0\5\276\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\1\301\15\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\6\6\1\302"+
    "\3\6\1\303\3\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\1\6\1\304\5\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\7\6"+
    "\1\305\6\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\4\0\1\306\1\0\2\306\1\0\1\307\2\310\2\0"+
    "\4\311\75\0\1\307\1\0\2\307\106\0\1\312\1\0"+
    "\1\313\156\0\1\314\3\0\1\315\37\0\7\311\1\0"+
    "\2\311\2\0\4\311\11\0\3\311\1\0\2\311\2\0"+
    "\16\311\13\0\1\311\3\0\4\311\2\0\5\311\44\0"+
    "\1\316\61\0\1\317\143\0\1\320\123\0\1\321\112\0"+
    "\1\322\121\0\1\174\54\0\1\174\66\0\2\323\1\0"+
    "\1\323\2\0\1\323\1\0\2\323\1\0\1\174\4\323"+
    "\1\0\1\324\2\0\1\174\4\0\1\323\1\0\1\323"+
    "\1\0\2\323\2\0\16\323\5\0\1\174\10\0\1\325"+
    "\4\323\2\0\5\323\2\0\2\326\1\0\1\326\2\0"+
    "\1\326\1\0\2\326\2\0\4\326\1\0\1\327\7\0"+
    "\1\326\1\0\1\326\1\0\2\326\2\0\16\326\16\0"+
    "\1\330\4\326\2\0\5\326\15\0\1\331\51\0\1\332"+
    "\25\0\2\210\1\0\1\210\2\0\1\210\1\0\2\210"+
    "\2\0\4\210\11\0\1\210\1\0\1\210\1\0\2\210"+
    "\2\0\16\210\17\0\4\210\2\0\5\210\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\13\6\1\333\2\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\2\0\2\217\1\0\1\217\2\0"+
    "\1\217\1\0\2\217\2\221\4\217\1\222\7\221\1\223"+
    "\1\217\1\0\1\217\1\215\2\217\2\0\16\217\2\0"+
    "\4\221\4\0\4\215\1\221\4\217\2\0\5\217\2\0"+
    "\2\76\1\216\1\0\3\216\1\215\2\216\2\0\4\216"+
    "\16\0\1\216\2\0\2\216\33\0\1\216\1\0\1\216"+
    "\12\0\7\217\1\0\2\217\2\0\4\217\11\0\2\217"+
    "\1\334\1\0\2\217\2\0\16\217\13\0\1\217\3\0"+
    "\4\217\2\0\5\217\2\0\7\217\1\0\2\217\2\225"+
    "\4\217\11\0\2\217\1\334\1\0\2\217\2\0\16\217"+
    "\13\0\1\217\3\0\4\217\2\0\5\217\14\0\2\221"+
    "\5\0\10\221\30\0\4\221\10\0\1\221\14\0\21\222"+
    "\1\335\5\222\1\336\5\222\1\0\3\222\1\0\30\222"+
    "\3\0\16\222\3\0\1\224\1\0\2\224\6\0\4\104"+
    "\75\0\1\224\1\0\2\224\105\0\7\6\1\0\1\6"+
    "\1\337\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\1\6\1\340\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\4\6\1\341\11\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\10\6\1\342\5\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\1\6\1\343\14\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\2\0\7\235\1\0\2\235\2\0"+
    "\4\235\11\0\2\235\1\236\1\0\2\235\2\0\16\235"+
    "\13\0\1\235\3\0\4\235\2\0\5\235\2\0\7\235"+
    "\1\0\2\235\2\237\4\235\1\0\7\237\1\344\2\235"+
    "\1\236\1\0\2\235\2\0\16\235\2\0\4\237\5\0"+
    "\1\235\2\0\1\237\4\235\2\0\5\235\14\0\2\237"+
    "\5\0\10\237\30\0\4\237\10\0\1\237\17\0\1\345"+
    "\2\0\1\345\20\0\1\234\10\0\1\234\55\0\1\346"+
    "\1\0\3\347\1\0\2\347\2\0\4\347\6\0\1\234"+
    "\7\0\1\347\1\234\1\0\2\347\33\0\1\347\1\0"+
    "\1\347\11\0\41\243\1\350\51\243\1\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\4\6\1\351\11\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\1\352\15\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\1\6\1\353\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\2\6\1\354"+
    "\13\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\6\6\1\355\7\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\4\6\1\356\11\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\1\6\1\357\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\12\6\1\360\3\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\1\6\1\361\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\1\6"+
    "\1\362\5\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\2\0\7\6\1\0\1\6\1\363"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\1\6\1\364\5\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\7\6\1\0\1\6"+
    "\1\365\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\7\6\1\366\6\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\1\367"+
    "\1\6\2\0\16\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\1\370\1\6\2\0\16\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\1\371\15\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\1\6\1\372\5\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\6\6"+
    "\1\373\7\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\1\6\1\374\5\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\1\6\1\375"+
    "\5\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\3\6\1\376"+
    "\12\6\13\0\1\6\3\0\4\6\2\0\5\6\15\0"+
    "\1\377\51\0\1\u0100\25\0\2\273\1\0\1\273\2\0"+
    "\1\273\1\0\2\273\2\0\4\273\11\0\1\273\1\0"+
    "\1\273\1\0\2\273\2\0\16\273\17\0\4\273\2\0"+
    "\5\273\15\0\1\u0101\51\0\1\u0102\25\0\2\276\1\0"+
    "\1\276\2\0\1\276\1\0\2\276\2\0\4\276\11\0"+
    "\1\276\1\0\1\276\1\0\2\276\2\0\16\276\17\0"+
    "\4\276\2\0\5\276\2\0\7\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\3\0\4\6\2\0\3\6\1\u0103\1\6"+
    "\2\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\2\6\1\u0104\13\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\3\0\4\6\2\0\2\6"+
    "\1\u0105\2\6\4\0\1\307\1\0\2\307\2\0\2\310"+
    "\2\0\4\311\75\0\1\u0106\1\0\2\u0106\4\0\2\u0107"+
    "\144\0\1\u0108\110\0\1\u0109\117\0\1\u010a\110\0\1\u010b"+
    "\107\0\1\u010c\1\0\1\u010d\122\0\1\u010e\100\0\1\u010c"+
    "\60\0\1\u010f\144\0\1\u0110\62\0\1\u0111\51\0\1\u0112"+
    "\25\0\2\323\1\0\1\323\2\0\1\323\1\0\2\323"+
    "\2\0\4\323\11\0\1\323\1\0\1\323\1\0\2\323"+
    "\2\0\16\323\17\0\4\323\2\0\5\323\15\0\1\u0113"+
    "\51\0\1\u0114\25\0\2\326\1\0\1\326\2\0\1\326"+
    "\1\0\2\326\2\0\4\326\11\0\1\326\1\0\1\326"+
    "\1\0\2\326\2\0\16\326\17\0\4\326\2\0\5\326"+
    "\15\0\1\210\175\0\1\u0115\14\0\7\217\1\0\2\217"+
    "\2\221\4\217\1\0\7\221\1\223\2\217\1\334\1\0"+
    "\2\217\2\0\16\217\2\0\4\221\5\0\1\217\2\0"+
    "\1\221\4\217\2\0\5\217\1\0\21\222\1\335\5\222"+
    "\1\336\5\222\1\0\34\222\1\0\20\222\1\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\5\6\1\u0116\10\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\2\0\7\6\1\0\1\6\1\u0117"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\6\6\1\u0118\7\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\1\6\1\u0119\5\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\4\0\1\121\2\0\1\121\20\0\1\234\10\0"+
    "\1\234\55\0\1\u011a\1\0\3\u011b\1\0\2\u011b\2\0"+
    "\4\u011b\16\0\1\u011b\2\0\2\u011b\33\0\1\u011b\1\0"+
    "\1\u011b\14\0\1\u011b\1\0\3\u011b\1\0\2\u011b\2\0"+
    "\4\u011b\16\0\1\u011b\2\0\2\u011b\33\0\1\u011b\1\0"+
    "\1\u011b\11\0\41\243\1\u011c\51\243\1\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\4\6\1\u011d\11\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\3\6\1\u011e"+
    "\12\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\u011f\2\6\2\0\16\6\12\0\1\u011f\1\u0120\2\u011f"+
    "\1\0\4\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\7\6\1\u0121\6\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\15\6\1\u0122\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\2\6\1\u0123\13\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\1\6\1\u0124\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\7\6\1\u0125\6\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\1\u0126"+
    "\15\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\7\6\1\u0127\6\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\7\6\1\u0128\6\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\12\6\1\u0129\3\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\3\6\1\u012a\12\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\12\6"+
    "\1\u012b\3\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\7\6\1\u012c\6\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\1\u012d\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\1\6\1\u012e\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\15\0\1\273\175\0"+
    "\1\u012f\27\0\1\276\175\0\1\u0130\14\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\1\6\1\u0131\14\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\1\6\1\u0132\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\1\6\1\u0133\14\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\4\0\1\u0106\1\0\2\u0106\6\0"+
    "\4\311\75\0\1\u0106\1\0\2\u0106\116\0\1\175\112\0"+
    "\1\u0134\152\0\1\u0135\103\0\1\u0136\111\0\1\u0110\62\0"+
    "\1\u0137\136\0\1\u0138\56\0\1\u0139\155\0\1\175\61\0"+
    "\1\323\175\0\1\u013a\27\0\1\326\175\0\1\u013b\32\0"+
    "\1\u013c\74\0\7\6\1\0\2\6\2\0\3\6\1\u013d"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\11\6\1\u013e\4\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\1\6\1\u013f\5\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\3\0\4\6\2\0\5\6\4\0"+
    "\1\u0140\1\0\3\u0141\1\0\2\u0141\2\0\4\u0141\16\0"+
    "\1\u0141\2\0\2\u0141\33\0\1\u0141\1\0\1\u0141\14\0"+
    "\1\u0141\1\0\3\u0141\1\0\2\u0141\2\0\4\u0141\16\0"+
    "\1\u0141\2\0\2\u0141\33\0\1\u0141\1\0\1\u0141\11\0"+
    "\41\243\1\242\51\243\35\0\1\u011f\4\0\1\u0142\5\0"+
    "\1\u0143\21\0\4\u011f\16\0\7\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\u011f\2\6\2\0\1\u0144"+
    "\5\6\1\u0145\7\6\12\0\1\u011f\1\u0120\2\u011f\1\0"+
    "\4\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\1\6"+
    "\1\u0146\14\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\1\u0147\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\2\6\1\u0148\13\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\12\6\1\u0149\3\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\5\6\1\u014a\10\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\7\6"+
    "\1\u014b\6\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\1\u014c\15\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\2\6\1\u014d\13\6\13\0\1\6\3\0\4\6\2\0"+
    "\5\6\20\0\1\u014e\112\0\1\u014f\74\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\3\0\4\6\2\0\4\6"+
    "\1\u0150\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\1\u0151\15\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\2\6\1\u0152\13\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\50\0\1\u0153\113\0\1\u0154\44\0\1\u0155"+
    "\111\0\7\311\1\0\2\311\2\0\4\311\11\0\3\311"+
    "\1\u0156\2\311\2\0\16\311\12\0\1\u0156\1\u0157\2\u0156"+
    "\1\0\4\311\2\0\5\311\55\0\1\u0158\56\0\1\175"+
    "\111\0\1\u0159\112\0\1\u015a\132\0\1\u015b\54\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\4\6\1\u015c\11\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\2\0\7\6\1\0\1\6\1\u015d"+
    "\2\0\4\6\11\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\13\6\1\u015e\2\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\4\0\1\121\1\0\3\121"+
    "\1\0\2\121\2\0\4\121\16\0\1\u015f\2\0\2\121"+
    "\33\0\1\121\1\0\1\121\14\0\1\121\1\0\3\121"+
    "\1\0\2\121\2\0\4\121\16\0\1\121\2\0\2\121"+
    "\33\0\1\121\1\0\1\121\13\0\1\u0160\211\0\1\u0161"+
    "\12\0\1\6\1\u0162\5\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\3\0\2\6\1\u0163\1\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\1\u0164\15\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\1\u0165\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\1\6\1\u0166\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\12\6\1\u0167\3\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\40\0\1\u0168\112\0\1\u0169\54\0"+
    "\7\6\1\0\1\6\1\u016a\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\4\6\11\0\2\6\1\74\1\0\2\6\2\0\2\6"+
    "\1\u016b\13\6\13\0\1\6\3\0\4\6\2\0\5\6"+
    "\2\0\7\6\1\0\1\6\1\u016c\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\21\0\1\u016d\145\0\1\u016e"+
    "\41\0\1\u016f\145\0\1\u0156\4\0\1\u0170\5\0\1\u0171"+
    "\21\0\4\u0156\66\0\1\u0172\100\0\1\u0173\112\0\1\u0174"+
    "\153\0\1\u0175\52\0\1\234\115\0\1\u0176\151\0\1\u0177"+
    "\11\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\1\6\1\u0178\14\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\4\6\11\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\3\0\3\6\1\u0179\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\2\6\1\u017a\13\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\1\6\1\u017b\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\4\6\1\u017c"+
    "\11\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\4\6\11\0\2\6\1\74"+
    "\1\0\2\6\2\0\2\6\1\u017d\13\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\101\0\1\u017e\112\0\1\u017f"+
    "\13\0\7\6\1\0\1\6\1\u0180\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\3\0\4\6\2\0\5\6\47\0\1\175\56\0\1\174"+
    "\155\0\1\175\37\0\1\u0181\211\0\1\u0182\23\0\1\u016d"+
    "\200\0\1\u0183\112\0\1\u0184\51\0\1\u0185\121\0\1\u0186"+
    "\56\0\1\u0187\101\0\7\6\1\0\2\6\2\0\4\6"+
    "\11\0\2\6\1\74\1\0\2\6\2\0\4\6\1\u0188"+
    "\11\6\13\0\1\6\3\0\4\6\2\0\5\6\2\0"+
    "\7\6\1\0\1\6\1\u0189\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\40\0\1\u018a\112\0\1\u018b\54\0"+
    "\7\6\1\0\2\6\2\0\3\6\1\u018c\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\3\0"+
    "\4\6\2\0\5\6\44\0\1\u018d\151\0\1\u018e\47\0"+
    "\1\u018f\112\0\1\u0190\141\0\1\210\72\0\1\u0191\106\0"+
    "\1\u0192\51\0\7\6\1\0\2\6\2\0\4\6\11\0"+
    "\2\6\1\74\1\0\2\6\2\0\4\6\1\u0193\11\6"+
    "\13\0\1\6\3\0\4\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\4\6\11\0\2\6\1\74\1\0"+
    "\2\6\2\0\1\u0194\15\6\13\0\1\6\3\0\4\6"+
    "\2\0\5\6\67\0\1\273\112\0\1\276\72\0\1\u0195"+
    "\56\0\1\u0196\166\0\1\323\112\0\1\326\70\0\1\u0191"+
    "\47\0\7\6\1\0\2\6\2\0\4\6\11\0\2\6"+
    "\1\74\1\0\2\6\2\0\2\6\1\u0193\13\6\13\0"+
    "\1\6\3\0\4\6\2\0\5\6\47\0\1\311\106\0"+
    "\1\u0197\114\0\1\311\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\2\3\31\1\2\11\3\1\5\11"+
    "\4\1\1\11\1\1\4\11\1\1\1\3\1\1\1\11"+
    "\3\1\2\3\2\0\1\1\1\0\1\11\10\1\1\0"+
    "\1\1\1\0\1\1\1\0\3\1\1\0\33\1\2\0"+
    "\4\1\1\11\1\1\1\5\2\1\1\15\1\5\5\1"+
    "\1\5\2\1\1\3\1\0\1\11\3\0\1\1\1\0"+
    "\1\3\3\5\2\0\1\1\1\0\6\1\1\11\3\1"+
    "\2\0\1\11\1\0\27\1\1\11\2\0\1\11\2\0"+
    "\5\1\1\0\1\5\1\0\1\15\11\0\1\11\2\0"+
    "\1\11\4\0\1\1\2\5\1\0\5\1\5\0\2\1"+
    "\1\3\23\1\4\0\3\1\1\5\17\0\4\1\3\0"+
    "\2\1\1\0\17\1\2\0\3\1\3\0\1\1\5\0"+
    "\3\1\4\0\12\1\2\0\3\1\4\0\1\5\4\0"+
    "\3\1\3\0\6\1\2\0\3\1\13\0\6\1\2\0"+
    "\1\1\7\0\2\1\2\0\1\1\4\0\1\15\1\0"+
    "\1\5\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[407];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Stack for braces
    private Stack <IElementType> braceStack = new Stack<IElementType>();

    /* Defines, is in this section new line is whitespace or not? */
    private boolean newLineAllowed(){
      if (braceStack.isEmpty()){
        return true;
      } else {
        return ScalaTokenTypes.tLBRACE.equals(braceStack.peek());
      }
    }

    private static boolean endsByWhiteSpace(String s) {
      return s != null && (s.endsWith(" ") || s.endsWith("\t") || s.endsWith("\f"));
    }

    /* Changes state depending on brace stack */
    private void changeState(){
      if (braceStack.isEmpty()) {
        yybegin(YYINITIAL);
      } else if ( tLPARENTHESIS.equals(braceStack.peek()) || tLSQBRACKET.equals(braceStack.peek()) ){
        yybegin(NEW_LINE_DEPRECATED);
      } else {
        yybegin(NEW_LINE_ALLOWED);
      }
    }

    /* removes brace from stack */
    private IElementType popBraceStack(IElementType elem){
     if (
          !braceStack.isEmpty() &&
          (
            (elem.equals(tRSQBRACKET) && tLSQBRACKET.equals(braceStack.peek())) ||
            (elem.equals(tRBRACE) && tLBRACE.equals(braceStack.peek())) ||
            (elem.equals(tRPARENTHESIS) && tLPARENTHESIS.equals(braceStack.peek()))
          )
        ) {
          braceStack.pop();
          return process(elem);
        } else if (elem.equals(tFUNTYPE)) {
          if (!braceStack.isEmpty() && kCASE.equals(braceStack.peek())) {
            braceStack.pop();
          }
          return process(elem);
        } else {
          return process(elem);
        }
    }

    private IElementType process(IElementType type){
        return type;
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1796) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { return process(kCATCH);
          }
        case 88: break;
        case 67: 
          { return process(kTRAIT);
          }
        case 89: break;
        case 41: 
          { changeState();
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 90: break;
        case 31: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSYMBOL);
          }
        case 91: break;
        case 86: 
          { return process(kPROTECTED);
          }
        case 92: break;
        case 34: 
          { return process(tLOWER_BOUND);
          }
        case 93: break;
        case 30: 
          { return process(tLINE_COMMENT);
          }
        case 94: break;
        case 6: 
          { return process(tCOLON);
          }
        case 95: break;
        case 77: 
          { return process(kEXTENDS);
          }
        case 96: break;
        case 50: 
          { return process(kVAR);
          }
        case 97: break;
        case 2: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tIDENTIFIER);
          }
        case 98: break;
        case 24: 
          { yypushback(yylength());
                                                    changeState();
          }
        case 99: break;
        case 12: 
          { return process(tSEMICOLON);
          }
        case 100: break;
        case 53: 
          { yybegin(WAIT_FOR_XML);
                                                   yypushback(2);
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 101: break;
        case 15: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRPARENTHESIS);
          }
        case 102: break;
        case 74: 
          { return process(kOBJECT);
          }
        case 103: break;
        case 38: 
          { return popBraceStack(tFUNTYPE);
          }
        case 104: break;
        case 1: 
          { return process(tSTUB);
          }
        case 105: break;
        case 61: 
          { return process(kWITH);
          }
        case 106: break;
        case 36: 
          { return process(tUPPER_BOUND);
          }
        case 107: break;
        case 4: 
          { return process(tDOT);
          }
        case 108: break;
        case 69: 
          { return process(kMATCH);
          }
        case 109: break;
        case 11: 
          { return process(tCOMMA);
          }
        case 110: break;
        case 21: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRPARENTHESIS);
          }
        case 111: break;
        case 23: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRBRACE);
          }
        case 112: break;
        case 39: 
          { yypushback(1);
                                                    changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 113: break;
        case 66: 
          { return process(kTHROW);
          }
        case 114: break;
        case 40: 
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 115: break;
        case 49: 
          { return process(kVAL);
          }
        case 116: break;
        case 81: 
          { return process(kPRIVATE);
          }
        case 117: break;
        case 62: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kFALSE);
          }
        case 118: break;
        case 79: 
          { return process(kFINALLY);
          }
        case 119: break;
        case 78: 
          { return process(kFOR_SOME);
          }
        case 120: break;
        case 59: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTYPE);
          }
        case 121: break;
        case 26: 
          { return process(tWHITE_SPACE_IN_LINE);
          }
        case 122: break;
        case 27: 
          { changeState();
                                            yypushback(yytext().length());
          }
        case 123: break;
        case 73: 
          { return process(kSEALED);
          }
        case 124: break;
        case 64: 
          { return process(kCLASS);
          }
        case 125: break;
        case 75: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kRETURN);
          }
        case 126: break;
        case 83: 
          { return process(kOVERRIDE);
          }
        case 127: break;
        case 80: 
          { return process(kPACKAGE);
          }
        case 128: break;
        case 48: 
          { braceStack.push(tLPARENTHESIS);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLPARENTHESIS);
          }
        case 129: break;
        case 29: 
          { return process(kDO);
          }
        case 130: break;
        case 42: 
          { return process(kFOR);
          }
        case 131: break;
        case 10: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSTRING);
          }
        case 132: break;
        case 17: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRBRACE);
          }
        case 133: break;
        case 35: 
          { return process(tCHOOSE);
          }
        case 134: break;
        case 16: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRSQBRACKET);
          }
        case 135: break;
        case 70: 
          { return process(kYIELD);
          }
        case 136: break;
        case 7: 
          { return process(tAT);
          }
        case 137: break;
        case 44: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tCHAR);
          }
        case 138: break;
        case 8: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tUNDER);
          }
        case 139: break;
        case 46: 
          { return process(kNEW);
          }
        case 140: break;
        case 84: 
          { return process(kREQUIRES);
          }
        case 141: break;
        case 14: 
          { braceStack.push(tLSQBRACKET);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLSQBRACKET);
          }
        case 142: break;
        case 3: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tINTEGER);
          }
        case 143: break;
        case 37: 
          { return process(tVIEW);
          }
        case 144: break;
        case 28: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tFLOAT);
          }
        case 145: break;
        case 85: 
          { return process(kIMPLICIT);
          }
        case 146: break;
        case 19: 
          { braceStack.push(tLPARENTHESIS);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLPARENTHESIS);
          }
        case 147: break;
        case 63: 
          { return process(kFINAL);
          }
        case 148: break;
        case 45: 
          { return process(kTRY);
          }
        case 149: break;
        case 5: 
          { return process(tINNER_CLASS);
          }
        case 150: break;
        case 54: 
          { return process(kLAZY);
          }
        case 151: break;
        case 68: 
          { return process(kSUPER);
          }
        case 152: break;
        case 87: 
          { return process(kCASE);
          }
        case 153: break;
        case 51: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 154: break;
        case 72: 
          { yypushback(4);
                                                   changeState();
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 155: break;
        case 13: 
          { return process(tASSIGN);
          }
        case 156: break;
        case 58: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTRUE);
          }
        case 157: break;
        case 20: 
          { return process(tFUNTYPE_ASCII);
          }
        case 158: break;
        case 76: 
          { return process(kIMPORT);
          }
        case 159: break;
        case 82: 
          { return process(kABSTRACT);
          }
        case 160: break;
        case 25: 
          { changeState();
                                                    return process(tLINE_TERMINATOR);
          }
        case 161: break;
        case 47: 
          { braceStack.push(tLBRACE);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLBRACE);
          }
        case 162: break;
        case 32: 
          { return process(kIF);
          }
        case 163: break;
        case 56: 
          { braceStack.push(kCASE);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(kCASE);
          }
        case 164: break;
        case 57: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTHIS);
          }
        case 165: break;
        case 9: 
          { yybegin(WAIT_FOR_XML);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 166: break;
        case 22: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRSQBRACKET);
          }
        case 167: break;
        case 18: 
          { braceStack.push(tLBRACE);
                                            yybegin(NEW_LINE_ALLOWED);
                                            return process(tLBRACE);
          }
        case 168: break;
        case 60: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kNULL);
          }
        case 169: break;
        case 33: 
          { return process(tFUNTYPE);
          }
        case 170: break;
        case 71: 
          { return process(kWHILE);
          }
        case 171: break;
        case 43: 
          { return process(kDEF);
          }
        case 172: break;
        case 52: 
          { yybegin(WAIT_FOR_XML);
                                                    yypushback(2);
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 173: break;
        case 55: 
          { return process(kELSE);
          }
        case 174: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
