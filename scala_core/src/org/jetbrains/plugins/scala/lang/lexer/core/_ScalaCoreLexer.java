/* The following code was generated by JFlex 1.4.1 on 3/25/08 9:40 PM */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;

import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/25/08 9:40 PM from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NEW_LINE_ALLOWED = 1;
  public static final int NEW_LINE_DEPRECATED = 1;
  public static final int PROCESS_NEW_LINE = 2;
  public static final int WAIT_FOR_XML = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\31\1\73\1\33\1\0\1\73\1\70\16\31\4\0\1\73\1\21"+
    "\1\37\1\22\1\30\1\63\1\21\1\36\1\77\1\65\1\21\1\13"+
    "\1\56\1\14\1\10\1\26\1\3\7\6\2\5\1\23\1\57\1\62"+
    "\1\60\1\61\1\21\1\24\1\35\2\7\1\15\1\11\1\15\5\30"+
    "\1\1\6\30\1\50\7\30\1\64\1\25\1\66\1\21\1\32\1\20"+
    "\1\41\1\74\1\40\1\17\1\12\1\16\1\104\1\43\1\52\1\75"+
    "\1\103\1\2\1\51\1\45\1\46\1\100\1\54\1\47\1\44\1\42"+
    "\1\34\1\102\1\55\1\4\1\53\1\101\1\76\1\27\1\67\1\21"+
    "\6\31\1\71\32\31\2\0\4\30\4\0\1\30\2\0\1\31\7\0"+
    "\1\30\4\0\1\30\5\0\27\30\1\0\37\30\1\0\u013f\30\31\0"+
    "\162\30\4\0\14\30\16\0\5\30\11\0\1\30\21\0\130\31\5\0"+
    "\23\31\12\0\1\30\13\0\1\30\1\0\3\30\1\0\1\30\1\0"+
    "\24\30\1\0\54\30\1\0\46\30\1\0\5\30\4\0\202\30\1\0"+
    "\4\31\3\0\105\30\1\0\46\30\2\0\2\30\6\0\20\30\41\0"+
    "\46\30\2\0\1\30\7\0\47\30\11\0\21\31\1\0\27\31\1\0"+
    "\3\31\1\0\1\31\1\0\2\31\1\0\1\31\13\0\33\30\5\0"+
    "\3\30\15\0\4\31\14\0\6\31\13\0\32\30\5\0\13\30\16\31"+
    "\7\0\12\31\4\0\2\30\1\31\143\30\1\0\1\30\10\31\1\0"+
    "\6\31\2\30\2\31\1\0\4\31\2\30\12\31\3\30\2\0\1\30"+
    "\17\0\1\31\1\30\1\31\36\30\33\31\2\0\3\30\60\0\46\30"+
    "\13\31\1\30\u014f\0\3\31\66\30\2\0\1\31\1\30\20\31\2\0"+
    "\1\30\4\31\3\0\12\30\2\31\2\0\12\31\21\0\3\31\1\0"+
    "\10\30\2\0\2\30\2\0\26\30\1\0\7\30\1\0\1\30\3\0"+
    "\4\30\2\0\1\31\1\30\7\31\2\0\2\31\2\0\3\31\11\0"+
    "\1\31\4\0\2\30\1\0\3\30\2\31\2\0\12\31\4\30\15\0"+
    "\3\31\1\0\6\30\4\0\2\30\2\0\26\30\1\0\7\30\1\0"+
    "\2\30\1\0\2\30\1\0\2\30\2\0\1\31\1\0\5\31\4\0"+
    "\2\31\2\0\3\31\13\0\4\30\1\0\1\30\7\0\14\31\3\30"+
    "\14\0\3\31\1\0\11\30\1\0\3\30\1\0\26\30\1\0\7\30"+
    "\1\0\2\30\1\0\5\30\2\0\1\31\1\30\10\31\1\0\3\31"+
    "\1\0\3\31\2\0\1\30\17\0\2\30\2\31\2\0\12\31\1\0"+
    "\1\30\17\0\3\31\1\0\10\30\2\0\2\30\2\0\26\30\1\0"+
    "\7\30\1\0\2\30\1\0\5\30\2\0\1\31\1\30\6\31\3\0"+
    "\2\31\2\0\3\31\10\0\2\31\4\0\2\30\1\0\3\30\4\0"+
    "\12\31\1\0\1\30\20\0\1\31\1\30\1\0\6\30\3\0\3\30"+
    "\1\0\4\30\3\0\2\30\1\0\1\30\1\0\2\30\3\0\2\30"+
    "\3\0\3\30\3\0\10\30\1\0\3\30\4\0\5\31\3\0\3\31"+
    "\1\0\4\31\11\0\1\31\17\0\11\31\11\0\1\30\7\0\3\31"+
    "\1\0\10\30\1\0\3\30\1\0\27\30\1\0\12\30\1\0\5\30"+
    "\4\0\7\31\1\0\3\31\1\0\4\31\7\0\2\31\11\0\2\30"+
    "\4\0\12\31\22\0\2\31\1\0\10\30\1\0\3\30\1\0\27\30"+
    "\1\0\12\30\1\0\5\30\2\0\1\31\1\30\7\31\1\0\3\31"+
    "\1\0\4\31\7\0\2\31\7\0\1\30\1\0\2\30\4\0\12\31"+
    "\22\0\2\31\1\0\10\30\1\0\3\30\1\0\27\30\1\0\20\30"+
    "\4\0\6\31\2\0\3\31\1\0\4\31\11\0\1\31\10\0\2\30"+
    "\4\0\12\31\22\0\2\31\1\0\22\30\3\0\30\30\1\0\11\30"+
    "\1\0\1\30\2\0\7\30\3\0\1\31\4\0\6\31\1\0\1\31"+
    "\1\0\10\31\22\0\2\31\15\0\60\30\1\31\2\30\7\31\4\0"+
    "\10\30\10\31\1\0\12\31\47\0\2\30\1\0\1\30\2\0\2\30"+
    "\1\0\1\30\2\0\1\30\6\0\4\30\1\0\7\30\1\0\3\30"+
    "\1\0\1\30\1\0\1\30\2\0\2\30\1\0\4\30\1\31\2\30"+
    "\6\31\1\0\2\31\1\30\2\0\5\30\1\0\1\30\1\0\6\31"+
    "\2\0\12\31\2\0\2\30\42\0\1\30\27\0\2\31\6\0\12\31"+
    "\13\0\1\31\1\0\1\31\1\0\1\31\4\0\2\31\10\30\1\0"+
    "\42\30\6\0\24\31\1\0\2\31\4\30\4\0\10\31\1\0\44\31"+
    "\11\0\1\31\71\0\42\30\1\0\5\30\1\0\2\30\1\0\7\31"+
    "\3\0\4\31\6\0\12\31\6\0\6\30\4\31\106\0\46\30\12\0"+
    "\51\30\7\0\132\30\5\0\104\30\5\0\122\30\6\0\7\30\1\0"+
    "\77\30\1\0\1\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0"+
    "\4\30\2\0\47\30\1\0\1\30\1\0\4\30\2\0\37\30\1\0"+
    "\1\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0\4\30\2\0"+
    "\7\30\1\0\7\30\1\0\27\30\1\0\37\30\1\0\1\30\1\0"+
    "\4\30\2\0\7\30\1\0\47\30\1\0\23\30\16\0\11\31\56\0"+
    "\125\30\14\0\u026c\30\2\0\10\30\12\0\32\30\5\0\113\30\3\0"+
    "\3\30\17\0\15\30\1\0\4\30\3\31\13\0\22\30\3\31\13\0"+
    "\22\30\2\31\14\0\15\30\1\0\3\30\1\0\2\31\14\0\64\30"+
    "\40\31\3\0\1\30\3\0\2\30\1\31\2\0\12\31\41\0\3\31"+
    "\2\0\12\31\6\0\130\30\10\0\51\30\1\31\126\0\35\30\3\0"+
    "\14\31\4\0\14\31\12\0\12\31\36\30\2\0\5\30\u038b\0\154\30"+
    "\224\0\234\30\4\0\132\30\6\0\26\30\2\0\6\30\2\0\46\30"+
    "\2\0\6\30\2\0\10\30\1\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\37\30\2\0\65\30\1\0\7\30\1\0\1\30\3\0\3\30"+
    "\1\0\7\30\3\0\4\30\2\0\6\30\4\0\15\30\5\0\3\30"+
    "\1\0\7\30\17\0\4\31\30\0\1\72\1\72\5\31\20\0\2\30"+
    "\23\0\1\30\13\0\4\31\6\0\6\31\1\0\1\30\15\0\1\30"+
    "\40\0\22\30\36\0\15\31\4\0\1\31\3\0\6\31\27\0\1\30"+
    "\4\0\1\30\2\0\12\30\1\0\1\30\3\0\5\30\6\0\1\30"+
    "\1\0\1\30\1\0\1\30\1\0\4\30\1\0\3\30\1\0\7\30"+
    "\3\0\3\30\5\0\5\30\26\0\44\30\116\0\1\105\u0e32\0\3\30"+
    "\31\0\11\30\6\31\1\0\5\30\2\0\5\30\4\0\126\30\2\0"+
    "\2\31\2\0\3\30\1\0\137\30\5\0\50\30\4\0\136\30\21\0"+
    "\30\30\70\0\20\30\u0200\0\u19b6\30\112\0\u51a6\30\132\0\u048d\30\u0773\0"+
    "\u2ba4\30\u215c\0\u012e\30\2\0\73\30\225\0\7\30\14\0\5\30\5\0"+
    "\1\30\1\31\12\30\1\0\15\30\1\0\5\30\1\0\1\30\1\0"+
    "\2\30\1\0\2\30\1\0\154\30\41\0\u016b\30\22\0\100\30\2\0"+
    "\66\30\50\0\15\30\3\0\20\31\20\0\4\31\17\0\2\30\30\0"+
    "\3\30\31\0\1\30\6\0\5\30\1\0\207\30\2\0\1\31\4\0"+
    "\1\30\13\0\12\31\7\0\32\30\4\0\1\30\1\0\32\30\12\0"+
    "\132\30\3\0\6\30\2\0\6\30\2\0\6\30\2\0\3\30\3\0"+
    "\2\30\3\0\2\30\22\0\3\31\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\1\4\4\2\1\1\1\5"+
    "\1\6\1\7\1\2\1\10\1\11\1\1\1\12\13\2"+
    "\1\13\1\14\1\15\2\2\1\16\1\17\1\20\1\21"+
    "\1\11\1\22\1\23\2\2\1\24\1\15\1\25\1\26"+
    "\1\27\2\30\1\31\1\32\2\33\2\2\2\3\2\0"+
    "\1\34\1\0\1\34\6\2\1\35\1\0\1\2\1\0"+
    "\1\36\1\0\3\37\1\0\3\12\16\2\1\40\4\2"+
    "\1\41\1\42\1\43\1\44\1\45\2\0\3\2\1\46"+
    "\2\47\1\50\2\47\2\50\5\47\1\50\3\47\1\0"+
    "\1\51\1\0\1\2\1\3\1\34\1\0\3\2\1\52"+
    "\1\2\1\53\1\54\3\37\2\0\1\12\1\0\10\2"+
    "\1\55\3\2\1\56\12\2\1\57\1\60\3\2\1\61"+
    "\1\62\1\0\1\63\1\0\1\63\11\0\1\64\1\65"+
    "\1\66\1\67\4\2\5\0\2\2\1\70\2\2\1\71"+
    "\1\72\1\2\1\73\2\2\1\74\11\2\1\75\3\2"+
    "\1\63\12\0\1\2\1\76\1\2\1\77\3\0\1\100"+
    "\1\101\1\0\2\2\1\102\1\103\1\2\1\104\4\2"+
    "\1\105\2\2\1\106\1\107\3\2\3\0\1\110\2\0"+
    "\3\2\4\0\3\2\1\111\1\112\1\2\1\113\2\2"+
    "\1\114\3\2\4\0\1\63\1\0\1\115\1\116\1\117"+
    "\2\0\6\2\1\120\1\2\1\121\10\0\2\2\1\122"+
    "\1\123\1\124\1\125\1\2\4\0\2\2\1\126\2\0"+
    "\1\127\1\0\1\127\1\2\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u0302"+
    "\0\u0302\0\u0302\0\u041a\0\u015e\0\u0460\0\u04a6\0\u04ec\0\u0532"+
    "\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762"+
    "\0\u07a8\0\u07ee\0\u0118\0\u0118\0\u0834\0\u087a\0\u08c0\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0906\0\u094c\0\u0992\0\u09d8"+
    "\0\u0118\0\u0a1e\0\u0118\0\u0118\0\u0118\0\u0118\0\u0a64\0\u0aaa"+
    "\0\u0af0\0\u0118\0\u0b36\0\u0b7c\0\u0bc2\0\u0118\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0118\0\u0d66\0\u0dac\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u015e\0\u03d4\0\u03d4\0\u0f0a\0\u0f50\0\u0f96"+
    "\0\u0fdc\0\u1022\0\u1068\0\u1022\0\u10ae\0\u10f4\0\u113a\0\u1180"+
    "\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0"+
    "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e\0\u015e\0\u1554\0\u159a"+
    "\0\u15e0\0\u1626\0\u0302\0\u0302\0\u0302\0\u0302\0\u0302\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u0302\0\u0118\0\u17ca\0\u1810"+
    "\0\u1856\0\u189c\0\u0118\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u0aaa\0\u1b58\0\u0118\0\u0302"+
    "\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88"+
    "\0\u1dce\0\u015e\0\u0118\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c"+
    "\0\u0118\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116"+
    "\0\u215c\0\u21a2\0\u015e\0\u21e8\0\u222e\0\u2274\0\u015e\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u0118\0\u0118\0\u2576\0\u25bc\0\u2602\0\u015e\0\u015e"+
    "\0\u17ca\0\u2648\0\u268e\0\u0118\0\u26d4\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u0118\0\u0118\0\u015e"+
    "\0\u015e\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\u1ea0\0\u2a62\0\u2aa8"+
    "\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u015e"+
    "\0\u015e\0\u2cd8\0\u015e\0\u2d1e\0\u2d64\0\u015e\0\u2daa\0\u2df0"+
    "\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u015e"+
    "\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a"+
    "\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u015e"+
    "\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552\0\u015e\0\u015e\0\u3598"+
    "\0\u35de\0\u3624\0\u015e\0\u015e\0\u366a\0\u015e\0\u36b0\0\u36f6"+
    "\0\u373c\0\u3782\0\u015e\0\u37c8\0\u380e\0\u015e\0\u015e\0\u3854"+
    "\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84"+
    "\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4"+
    "\0\u3cfa\0\u3d40\0\u015e\0\u015e\0\u3d86\0\u015e\0\u3dcc\0\u3e12"+
    "\0\u015e\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc"+
    "\0\u3ffc\0\u4042\0\u015e\0\u015e\0\u015e\0\u4088\0\u40ce\0\u4114"+
    "\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u015e\0\u42b8\0\u015e"+
    "\0\u42fe\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8"+
    "\0\u452e\0\u4574\0\u015e\0\u015e\0\u015e\0\u015e\0\u45ba\0\u4600"+
    "\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u015e\0\u47a4\0\u47ea"+
    "\0\u0118\0\u4830\0\u015e\0\u4876\0\u48bc\0\u4902\0\u4948";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\6\2\11\1\6\1\12"+
    "\1\6\1\13\2\14\1\6\1\15\1\16\1\17\1\14"+
    "\1\20\1\21\1\22\1\14\1\23\1\14\1\6\1\5"+
    "\1\24\1\25\2\6\1\26\1\27\1\30\1\31\1\32"+
    "\1\6\1\33\1\34\1\35\1\36\1\6\1\37\1\40"+
    "\1\41\1\6\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\14\1\50\1\51\1\52\1\53\3\25\1\54\2\6"+
    "\1\55\1\56\1\57\1\6\1\60\2\6\1\61\1\5"+
    "\1\6\1\7\1\10\1\6\2\11\1\6\1\12\1\6"+
    "\1\13\2\14\1\6\1\15\1\16\1\17\1\14\1\20"+
    "\1\21\1\22\1\14\1\23\1\14\1\6\1\5\1\24"+
    "\1\25\2\6\1\26\1\27\1\30\1\31\1\32\1\6"+
    "\1\33\1\34\1\35\1\36\1\6\1\37\1\40\1\41"+
    "\1\6\1\42\1\43\1\44\1\62\1\46\1\47\1\14"+
    "\1\50\1\63\1\64\1\65\3\25\1\54\2\6\1\55"+
    "\1\56\1\57\1\6\1\60\2\6\1\61\26\66\1\67"+
    "\4\66\1\70\34\66\3\70\1\71\12\66\62\72\1\73"+
    "\23\72\107\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\1\6\1\75\14\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\2\76\1\77\1\100\1\101\1\77\1\0"+
    "\1\102\2\103\2\0\3\104\67\0\2\76\1\11\1\0"+
    "\2\11\1\0\1\102\2\103\2\0\3\104\71\0\1\102"+
    "\1\0\2\102\100\0\1\6\1\105\1\6\1\106\3\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\14\0\2\14\4\0\7\14\30\0\4\14\23\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\1\6\1\107\4\6\1\110\3\6"+
    "\1\111\3\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\1\6\1\112\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\6\6\1\113\7\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\1\0\20\114"+
    "\1\115\4\114\1\116\5\114\1\0\3\114\1\0\30\114"+
    "\3\0\13\114\13\0\2\14\4\0\5\14\1\117\1\14"+
    "\30\0\4\14\55\0\1\25\34\0\4\25\12\0\1\120"+
    "\2\121\1\120\1\121\2\120\1\121\1\120\2\121\2\122"+
    "\3\121\1\120\4\122\1\123\1\122\1\124\1\121\1\120"+
    "\1\121\1\0\2\121\1\0\1\120\16\121\2\120\4\122"+
    "\4\120\1\0\3\120\2\121\2\120\5\121\1\120\25\125"+
    "\1\126\5\125\1\0\3\125\1\127\30\125\1\0\15\125"+
    "\1\0\1\6\1\130\5\6\1\0\2\6\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\1\6\1\131"+
    "\14\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\2\0\1\132"+
    "\1\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\3\6"+
    "\1\133\3\6\1\134\3\6\1\135\2\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\1\6"+
    "\1\136\2\0\3\6\10\0\2\6\1\74\1\0\1\137"+
    "\1\6\2\0\16\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\1\6\1\140\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\1\141\1\6\2\0\16\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\2\0\1\142\1\6"+
    "\2\0\2\6\1\143\2\6\2\0\7\6\1\0\1\6"+
    "\1\144\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\1\6\1\145\14\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\1\6\1\146\1\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\11\6\1\147\4\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\12\6\1\150\3\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\3\6\1\151\6\6"+
    "\1\152\3\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\14\0\2\14\4\0\7\14\30\0\1\14\1\153\2\14"+
    "\35\0\2\14\4\0\2\14\1\154\4\14\30\0\4\14"+
    "\35\0\1\14\1\155\4\0\2\14\1\156\4\14\30\0"+
    "\3\14\1\157\104\0\1\160\105\0\1\161\24\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\1\6\1\162\5\6\1\163\6\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\1\6\1\164\14\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\14\0\2\14\4\0\7\14\30\0\1\14"+
    "\1\165\2\14\50\0\1\117\57\0\3\166\1\167\1\166"+
    "\2\167\1\166\1\170\1\166\1\171\3\166\1\172\3\166"+
    "\2\173\6\166\1\174\1\70\4\166\1\175\6\166\1\176"+
    "\1\166\1\177\1\166\1\200\1\166\1\201\2\173\1\202"+
    "\1\203\1\204\1\166\4\173\4\205\12\166\62\0\1\206"+
    "\24\0\2\207\1\0\1\207\2\0\1\207\1\0\2\207"+
    "\2\0\3\207\10\0\1\207\1\0\1\207\1\0\2\207"+
    "\2\0\16\207\16\0\2\207\2\0\5\207\2\0\7\6"+
    "\1\0\2\6\2\14\3\6\1\0\6\14\1\210\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\2\0\4\14\5\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\1\6"+
    "\1\211\3\6\2\0\2\76\1\77\1\0\1\101\1\77"+
    "\1\0\1\102\2\103\2\0\3\104\71\0\1\212\1\0"+
    "\3\212\1\0\2\212\2\0\3\212\15\0\1\212\2\0"+
    "\2\212\32\0\1\212\14\0\1\101\1\0\2\101\1\0"+
    "\1\102\2\103\2\0\3\104\71\0\1\102\1\0\2\102"+
    "\2\0\2\103\2\0\3\104\71\0\1\213\1\0\2\213"+
    "\4\0\2\214\72\0\7\6\1\0\2\6\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\4\6\1\215"+
    "\11\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\2\6\1\216\13\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\1\6\1\217\5\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\7\6\1\220\6\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\5\6\1\221\10\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\1\6\1\222\1\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\1\0\20\114\1\115\4\114\1\116\5\114\1\0\34\114"+
    "\1\0\15\114\33\117\1\0\34\117\1\0\15\117\25\0"+
    "\1\223\10\0\1\223\50\0\7\224\1\0\2\224\2\0"+
    "\3\224\5\0\1\223\2\0\2\224\1\225\1\0\2\224"+
    "\1\223\1\0\16\224\13\0\1\224\2\0\2\224\2\0"+
    "\5\224\14\0\2\226\4\0\7\226\6\0\1\223\21\0"+
    "\4\226\22\0\3\120\1\227\2\120\1\227\4\120\2\122"+
    "\4\120\7\122\3\120\1\0\1\230\23\120\4\122\4\120"+
    "\1\0\15\120\25\125\1\126\5\125\1\0\3\125\1\231"+
    "\30\125\1\0\50\125\1\0\34\125\1\0\15\125\37\0"+
    "\1\232\47\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\1\6\1\233\14\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\2\6\1\234\1\6\1\235\11\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\4\6\1\236\11\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\7\6\1\237"+
    "\2\6\1\240\3\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\1\241\1\6\2\0\1\6\1\242"+
    "\11\6\1\243\2\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\2\0\2\6\2\0\1\244\4\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\1\6\1\245\14\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\2\0\2\6\2\0\1\246\4\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\15\6\1\247\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\2\0\1\6\1\250\5\6\1\0\2\6"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\2\0\1\6"+
    "\1\251\2\0\5\6\2\0\7\6\1\0\1\6\1\252"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\2\6\1\253\11\6\1\254\1\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\2\6\1\255\13\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\2\0\2\6\2\0\1\256\4\6\2\0"+
    "\7\6\1\0\1\6\1\257\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\12\6"+
    "\1\260\3\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\2\6\1\261\13\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\2\262\1\0"+
    "\1\262\2\0\1\262\1\0\2\262\2\0\3\262\10\0"+
    "\1\262\1\0\1\262\1\0\2\262\2\0\16\262\16\0"+
    "\2\262\2\0\5\262\2\0\2\263\1\0\1\263\2\0"+
    "\1\263\1\0\2\263\2\0\3\263\10\0\1\263\1\0"+
    "\1\263\1\0\2\263\2\0\16\263\16\0\2\263\2\0"+
    "\5\263\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\1\264\15\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\6\6\1\265\3\6\1\266\3\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\1\6\1\267\5\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\7\6\1\270\6\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\4\0\1\271\1\0\2\271\1\0"+
    "\1\272\2\273\2\0\3\274\71\0\1\272\1\0\2\272"+
    "\101\0\1\275\1\0\1\276\147\0\1\277\3\0\1\300"+
    "\34\0\7\274\1\0\2\274\2\0\3\274\10\0\3\274"+
    "\1\0\2\274\2\0\16\274\13\0\1\274\2\0\2\274"+
    "\2\0\5\274\42\0\1\301\56\0\1\302\134\0\1\303"+
    "\116\0\1\304\105\0\1\305\114\0\1\173\47\0\1\173"+
    "\63\0\2\306\1\0\1\306\2\0\1\306\1\0\2\306"+
    "\1\0\1\173\3\306\3\0\1\173\4\0\1\306\1\0"+
    "\1\306\1\0\2\306\2\0\16\306\5\0\1\173\10\0"+
    "\2\306\2\0\5\306\2\0\2\307\1\0\1\307\2\0"+
    "\1\307\1\0\2\307\2\0\3\307\10\0\1\307\1\0"+
    "\1\307\1\0\2\307\2\0\16\307\16\0\2\307\2\0"+
    "\5\307\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\13\6\1\310\2\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\2\76"+
    "\1\212\1\0\3\212\1\0\2\212\2\0\3\212\15\0"+
    "\1\212\2\0\2\212\32\0\1\212\14\0\1\213\1\0"+
    "\2\213\6\0\3\104\71\0\1\213\1\0\2\213\100\0"+
    "\7\6\1\0\1\6\1\311\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\1\6\1\312"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\4\6\1\313\11\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\10\6\1\314\5\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\1\6\1\315\14\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\224"+
    "\1\0\2\224\2\0\3\224\10\0\2\224\1\225\1\0"+
    "\2\224\2\0\16\224\13\0\1\224\2\0\2\224\2\0"+
    "\5\224\2\0\7\224\1\0\2\224\2\226\3\224\1\0"+
    "\6\226\1\316\2\224\1\225\1\0\2\224\2\0\16\224"+
    "\2\0\4\226\5\0\1\224\2\0\2\224\2\0\5\224"+
    "\14\0\2\226\4\0\7\226\30\0\4\226\25\0\1\317"+
    "\2\0\1\317\16\0\1\223\10\0\1\223\52\0\1\320"+
    "\1\0\3\321\1\0\2\321\2\0\3\321\5\0\1\223"+
    "\7\0\1\321\1\223\1\0\2\321\32\0\1\321\11\0"+
    "\37\232\1\322\46\232\1\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\4\6"+
    "\1\323\11\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\1\324\15\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\1\6"+
    "\1\325\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\2\6\1\326\13\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\6\6\1\327\7\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\4\6\1\330"+
    "\11\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\1\6\1\331\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\12\6"+
    "\1\332\3\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\1\6\1\333\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\1\6\1\334\5\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\1\6\1\335\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\16\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\1\6\1\336"+
    "\5\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\2\0\7\6\1\0\1\6\1\337\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\7\6\1\340\6\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\1\341\1\6\2\0"+
    "\16\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\1\342\1\6\2\0\16\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\1\343"+
    "\15\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\1\6\1\344\5\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\6\6\1\345\7\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\1\6"+
    "\1\346\5\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\1\6\1\347\5\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\3\6\1\350\12\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\3\6"+
    "\1\351\1\6\2\0\7\6\1\0\2\6\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\2\6\1\352"+
    "\13\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\2\0\2\6"+
    "\2\0\2\6\1\353\2\6\4\0\1\272\1\0\2\272"+
    "\2\0\2\273\2\0\3\274\71\0\1\354\1\0\2\354"+
    "\4\0\2\355\135\0\1\356\103\0\1\357\112\0\1\360"+
    "\103\0\1\361\102\0\1\362\1\0\1\363\115\0\1\364"+
    "\73\0\1\362\55\0\1\365\135\0\1\366\44\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\5\6\1\367\10\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\1\6\1\370"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\6\6\1\371\7\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\1\6\1\372\5\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\4\0\1\120\2\0\1\120\16\0\1\223\10\0"+
    "\1\223\52\0\1\373\1\0\3\374\1\0\2\374\2\0"+
    "\3\374\15\0\1\374\2\0\2\374\32\0\1\374\14\0"+
    "\1\374\1\0\3\374\1\0\2\374\2\0\3\374\15\0"+
    "\1\374\2\0\2\374\32\0\1\374\11\0\37\232\1\375"+
    "\46\232\1\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\4\6\1\376\11\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\3\6\1\377\12\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\u0100\2\6\2\0\16\6"+
    "\12\0\1\u0100\1\u0101\2\u0100\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\7\6\1\u0102\6\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\15\6\1\u0103\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\2\6\1\u0104\13\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\1\6\1\u0105\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\7\6\1\u0106\6\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\1\u0107\15\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\7\6\1\u0108"+
    "\6\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\7\6\1\u0109\6\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\12\6\1\u010a\3\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\3\6\1\u010b\12\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\12\6\1\u010c\3\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\7\6"+
    "\1\u010d\6\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\2\6\1\u010e\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\1\6"+
    "\1\u010f\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\1\6\1\u0110\14\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\1\6\1\u0111\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\1\6\1\u0112\14\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\4\0\1\354"+
    "\1\0\2\354\6\0\3\274\71\0\1\354\1\0\2\354"+
    "\111\0\1\174\105\0\1\u0113\143\0\1\u0114\76\0\1\u0115"+
    "\104\0\1\366\57\0\1\u0116\127\0\1\u0117\53\0\1\u0118"+
    "\146\0\1\174\43\0\7\6\1\0\2\6\2\0\2\6"+
    "\1\u0119\10\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\11\6\1\u011a\4\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\1\6\1\u011b\5\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\4\0\1\u011c\1\0\3\u011d\1\0\2\u011d\2\0\3\u011d"+
    "\15\0\1\u011d\2\0\2\u011d\32\0\1\u011d\14\0\1\u011d"+
    "\1\0\3\u011d\1\0\2\u011d\2\0\3\u011d\15\0\1\u011d"+
    "\2\0\2\u011d\32\0\1\u011d\11\0\37\232\1\231\46\232"+
    "\33\0\1\u0100\4\0\1\u011e\5\0\1\u011f\21\0\4\u0100"+
    "\13\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\u0100\2\6\2\0\1\u0120\5\6\1\u0121\7\6"+
    "\12\0\1\u0100\1\u0101\2\u0100\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\1\6\1\u0122\14\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\2\6\1\u0123\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\2\6\1\u0124\13\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\12\6\1\u0125\3\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\2\0\7\6\1\0\2\6\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\5\6\1\u0126"+
    "\10\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\7\6\1\u0127\6\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\1\u0128\15\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\2\6\1\u0129\13\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\4\6"+
    "\1\u012a\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\1\u012b\15\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\2\6\1\u012c\13\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\46\0\1\u012d\106\0\1\u012e\41\0\1\u012f"+
    "\104\0\7\274\1\0\2\274\2\0\3\274\10\0\3\274"+
    "\1\u0130\2\274\2\0\16\274\12\0\1\u0130\1\u0131\2\u0130"+
    "\2\274\2\0\5\274\53\0\1\u0132\52\0\1\174\67\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\4\6\1\u0133\11\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\1\6"+
    "\1\u0134\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\13\6\1\u0135\2\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\4\0\1\120\1\0"+
    "\3\120\1\0\2\120\2\0\3\120\20\0\2\120\32\0"+
    "\1\120\14\0\1\120\1\0\3\120\1\0\2\120\2\0"+
    "\3\120\15\0\1\120\2\0\2\120\32\0\1\120\13\0"+
    "\1\u0136\177\0\1\u0137\12\0\1\6\1\u0138\5\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\2\0"+
    "\1\u0139\1\6\2\0\5\6\2\0\7\6\1\0\2\6"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\1\u013a\15\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\2\6\1\u013b\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\16\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\1\6"+
    "\1\u013c\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\12\6\1\u013d\3\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\1\6\1\u013e\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\16\6\13\0\1\6\2\0\2\6\2\0"+
    "\5\6\2\0\7\6\1\0\2\6\2\0\3\6\10\0"+
    "\2\6\1\74\1\0\2\6\2\0\2\6\1\u013f\13\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\2\0\7\6"+
    "\1\0\1\6\1\u0140\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\16\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\20\0\1\u0141\137\0\1\u0142\36\0\1\u0143"+
    "\136\0\1\u0130\4\0\1\u0144\5\0\1\u0145\21\0\4\u0130"+
    "\61\0\1\u0146\77\0\1\u0147\141\0\1\u0148\11\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\1\6\1\u0149\14\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\2\0\1\6\1\u014a\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\3\6\10\0\2\6\1\74"+
    "\1\0\2\6\2\0\2\6\1\u014b\13\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\2\0\7\6\1\0\1\6"+
    "\1\u014c\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\16\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\4\6\1\u014d\11\6\13\0"+
    "\1\6\2\0\2\6\2\0\5\6\2\0\7\6\1\0"+
    "\2\6\2\0\3\6\10\0\2\6\1\74\1\0\2\6"+
    "\2\0\2\6\1\u014e\13\6\13\0\1\6\2\0\2\6"+
    "\2\0\5\6\2\0\7\6\1\0\1\6\1\u014f\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\16\6"+
    "\13\0\1\6\2\0\2\6\2\0\5\6\45\0\1\174"+
    "\53\0\1\173\146\0\1\174\34\0\1\u0150\177\0\1\u0151"+
    "\23\0\1\u0141\137\0\1\u0152\53\0\1\u0153\74\0\7\6"+
    "\1\0\2\6\2\0\3\6\10\0\2\6\1\74\1\0"+
    "\2\6\2\0\4\6\1\u0154\11\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\2\0\7\6\1\0\1\6\1\u0155"+
    "\2\0\3\6\10\0\2\6\1\74\1\0\2\6\2\0"+
    "\16\6\13\0\1\6\2\0\2\6\2\0\5\6\2\0"+
    "\7\6\1\0\2\6\2\0\2\6\1\u0156\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\16\6\13\0\1\6\2\0"+
    "\2\6\2\0\5\6\42\0\1\u0157\141\0\1\u0158\54\0"+
    "\1\u0159\101\0\1\u015a\46\0\7\6\1\0\2\6\2\0"+
    "\3\6\10\0\2\6\1\74\1\0\2\6\2\0\4\6"+
    "\1\u015b\11\6\13\0\1\6\2\0\2\6\2\0\5\6"+
    "\2\0\7\6\1\0\2\6\2\0\3\6\10\0\2\6"+
    "\1\74\1\0\2\6\2\0\1\u015c\15\6\13\0\1\6"+
    "\2\0\2\6\2\0\5\6\45\0\1\u015d\53\0\1\u015e"+
    "\135\0\1\u0159\44\0\7\6\1\0\2\6\2\0\3\6"+
    "\10\0\2\6\1\74\1\0\2\6\2\0\2\6\1\u015b"+
    "\13\6\13\0\1\6\2\0\2\6\2\0\5\6\45\0"+
    "\1\274\101\0\1\u015f\107\0\1\274\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18830];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\35\1\2\11\3\1\5\11\4\1\1\11"+
    "\1\1\4\11\1\1\1\3\1\1\1\11\3\1\1\11"+
    "\1\1\2\0\1\1\1\0\1\11\7\1\1\0\1\1"+
    "\1\0\1\1\1\0\3\1\1\0\33\1\2\0\4\1"+
    "\1\11\1\1\1\5\2\1\1\15\1\5\5\1\1\5"+
    "\2\1\1\3\1\0\1\11\1\0\3\1\1\0\6\1"+
    "\1\11\3\1\2\0\1\11\1\0\27\1\2\11\5\1"+
    "\1\0\1\5\1\0\1\15\11\0\2\11\6\1\5\0"+
    "\2\1\1\3\26\1\1\5\12\0\4\1\3\0\2\1"+
    "\1\0\22\1\3\0\1\1\2\0\3\1\4\0\15\1"+
    "\4\0\1\5\1\0\3\1\2\0\11\1\10\0\7\1"+
    "\4\0\3\1\2\0\1\15\1\0\1\5\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Stack for braces
    private Stack <IElementType> braceStack = new Stack<IElementType>();

    /* Defines, is in this section new line is whitespace or not? */
    private boolean newLineAllowed(){
      if (braceStack.isEmpty()){
        return true;
      } else {
        return ScalaTokenTypes.tLBRACE.equals(braceStack.peek());
      }
    }

    private static boolean endsByWhiteSpace(String s) {
      return s != null && (s.endsWith(" ") || s.endsWith("\t") || s.endsWith("\f"));
    }

    /* Changes state depending on brace stack */
    private void changeState(){
      if (braceStack.isEmpty()) {
        yybegin(YYINITIAL);
      } else if ( tLPARENTHESIS.equals(braceStack.peek()) || tLSQBRACKET.equals(braceStack.peek()) ){
        yybegin(NEW_LINE_DEPRECATED);
      } else {
        yybegin(NEW_LINE_ALLOWED);
      }
    }

    /* removes brace from stack */
    private IElementType popBraceStack(IElementType elem){
     if (
          !braceStack.isEmpty() &&
          (
            (elem.equals(tRSQBRACKET) && tLSQBRACKET.equals(braceStack.peek())) ||
            (elem.equals(tRBRACE) && tLBRACE.equals(braceStack.peek())) ||
            (elem.equals(tRPARENTHESIS) && tLPARENTHESIS.equals(braceStack.peek()))
          )
        ) {
          braceStack.pop();
          return process(elem);
        } else if (elem.equals(tFUNTYPE)) {
          if (!braceStack.isEmpty() && kCASE.equals(braceStack.peek())) {
            braceStack.pop();
          }
          return process(elem);
        } else {
          return process(elem);
        }
    }

    private IElementType process(IElementType type){
        return type;
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1792) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { return process(kCATCH);
          }
        case 88: break;
        case 67: 
          { return process(kTRAIT);
          }
        case 89: break;
        case 41: 
          { changeState();
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 90: break;
        case 31: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSYMBOL);
          }
        case 91: break;
        case 86: 
          { return process(kPROTECTED);
          }
        case 92: break;
        case 34: 
          { return process(tLOWER_BOUND);
          }
        case 93: break;
        case 30: 
          { return process(tLINE_COMMENT);
          }
        case 94: break;
        case 6: 
          { return process(tCOLON);
          }
        case 95: break;
        case 77: 
          { return process(kEXTENDS);
          }
        case 96: break;
        case 50: 
          { return process(kVAR);
          }
        case 97: break;
        case 2: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tIDENTIFIER);
          }
        case 98: break;
        case 24: 
          { yypushback(yylength());
                                                    changeState();
          }
        case 99: break;
        case 12: 
          { return process(tSEMICOLON);
          }
        case 100: break;
        case 53: 
          { yybegin(WAIT_FOR_XML);
                                                   yypushback(2);
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 101: break;
        case 15: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRPARENTHESIS);
          }
        case 102: break;
        case 74: 
          { return process(kOBJECT);
          }
        case 103: break;
        case 38: 
          { return popBraceStack(tFUNTYPE);
          }
        case 104: break;
        case 1: 
          { return process(tSTUB);
          }
        case 105: break;
        case 61: 
          { return process(kWITH);
          }
        case 106: break;
        case 36: 
          { return process(tUPPER_BOUND);
          }
        case 107: break;
        case 4: 
          { return process(tDOT);
          }
        case 108: break;
        case 69: 
          { return process(kMATCH);
          }
        case 109: break;
        case 11: 
          { return process(tCOMMA);
          }
        case 110: break;
        case 21: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRPARENTHESIS);
          }
        case 111: break;
        case 23: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRBRACE);
          }
        case 112: break;
        case 39: 
          { yypushback(1);
                                                    changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 113: break;
        case 66: 
          { return process(kTHROW);
          }
        case 114: break;
        case 40: 
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 115: break;
        case 49: 
          { return process(kVAL);
          }
        case 116: break;
        case 81: 
          { return process(kPRIVATE);
          }
        case 117: break;
        case 62: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kFALSE);
          }
        case 118: break;
        case 79: 
          { return process(kFINALLY);
          }
        case 119: break;
        case 78: 
          { return process(kFOR_SOME);
          }
        case 120: break;
        case 59: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTYPE);
          }
        case 121: break;
        case 26: 
          { return process(tWHITE_SPACE_IN_LINE);
          }
        case 122: break;
        case 27: 
          { changeState();
                                            yypushback(yytext().length());
          }
        case 123: break;
        case 73: 
          { return process(kSEALED);
          }
        case 124: break;
        case 64: 
          { return process(kCLASS);
          }
        case 125: break;
        case 75: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kRETURN);
          }
        case 126: break;
        case 83: 
          { return process(kOVERRIDE);
          }
        case 127: break;
        case 80: 
          { return process(kPACKAGE);
          }
        case 128: break;
        case 48: 
          { braceStack.push(tLPARENTHESIS);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLPARENTHESIS);
          }
        case 129: break;
        case 29: 
          { return process(kDO);
          }
        case 130: break;
        case 42: 
          { return process(kFOR);
          }
        case 131: break;
        case 10: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSTRING);
          }
        case 132: break;
        case 17: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRBRACE);
          }
        case 133: break;
        case 35: 
          { return process(tCHOOSE);
          }
        case 134: break;
        case 16: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRSQBRACKET);
          }
        case 135: break;
        case 70: 
          { return process(kYIELD);
          }
        case 136: break;
        case 7: 
          { return process(tAT);
          }
        case 137: break;
        case 44: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tCHAR);
          }
        case 138: break;
        case 8: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tUNDER);
          }
        case 139: break;
        case 46: 
          { return process(kNEW);
          }
        case 140: break;
        case 84: 
          { return process(kREQUIRES);
          }
        case 141: break;
        case 14: 
          { braceStack.push(tLSQBRACKET);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLSQBRACKET);
          }
        case 142: break;
        case 3: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tINTEGER);
          }
        case 143: break;
        case 37: 
          { return process(tVIEW);
          }
        case 144: break;
        case 28: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tFLOAT);
          }
        case 145: break;
        case 85: 
          { return process(kIMPLICIT);
          }
        case 146: break;
        case 19: 
          { braceStack.push(tLPARENTHESIS);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLPARENTHESIS);
          }
        case 147: break;
        case 63: 
          { return process(kFINAL);
          }
        case 148: break;
        case 45: 
          { return process(kTRY);
          }
        case 149: break;
        case 5: 
          { return process(tINNER_CLASS);
          }
        case 150: break;
        case 54: 
          { return process(kLAZY);
          }
        case 151: break;
        case 68: 
          { return process(kSUPER);
          }
        case 152: break;
        case 87: 
          { return process(kCASE);
          }
        case 153: break;
        case 51: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 154: break;
        case 72: 
          { yypushback(4);
                                                   changeState();
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 155: break;
        case 13: 
          { return process(tASSIGN);
          }
        case 156: break;
        case 58: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTRUE);
          }
        case 157: break;
        case 20: 
          { return process(tFUNTYPE_ASCII);
          }
        case 158: break;
        case 76: 
          { return process(kIMPORT);
          }
        case 159: break;
        case 82: 
          { return process(kABSTRACT);
          }
        case 160: break;
        case 25: 
          { changeState();
                                                    return process(tLINE_TERMINATOR);
          }
        case 161: break;
        case 47: 
          { braceStack.push(tLBRACE);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLBRACE);
          }
        case 162: break;
        case 32: 
          { return process(kIF);
          }
        case 163: break;
        case 56: 
          { braceStack.push(kCASE);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(kCASE);
          }
        case 164: break;
        case 57: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTHIS);
          }
        case 165: break;
        case 9: 
          { yybegin(WAIT_FOR_XML);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 166: break;
        case 22: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRSQBRACKET);
          }
        case 167: break;
        case 18: 
          { braceStack.push(tLBRACE);
                                            yybegin(NEW_LINE_ALLOWED);
                                            return process(tLBRACE);
          }
        case 168: break;
        case 60: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kNULL);
          }
        case 169: break;
        case 33: 
          { return process(tFUNTYPE);
          }
        case 170: break;
        case 71: 
          { return process(kWHILE);
          }
        case 171: break;
        case 43: 
          { return process(kDEF);
          }
        case 172: break;
        case 52: 
          { yybegin(WAIT_FOR_XML);
                                                    yypushback(2);
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 173: break;
        case 55: 
          { return process(kELSE);
          }
        case 174: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
