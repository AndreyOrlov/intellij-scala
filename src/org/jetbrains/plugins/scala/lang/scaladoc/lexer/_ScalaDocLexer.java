/* The following code was generated by JFlex 1.4.3 on 11/12/11 10:53 AM */

/*
 * Copyright 2000-2008 JetBrains s.r.o.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.plugins.scala.lang.scaladoc.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.jetbrains.plugins.scala.lang.scaladoc.lexer.docsyntax.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/12/11 10:53 AM from the specification file
 * <tt>../../scaladoc/lexer/scaladoc.flex</tt>
 */
public class _ScalaDocLexer implements FlexLexer, ScalaDocTokenType {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INLINE_TAG_DOC_SPACE = 20;
  public static final int COMMENT_INNER_CODE = 28;
  public static final int INLINE_TAG_NAME = 16;
  public static final int PARAM_TAG_SPACE = 8;
  public static final int INNER_CODE_WHITESPACE = 30;
  public static final int COMMENT_DATA = 4;
  public static final int DOC_TAG_VALUE = 10;
  public static final int COMMENT_DATA_START = 2;
  public static final int HTTP_LINK_INNER = 26;
  public static final int CODE_LINK_INNER = 22;
  public static final int TAG_DOC_SPACE = 6;
  public static final int YYINITIAL = 0;
  public static final int DOC_TAG_VALUE_IN_PAREN = 12;
  public static final int CODE_BAD_LINK = 24;
  public static final int DOC_TAG_VALUE_IN_LTGT = 14;
  public static final int INLINE_DOC_TAG_VALUE = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  4,  4, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11,  4,  4, 12, 12,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\20\1\2\1\1\1\0\1\2\1\1\16\20\4\0\1\34\1\6"+
    "\1\17\1\7\1\4\2\6\1\23\1\36\1\37\1\10\1\6\1\24"+
    "\1\11\1\5\1\15\10\3\2\3\1\13\1\0\1\6\1\27\1\6"+
    "\1\6\1\40\32\4\1\25\1\14\1\35\1\12\1\21\1\22\7\4"+
    "\1\31\7\4\1\33\3\4\1\32\6\4\1\26\1\6\1\30\1\6"+
    "\6\20\1\16\32\20\2\0\4\4\2\6\1\0\1\6\1\4\1\0"+
    "\1\6\1\20\1\6\1\0\1\6\1\6\3\0\1\4\1\6\3\0"+
    "\1\4\5\0\27\4\1\6\37\4\1\6\u013f\4\31\0\162\4\4\0"+
    "\14\4\16\0\5\4\11\0\1\4\21\0\130\20\5\0\23\20\12\0"+
    "\1\4\13\0\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0"+
    "\54\4\1\0\46\4\1\6\5\4\4\0\202\4\1\6\4\20\3\0"+
    "\105\4\1\0\46\4\2\0\2\4\6\0\20\4\41\0\46\4\2\0"+
    "\1\4\7\0\47\4\11\0\21\20\1\0\27\20\1\0\3\20\1\0"+
    "\1\20\1\0\2\20\1\0\1\20\13\0\33\4\5\0\3\4\15\0"+
    "\4\20\12\0\2\6\6\20\13\0\32\4\5\0\13\4\16\20\7\0"+
    "\12\20\4\0\2\4\1\20\143\4\1\0\1\4\10\20\1\0\6\20"+
    "\2\4\2\20\1\6\4\20\2\4\12\20\3\4\2\6\1\4\17\0"+
    "\1\20\1\4\1\20\36\4\33\20\2\0\3\4\60\0\46\4\13\20"+
    "\1\4\u014f\0\3\20\66\4\2\0\1\20\1\4\20\20\2\0\1\4"+
    "\4\20\3\0\12\4\2\20\2\0\12\20\21\0\3\20\1\0\10\4"+
    "\2\0\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4"+
    "\2\0\1\20\1\4\7\20\2\0\2\20\2\0\3\20\11\0\1\20"+
    "\4\0\2\4\1\0\3\4\2\20\2\0\12\20\4\4\6\0\1\6"+
    "\6\0\3\20\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\20\1\0\5\20"+
    "\4\0\2\20\2\0\3\20\13\0\4\4\1\0\1\4\7\0\14\20"+
    "\3\4\14\0\3\20\1\0\11\4\1\0\3\4\1\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\2\0\1\20\1\4\10\20\1\0"+
    "\3\20\1\0\3\20\2\0\1\4\17\0\2\4\2\20\2\0\12\20"+
    "\1\0\1\4\17\0\3\20\1\0\10\4\2\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\5\4\2\0\1\20\1\4\6\20"+
    "\3\0\2\20\2\0\3\20\10\0\2\20\4\0\2\4\1\0\3\4"+
    "\4\0\12\20\1\6\1\4\20\0\1\20\1\4\1\0\6\4\3\0"+
    "\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0"+
    "\2\4\3\0\3\4\3\0\10\4\1\0\3\4\4\0\5\20\3\0"+
    "\3\20\1\0\4\20\11\0\1\20\17\0\11\20\3\0\6\6\1\4"+
    "\1\6\6\0\3\20\1\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\12\4\1\0\5\4\4\0\7\20\1\0\3\20\1\0\4\20\7\0"+
    "\2\20\11\0\2\4\4\0\12\20\22\0\2\20\1\0\10\4\1\0"+
    "\3\4\1\0\27\4\1\0\12\4\1\0\5\4\2\0\1\20\1\4"+
    "\7\20\1\0\3\20\1\0\4\20\7\0\2\20\7\0\1\4\1\0"+
    "\2\4\4\0\12\20\22\0\2\20\1\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\20\4\4\0\6\20\2\0\3\20\1\0\4\20\11\0"+
    "\1\20\10\0\2\4\4\0\12\20\22\0\2\20\1\0\22\4\3\0"+
    "\30\4\1\0\11\4\1\0\1\4\2\0\7\4\3\0\1\20\4\0"+
    "\6\20\1\0\1\20\1\0\10\20\22\0\2\20\15\0\60\4\1\20"+
    "\2\4\7\20\4\0\10\4\10\20\1\0\12\20\47\0\2\4\1\0"+
    "\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0"+
    "\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0"+
    "\4\4\1\20\2\4\6\20\1\0\2\20\1\4\2\0\5\4\1\0"+
    "\1\4\1\0\6\20\2\0\12\20\2\0\2\4\42\0\1\4\3\6"+
    "\17\0\5\6\2\20\6\6\12\20\12\0\1\6\1\20\1\6\1\20"+
    "\1\6\1\20\4\0\2\20\10\4\1\0\42\4\6\0\24\20\1\0"+
    "\2\20\4\4\4\0\10\20\1\0\44\20\1\0\10\6\1\20\6\6"+
    "\2\0\1\6\60\0\42\4\1\0\5\4\1\0\2\4\1\0\7\20"+
    "\3\0\4\20\6\0\12\20\6\0\6\4\4\20\106\0\46\4\12\0"+
    "\51\4\7\0\132\4\5\0\104\4\5\0\122\4\6\0\7\4\1\0"+
    "\77\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0"+
    "\4\4\2\0\47\4\1\0\1\4\1\0\4\4\2\0\37\4\1\0"+
    "\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\7\4\1\0\7\4\1\0\27\4\1\0\37\4\1\0\1\4\1\0"+
    "\4\4\2\0\7\4\1\0\47\4\1\0\23\4\16\0\11\20\56\0"+
    "\125\4\14\0\u026c\4\2\0\10\4\12\0\32\4\5\0\113\4\3\0"+
    "\3\4\17\0\15\4\1\0\4\4\3\20\13\0\22\4\3\20\13\0"+
    "\22\4\2\20\14\0\15\4\1\0\3\4\1\0\2\20\14\0\64\4"+
    "\40\20\3\0\1\4\3\0\2\4\1\20\2\0\12\20\41\0\3\20"+
    "\2\0\12\20\6\0\130\4\10\0\51\4\1\20\126\0\35\4\3\0"+
    "\14\20\4\0\14\20\4\0\1\6\5\0\12\20\36\4\2\0\5\4"+
    "\153\0\40\6\u0300\0\154\4\224\0\234\4\4\0\132\4\6\0\26\4"+
    "\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0\7\4"+
    "\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0\6\4"+
    "\4\0\15\4\5\0\3\4\1\0\7\4\17\0\4\20\30\0\1\17"+
    "\1\17\5\20\20\0\2\4\3\0\1\6\15\0\1\6\1\0\1\4"+
    "\13\0\4\20\6\0\6\20\1\0\1\4\10\0\3\6\2\0\1\4"+
    "\12\0\3\6\23\0\22\4\36\0\15\20\4\0\1\20\3\0\6\20"+
    "\25\0\2\6\1\4\4\6\1\4\2\6\12\4\1\6\1\4\3\6"+
    "\5\4\6\6\1\4\1\6\1\4\1\6\1\4\1\6\4\4\1\6"+
    "\3\4\1\6\7\4\2\6\1\0\3\4\5\6\5\4\1\6\1\6"+
    "\24\0\44\4\14\0\5\6\5\6\2\6\4\6\1\6\2\6\1\6"+
    "\2\6\1\6\7\6\1\6\37\6\2\6\2\6\1\6\1\6\1\6"+
    "\37\6\u010c\6\10\6\4\6\24\6\2\6\7\6\2\0\121\6\1\6"+
    "\36\6\31\6\3\0\32\6\57\0\47\6\31\0\13\6\121\0\116\6"+
    "\26\0\267\6\1\6\11\6\1\6\66\6\10\6\30\6\1\0\126\6"+
    "\1\6\16\6\2\0\22\6\16\0\2\6\137\0\4\6\1\0\4\6"+
    "\2\0\34\6\1\0\43\6\1\0\1\6\1\0\4\6\3\0\1\6"+
    "\1\0\7\6\2\0\7\6\54\0\1\6\3\0\30\6\1\0\16\6"+
    "\21\0\26\6\12\0\20\6\u0100\6\203\6\26\0\77\6\4\0\40\6"+
    "\2\0\u0102\6\16\6\u0372\0\32\6\1\0\131\6\14\0\326\6\32\0"+
    "\14\6\10\0\1\6\3\4\12\0\2\6\14\0\1\6\11\4\6\20"+
    "\1\0\5\4\2\6\5\4\1\0\2\6\1\0\126\4\2\0\2\20"+
    "\2\0\3\4\1\0\137\4\5\0\50\4\4\0\136\4\1\0\2\6"+
    "\4\0\12\6\30\4\70\0\20\4\37\6\13\0\32\6\14\0\1\6"+
    "\17\0\36\6\1\0\1\6\12\0\47\6\17\0\77\6\1\0\u0100\6"+
    "\u19b6\4\12\0\100\6\u51a6\4\132\0\u048d\4\3\0\67\6\u0739\0\u2ba4\4"+
    "\u215c\0\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4\5\0\1\4"+
    "\1\20\12\4\1\6\15\4\1\0\5\4\1\0\1\4\1\0\2\4"+
    "\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4"+
    "\50\0\15\4\1\6\2\0\20\20\20\0\4\20\17\0\2\4\30\0"+
    "\3\4\22\0\1\6\1\0\3\6\2\0\1\4\6\0\5\4\1\0"+
    "\207\4\2\0\1\20\4\0\1\4\6\0\1\6\4\0\12\20\2\0"+
    "\3\6\2\0\32\4\4\0\1\4\1\0\32\4\1\0\1\6\1\0"+
    "\1\6\6\0\132\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0"+
    "\3\4\3\0\2\4\1\6\1\0\1\6\2\4\1\0\1\6\4\6"+
    "\2\6\12\0\3\20\2\6\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\3\1\1\2\1\3\1\2\1\4\1\2\1\5"+
    "\3\2\1\6\1\7\1\2\1\10\1\2\1\11\1\1"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\1\1\13"+
    "\1\20\1\21\5\1\3\22\1\0\1\23\1\0\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\31\1\0\1\32"+
    "\4\0\1\33\2\0\1\23\2\0\1\34\1\35\1\0"+
    "\1\36\1\37\1\40\1\0\1\41\4\0\1\33\2\0"+
    "\1\40\1\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\u01ef"+
    "\0\u01ad\0\u0210\0\u01ce\0\u01ad\0\u0231\0\u01ad\0\u0252\0\u0273"+
    "\0\u0294\0\u02b5\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a\0\u0294"+
    "\0\u037b\0\u039c\0\u01ad\0\u01ad\0\u01ad\0\u01ad\0\u03bd\0\u03de"+
    "\0\u01ad\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u0339\0\u01ad"+
    "\0\u01ce\0\u04a4\0\u01ce\0\u01ad\0\u04c5\0\u01ad\0\u04e6\0\u01ad"+
    "\0\u0507\0\u0528\0\u0549\0\u01ad\0\u056a\0\u058b\0\u0420\0\u05ac"+
    "\0\u0441\0\u0483\0\u01ad\0\u05cd\0\u0462\0\u0441\0\u05ee\0\u060f"+
    "\0\u01ad\0\u01ad\0\u0630\0\u01ad\0\u01ad\0\u01ad\0\u0651\0\u01ad"+
    "\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u0483\0\u06f6\0\u0717\0\u0483"+
    "\0\u0738\0\u01ad";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\10\16\1\17\4\16\1\20\23\16\1\21\2\22\5\21"+
    "\1\23\1\21\1\24\6\21\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\4\21\1\22\3\21\1\34\1\21"+
    "\1\22\1\35\5\21\1\23\1\21\1\24\6\21\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\4\21\1\35"+
    "\1\36\3\21\1\16\2\37\5\16\1\17\14\16\1\40"+
    "\6\16\1\37\14\16\1\17\30\16\1\21\2\41\3\42"+
    "\1\21\1\43\1\23\10\21\1\42\2\21\1\44\1\42"+
    "\3\21\3\42\1\41\1\42\1\45\2\21\1\16\2\22"+
    "\3\42\2\16\1\17\10\16\1\42\2\16\1\44\1\42"+
    "\3\16\3\42\1\22\1\42\1\16\1\46\11\16\1\17"+
    "\27\16\1\47\30\50\1\51\10\50\1\16\2\52\5\16"+
    "\1\17\17\16\1\51\3\16\1\52\10\16\1\53\1\16"+
    "\2\54\1\55\5\54\3\16\1\53\1\56\4\16\1\54"+
    "\1\16\3\53\1\16\1\57\2\16\1\54\10\16\1\17"+
    "\24\16\1\57\3\16\1\60\1\22\6\60\1\61\17\60"+
    "\1\62\10\60\51\0\1\63\4\0\1\64\33\0\1\65"+
    "\31\0\2\22\31\0\1\22\25\0\1\66\42\0\1\67"+
    "\41\0\1\70\41\0\1\71\41\0\1\72\41\0\1\33"+
    "\15\0\1\73\14\0\1\73\7\0\3\73\7\0\1\35"+
    "\31\0\1\35\41\0\1\74\4\0\2\37\22\0\1\75"+
    "\6\0\1\37\5\0\2\41\31\0\1\41\7\0\3\42"+
    "\13\0\1\42\3\0\1\42\3\0\3\42\1\0\1\42"+
    "\7\0\1\76\14\0\1\76\7\0\3\76\5\0\30\50"+
    "\1\0\10\50\1\0\2\52\31\0\1\52\7\0\2\77"+
    "\1\100\10\101\1\77\1\0\2\77\1\102\4\0\1\101"+
    "\1\0\3\77\1\103\1\104\2\0\1\101\4\0\1\77"+
    "\1\100\10\101\3\0\1\77\1\102\4\0\1\101\1\0"+
    "\3\77\1\103\1\104\2\0\1\101\4\0\1\77\1\100"+
    "\2\101\1\105\4\101\1\106\3\0\1\77\1\102\4\0"+
    "\1\101\1\0\3\77\1\103\1\104\2\0\1\101\1\102"+
    "\1\0\12\102\1\107\1\102\2\0\2\102\1\101\16\102"+
    "\30\0\1\110\20\0\1\111\53\0\1\112\46\0\1\113"+
    "\35\0\1\114\15\0\3\73\3\0\1\73\1\0\1\73"+
    "\5\0\1\73\7\0\3\73\32\0\1\115\16\0\3\76"+
    "\3\0\1\76\1\0\1\76\5\0\1\76\7\0\3\76"+
    "\11\0\1\77\1\0\10\101\3\0\1\77\1\102\4\0"+
    "\1\101\1\0\3\77\1\103\1\104\2\0\1\101\35\0"+
    "\1\116\3\0\1\102\1\0\12\102\1\107\5\102\1\117"+
    "\16\102\30\0\1\120\42\0\1\121\6\0\1\102\1\0"+
    "\2\102\1\122\1\123\6\117\1\124\1\117\2\0\1\102"+
    "\1\122\1\117\4\102\1\117\1\102\3\122\1\125\1\126"+
    "\2\102\1\117\32\0\1\127\6\0\1\102\1\0\1\102"+
    "\2\122\1\123\6\117\1\124\1\117\1\77\1\0\2\122"+
    "\1\117\4\102\1\117\1\102\3\122\1\125\1\126\2\102"+
    "\1\117\1\102\1\0\2\102\1\122\1\102\6\117\1\124"+
    "\1\117\2\0\1\102\1\122\1\117\4\102\1\117\1\102"+
    "\3\122\1\125\1\126\2\102\1\117\1\102\1\0\2\102"+
    "\1\122\1\123\6\117\1\124\1\117\3\102\1\122\1\117"+
    "\4\102\1\117\1\102\3\122\1\125\1\126\2\102\1\117"+
    "\1\102\1\0\12\102\1\107\1\102\2\0\2\102\1\101"+
    "\12\102\1\130\3\102\33\0\1\131\20\0\1\132\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1881];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\2\1\1\11\2\1\1\11\1\1\1\11"+
    "\14\1\4\11\2\1\1\11\6\1\1\11\2\1\1\0"+
    "\1\11\1\0\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\0\1\1\4\0\1\11\2\0\1\1\2\0"+
    "\2\11\1\0\3\11\1\0\1\11\4\0\1\1\2\0"+
    "\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[90];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public _ScalaDocLexer() {
    this((java.io.Reader)null);
  }

  public boolean checkAhead(char c) {
     if (zzMarkedPos >= zzBuffer.length()) return false;
     return zzBuffer.charAt(zzMarkedPos) == c;
  }

  public void goTo(int offset) {
    zzCurrentPos = zzMarkedPos = zzStartRead = offset;
    zzPushbackPos = 0;
    zzAtEOF = offset < zzEndRead;
  }



  public _ScalaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaDocLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2090) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { yybegin(COMMENT_DATA);
   return DOC_WHITESPACE;
          }
        case 35: break;
        case 11: 
          { return DOC_TAG_VALUE_TOKEN;
          }
        case 36: break;
        case 27: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(CODE_BAD_LINK);
  return DOC_COMMENT_DATA;
          }
        case 37: break;
        case 23: 
          { yybegin(CODE_LINK_INNER);
  return DOC_LINK_TAG;
          }
        case 38: break;
        case 30: 
          { yybegin(COMMENT_INNER_CODE);
  return DOC_INNER_CODE_TAG;
          }
        case 39: break;
        case 15: 
          { yybegin(DOC_TAG_VALUE); return DOC_TAG_VALUE_RPAREN;
          }
        case 40: break;
        case 2: 
          { yybegin(COMMENT_DATA);
  return DOC_COMMENT_DATA;
          }
        case 41: break;
        case 18: 
          { yybegin(COMMENT_INNER_CODE);
  return DOC_INNER_CODE;
          }
        case 42: break;
        case 13: 
          { return DOC_TAG_VALUE_COMMA;
          }
        case 43: break;
        case 10: 
          { yybegin(COMMENT_DATA); return DOC_WHITESPACE;
          }
        case 44: break;
        case 20: 
          { return DOC_UNDERLINE_TAG;
          }
        case 45: break;
        case 16: 
          { yybegin(COMMENT_DATA); return DOC_INLINE_TAG_END;
          }
        case 46: break;
        case 33: 
          { yybegin(COMMENT_DATA);
  return DOC_INNER_CODE_TAG;
          }
        case 47: break;
        case 32: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return DOC_COMMENT_DATA;
          }
        case 48: break;
        case 8: 
          { return DOC_COMMENT_DATA;
          }
        case 49: break;
        case 24: 
          { yybegin(TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 50: break;
        case 6: 
          { if (checkAhead('@')){
    yybegin(INLINE_TAG_NAME);
  }
  else{
    yybegin(COMMENT_DATA);
  }
  return DOC_INLINE_TAG_START;
          }
        case 51: break;
        case 14: 
          { yybegin(DOC_TAG_VALUE_IN_PAREN); return DOC_TAG_VALUE_LPAREN;
          }
        case 52: break;
        case 34: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { yybegin(COMMENT_DATA);
  return DOC_HTTP_LINK_TAG;
          }
        case 53: break;
        case 5: 
          { return DOC_MONOSPACE_TAG;
          }
        case 54: break;
        case 21: 
          { return DOC_ITALIC_TAG;
          }
        case 55: break;
        case 26: 
          { yybegin(INLINE_TAG_DOC_SPACE); return DOC_TAG_NAME;
          }
        case 56: break;
        case 17: 
          { yybegin(INLINE_DOC_TAG_VALUE);
  return DOC_WHITESPACE;
          }
        case 57: break;
        case 29: 
          { return DOC_BOLD_TAG;
          }
        case 58: break;
        case 3: 
          { return DOC_WHITESPACE;
          }
        case 59: break;
        case 12: 
          { return DOC_TAG_VALUE_SHARP_TOKEN;
          }
        case 60: break;
        case 25: 
          { yybegin(COMMENT_DATA);
  return DOC_LINK_CLOSE_TAG;
          }
        case 61: break;
        case 22: 
          { return DOC_SUBSCRIPT_TAG;
          }
        case 62: break;
        case 1: 
          { return DOC_COMMENT_BAD_CHARACTER;
          }
        case 63: break;
        case 7: 
          { return DOC_HEADER;
          }
        case 64: break;
        case 28: 
          { yybegin(COMMENT_DATA_START); return DOC_COMMENT_START;
          }
        case 65: break;
        case 4: 
          { return DOC_SUPERSCRIPT_TAG;
          }
        case 66: break;
        case 19: 
          { return DOC_COMMENT_END;
          }
        case 67: break;
        case 9: 
          { if (checkAhead('<') || checkAhead('\"') || checkAhead('\u007b')) yybegin(COMMENT_DATA);
  //else if (checkAhead('\u007b') ) yybegin(COMMENT_DATA); //lbrace -  there's some error in JLex when typing lbrace directly
  else yybegin(DOC_TAG_VALUE);

 return DOC_WHITESPACE;
          }
        case 68: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
