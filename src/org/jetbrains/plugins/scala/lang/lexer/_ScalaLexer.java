/* The following code was generated by JFlex 1.4.1 on 24.10.06 19:51 */

package org.jetbrains.plugins.scala.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 24.10.06 19:51 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaLexer implements FlexLexer, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_XML_STATE = 4;
  public static final int IN_STRING_STATE = 3;
  public static final int IN_LINE_COMMENT_STATE = 2;
  public static final int IN_BLOCK_COMMENT_STATE = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\55\1\0\1\57\1\54\22\0\1\57\1\100\1\53"+
    "\1\75\1\0\1\74\1\0\1\44\1\70\1\71\1\61\1\41\1\102"+
    "\1\42\1\37\1\60\1\33\1\35\1\47\1\35\1\35\1\50\1\35"+
    "\1\35\1\51\1\34\1\72\1\101\1\62\1\73\1\63\1\0\1\76"+
    "\3\36\1\43\1\40\1\43\5\46\1\32\16\46\1\64\1\45\1\65"+
    "\1\0\1\52\1\0\1\1\1\2\1\6\1\12\1\7\1\13\1\30"+
    "\1\10\1\17\1\25\1\27\1\11\1\21\1\16\1\14\1\22\1\31"+
    "\1\5\1\3\1\4\1\24\1\26\1\23\1\15\1\20\1\46\1\66"+
    "\1\0\1\67\1\77\u1faa\0\1\56\u01a8\0\1\0\ude2d\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\0\1\2\21\3\2\4\1\5\1\6"+
    "\1\7\2\2\1\10\1\11\2\12\1\13\1\2\1\14"+
    "\2\2\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\5\33"+
    "\2\34\1\1\1\35\4\1\1\36\1\37\14\3\1\40"+
    "\7\3\1\41\10\3\1\0\1\4\1\42\1\0\1\4"+
    "\1\0\1\42\1\0\1\3\3\0\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\4\0\1\52\4\3\1\53"+
    "\13\3\1\54\1\3\1\55\3\3\1\56\11\3\1\57"+
    "\1\60\1\42\1\0\1\4\1\0\1\61\1\0\1\61"+
    "\10\0\4\3\1\62\1\3\1\63\1\64\2\3\1\65"+
    "\2\3\1\66\5\3\1\67\10\3\1\70\11\0\2\3"+
    "\1\71\1\72\1\73\2\3\1\74\1\75\1\3\1\76"+
    "\1\77\4\3\1\100\1\101\3\3\1\102\11\0\1\3"+
    "\1\103\1\104\3\3\1\105\2\3\1\106\3\3\1\0"+
    "\2\3\1\107\1\110\2\3\1\111\1\3\1\112\1\113"+
    "\1\114\1\115\1\116\1\3\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u014f\0\u014f\0\u06ce\0\u0711\0\u01d5\0\u014f"+
    "\0\u0754\0\u014f\0\u014f\0\u0797\0\u014f\0\u07da\0\u081d\0\u014f"+
    "\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u0860\0\u014f"+
    "\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u08a3\0\u08e6"+
    "\0\u0929\0\u096c\0\u09af\0\u014f\0\u09f2\0\u014f\0\u014f\0\u0a35"+
    "\0\u0a78\0\u0abb\0\u014f\0\u014f\0\u0afe\0\u0b41\0\u0b84\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u01d5\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u01d5\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u014f\0\u014f\0\u1252\0\u1295\0\u12d8\0\u131b"+
    "\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u014f\0\u014f\0\u014f"+
    "\0\u014f\0\u014f\0\u014f\0\u014f\0\u14ad\0\u14f0\0\u1533\0\u0abb"+
    "\0\u0abb\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u01d5\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u01d5\0\u1963\0\u01d5\0\u19a6\0\u19e9\0\u1a2c\0\u01d5"+
    "\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44"+
    "\0\u1c87\0\u01d5\0\u01d5\0\u1cca\0\u1d0d\0\u1d50\0\u13a1\0\u13a1"+
    "\0\u1d93\0\u014f\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u01d5\0\u20fa"+
    "\0\u01d5\0\u01d5\0\u213d\0\u2180\0\u01d5\0\u21c3\0\u2206\0\u01d5"+
    "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u01d5\0\u2398\0\u23db"+
    "\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u01d5\0\u25b0"+
    "\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8"+
    "\0\u280b\0\u284e\0\u01d5\0\u01d5\0\u01d5\0\u2891\0\u28d4\0\u01d5"+
    "\0\u01d5\0\u2917\0\u01d5\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66"+
    "\0\u01d5\0\u01d5\0\u2aa9\0\u2aec\0\u2b2f\0\u01d5\0\u2b72\0\u2bb5"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd"+
    "\0\u01d5\0\u01d5\0\u2e10\0\u2e53\0\u2e96\0\u01d5\0\u2ed9\0\u2f1c"+
    "\0\u01d5\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u01d5"+
    "\0\u01d5\0\u30f1\0\u3134\0\u01d5\0\u3177\0\u01d5\0\u01d5\0\u01d5"+
    "\0\u01d5\0\u01d5\0\u31ba\0\u01d5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\10\1\16\1\17\1\20\1\10\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\10\1\27\4\10\1\30\2\31"+
    "\1\10\1\32\1\10\1\33\1\34\1\10\1\35\1\36"+
    "\1\10\3\31\1\37\1\40\1\41\1\42\1\6\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\6\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\45\66\1\67\6\66\1\70\4\66"+
    "\1\71\66\66\1\72\6\66\1\73\1\74\25\66\53\75"+
    "\1\76\27\75\45\77\1\100\6\77\1\101\5\77\1\102"+
    "\3\77\1\103\1\104\13\77\104\0\1\10\1\105\34\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\36\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\6\10"+
    "\1\106\14\10\1\107\12\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\4\10\1\110\2\10\1\111\7\10"+
    "\1\112\16\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\6\10\1\113\27\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\1\114\7\10\1\115\25\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\10\10\1\116"+
    "\3\10\1\117\21\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\6\10\1\120\4\10\1\121\22\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\1\122\12\10"+
    "\1\123\2\10\1\124\17\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\1\10\1\125\23\10\1\126\10\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\6\10"+
    "\1\127\14\10\1\130\12\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\12\10\1\131\5\10\1\132\15\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\16\10"+
    "\1\133\17\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\1\134\35\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\1\135\3\10\1\136\31\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\7\10\1\137\6\10"+
    "\1\140\17\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\1\141\35\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\37\0\1\142\1\0\1\143\2\144\1\0\1\145"+
    "\14\0\1\143\1\146\1\147\1\146\1\0\1\150\1\142"+
    "\2\0\1\144\3\0\2\146\1\147\40\0\1\142\1\0"+
    "\1\143\2\144\16\0\1\143\3\31\1\0\1\150\1\142"+
    "\2\0\1\144\3\0\3\31\64\0\3\150\11\0\3\150"+
    "\31\0\44\151\1\152\1\153\5\151\1\154\27\151\24\0"+
    "\1\155\31\0\1\42\101\0\1\42\105\0\1\156\1\157"+
    "\63\0\1\160\27\0\1\161\1\0\1\162\100\0\1\163"+
    "\73\0\1\164\43\0\1\165\31\0\1\66\101\0\1\66"+
    "\105\0\1\74\46\0\1\166\31\0\1\74\101\0\1\74"+
    "\25\0\53\75\1\0\27\75\24\0\1\167\31\0\1\77"+
    "\101\0\1\77\25\0\53\170\1\0\7\170\1\171\17\170"+
    "\1\0\2\10\1\172\33\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\1\173\35\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\21\10\1\174\14\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\1\175\16\10"+
    "\1\176\3\10\1\177\12\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\4\10\1\200\11\10\1\201\17\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\21\10"+
    "\1\202\14\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\3\10\1\203\24\10\1\204\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\2\10\1\205\1\206"+
    "\32\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\1\207\35\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\2\10\1\210\33\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\3\10\1\211\32\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\12\10\1\212\23\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\10\10"+
    "\1\213\25\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\4\10\1\214\31\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\15\10\1\215\20\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\24\10\1\216\11\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\6\10"+
    "\1\217\27\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\22\10\1\220\13\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\10\10\1\221\25\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\21\10\1\222\14\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\6\10"+
    "\1\223\27\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\3\10\1\224\32\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\5\10\1\225\30\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\13\10\1\226\2\10"+
    "\1\227\17\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\16\10\1\230\17\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\3\10\1\231\32\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\4\10\1\232\3\10"+
    "\1\233\25\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\63\0\3\234\3\0\2\235\4\0\3\234\32\0\2\236"+
    "\3\0\2\236\2\0\2\236\17\0\4\236\1\0\1\236"+
    "\2\0\1\236\3\0\3\236\40\0\1\142\1\0\1\143"+
    "\2\144\16\0\1\143\1\146\1\147\1\146\1\0\1\150"+
    "\1\142\2\0\1\144\3\0\2\146\1\147\40\0\1\142"+
    "\2\0\2\144\17\0\3\147\1\0\1\150\1\142\2\0"+
    "\1\144\3\0\3\147\40\0\1\142\2\0\2\144\17\0"+
    "\3\150\2\0\1\142\2\0\1\144\3\0\3\150\31\0"+
    "\44\237\1\240\6\237\1\0\73\237\1\152\6\237\1\0"+
    "\53\237\1\241\17\237\1\240\6\237\1\0\27\237\44\0"+
    "\1\242\71\0\1\243\13\0\1\244\66\0\1\245\13\0"+
    "\1\246\66\0\1\247\13\0\1\250\66\0\1\251\13\0"+
    "\1\252\34\0\3\10\1\253\32\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\10\10\1\254\25\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\6\10\1\255"+
    "\27\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\16\10\1\256\17\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\6\10\1\257\27\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\13\10\1\260\22\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\2\10\1\261"+
    "\33\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\6\10\1\262\27\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\23\10\1\263\12\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\23\10\1\264\12\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\6\10\1\265"+
    "\27\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\5\10\1\266\30\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\2\10\1\267\33\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\6\10\1\270\27\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\6\10\1\271"+
    "\27\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\2\10\1\272\33\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\1\273\35\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\6\10\1\274\27\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\4\10\1\275\31\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\10\10"+
    "\1\276\25\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\10\10\1\277\2\10\1\300\22\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\10\10\1\301\25\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\5\10"+
    "\1\302\30\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\26\10\1\303\7\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\3\10\1\304\32\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\25\10\1\305\10\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\10\10"+
    "\1\306\25\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\7\10\1\307\26\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\42\0\2\144\17\0\3\234\5\0\1\144"+
    "\3\0\3\234\64\0\3\234\11\0\3\234\32\0\2\236"+
    "\3\0\2\236\1\0\1\143\2\236\16\0\1\143\4\236"+
    "\1\0\1\236\2\0\1\236\3\0\3\236\31\0\1\237"+
    "\2\310\3\237\2\310\2\237\2\310\17\237\4\310\1\237"+
    "\1\310\2\237\1\310\1\152\2\237\3\310\1\237\1\0"+
    "\27\237\33\0\1\311\102\0\1\312\102\0\1\313\102\0"+
    "\1\314\102\0\1\315\102\0\1\316\102\0\1\317\102\0"+
    "\1\320\50\0\4\10\1\321\31\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\6\10\1\322\27\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\4\10\1\323"+
    "\31\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\3\10\1\324\32\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\22\10\1\325\13\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\4\10\1\326\31\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\16\10\1\327"+
    "\17\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\7\10\1\330\26\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\2\10\1\331\33\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\15\10\1\332\20\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\6\10\1\333"+
    "\27\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\10\10\1\334\25\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\5\10\1\335\30\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\4\10\1\336\31\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\16\10\1\337"+
    "\17\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\4\10\1\340\31\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\11\10\1\341\24\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\7\10\1\342\26\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\1\343\35\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\6\10"+
    "\1\344\27\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\1\345\35\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\6\10\1\346\27\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\30\0\1\237\2\347\3\237\2\347"+
    "\2\237\2\347\17\237\4\347\1\237\1\347\2\237\1\347"+
    "\1\152\2\237\3\347\1\237\1\0\27\237\51\0\1\350"+
    "\100\0\1\351\104\0\1\352\100\0\1\353\104\0\1\354"+
    "\100\0\1\355\104\0\1\356\100\0\1\357\34\0\1\360"+
    "\35\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\11\10\1\361\24\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\15\10\1\362\20\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\4\10\1\363\31\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\11\10\1\364"+
    "\24\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\10\10\1\365\25\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\3\10\1\366\32\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\16\10\1\367\17\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\5\10\1\370"+
    "\30\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\3\10\1\371\32\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\27\10\1\372\6\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\5\10\1\373\30\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\3\10\1\374"+
    "\32\10\1\0\1\10\2\0\1\10\2\0\5\10\30\0"+
    "\1\237\2\375\3\237\2\375\2\237\2\375\17\237\4\375"+
    "\1\237\1\375\2\237\1\375\1\152\2\237\3\375\1\237"+
    "\1\0\27\237\50\0\1\42\103\0\1\42\101\0\1\66"+
    "\103\0\1\66\101\0\1\74\103\0\1\74\101\0\1\77"+
    "\103\0\1\77\32\0\5\10\1\376\30\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\6\10\1\377\27\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\2\10"+
    "\1\u0100\33\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\17\10\1\u0101\16\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\11\10\1\u0102\24\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\31\0\16\10\1\u0103\17\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\31\0\6\10"+
    "\1\u0104\27\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\31\0\3\10\1\u0105\32\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\31\0\6\10\1\u0106\27\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\30\0\1\237\2\151\3\237"+
    "\2\151\2\237\2\151\17\237\4\151\1\237\1\151\2\237"+
    "\1\151\1\152\2\237\3\151\1\237\1\0\27\237\1\0"+
    "\3\10\1\u0107\32\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\2\10\1\u0108\33\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\31\0\6\10\1\u0109\27\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\31\0\3\10\1\u010a"+
    "\32\10\1\0\1\10\2\0\1\10\2\0\5\10\31\0"+
    "\6\10\1\u010b\27\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\31\0\11\10\1\u010c\24\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12797];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\0\1\11\24\1\2\11\3\1\1\11"+
    "\1\1\2\11\1\1\1\11\2\1\7\11\1\1\7\11"+
    "\5\1\1\11\1\1\2\11\3\1\2\11\35\1\1\0"+
    "\2\11\1\0\1\1\1\0\1\1\1\0\1\1\3\0"+
    "\7\11\4\0\44\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\11\10\0\35\1\11\0\26\1\11\0\15\1\1\0"+
    "\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private IElementType process(IElementType type){
        //System.out.println(type.toString());
        return type;
    }



  public _ScalaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { return process(kCATCH);
          }
        case 80: break;
        case 58: 
          { return process(kTRAIT);
          }
        case 81: break;
        case 79: 
          { return process(kPROTECTED);
          }
        case 82: break;
        case 38: 
          { return process(tLOWER_BOUND);
          }
        case 83: break;
        case 29: 
          { yybegin(YYINITIAL);
                                            return process(tSTRING_END);
          }
        case 84: break;
        case 19: 
          { return process(tCOLON);
          }
        case 85: break;
        case 71: 
          { return process(kEXTENDS);
          }
        case 86: break;
        case 27: 
          { return process(tCOMMENT);
          }
        case 87: break;
        case 47: 
          { return process(kVAR);
          }
        case 88: break;
        case 68: 
          { return process(kRETURN);
          }
        case 89: break;
        case 25: 
          { return process(tSEMICOLON);
          }
        case 90: break;
        case 9: 
          { yybegin(IN_STRING_STATE);
                                            return process(tSTRING_BEGIN);
          }
        case 91: break;
        case 50: 
          { return process(kTRUE);
          }
        case 92: break;
        case 12: 
          { return process(tSTAR);
          }
        case 93: break;
        case 69: 
          { return process(kOBJECT);
          }
        case 94: break;
        case 2: 
          { return process(tSTUB);
          }
        case 95: break;
        case 56: 
          { return process(kWITH);
          }
        case 96: break;
        case 40: 
          { return process(tUPPER_BOUND);
          }
        case 97: break;
        case 5: 
          { return process(tDOT);
          }
        case 98: break;
        case 23: 
          { return process(tTILDA);
          }
        case 99: break;
        case 65: 
          { return process(kMATCH);
          }
        case 100: break;
        case 26: 
          { return process(tCOMMA);
          }
        case 101: break;
        case 1: 
          { return process(tSTRING);
          }
        case 102: break;
        case 16: 
          { return process(tRBRACE);
          }
        case 103: break;
        case 51: 
          { return process(kTHIS);
          }
        case 104: break;
        case 59: 
          { return process(kTHROW);
          }
        case 105: break;
        case 48: 
          { return process(kVAL);
          }
        case 106: break;
        case 74: 
          { return process(kPRIVATE);
          }
        case 107: break;
        case 55: 
          { return process(kNULL);
          }
        case 108: break;
        case 72: 
          { return process(kFINALLY);
          }
        case 109: break;
        case 24: 
          { return process(tNOT);
          }
        case 110: break;
        case 17: 
          { return process(tLPARENTHIS);
          }
        case 111: break;
        case 11: 
          { return process(tWHITE_SPACE_IN_LINE);
          }
        case 112: break;
        case 67: 
          { return process(kSEALED);
          }
        case 113: break;
        case 31: 
          { yybegin(IN_XML_STATE);
                                            return process(tENDSCALAEXPR);
          }
        case 114: break;
        case 4: 
          { return process(tINTEGER);
          }
        case 115: break;
        case 61: 
          { return process(kCLASS);
          }
        case 116: break;
        case 77: 
          { return process(kOVERRIDE);
          }
        case 117: break;
        case 10: 
          { return process(tLINE_TERMINATOR);
          }
        case 118: break;
        case 73: 
          { return process(kPACKAGE);
          }
        case 119: break;
        case 13: 
          { return process(tLSQBRACKET);
          }
        case 120: break;
        case 15: 
          { return process(tLBRACE);
          }
        case 121: break;
        case 32: 
          { return process(kDO);
          }
        case 122: break;
        case 45: 
          { return process(kFOR);
          }
        case 123: break;
        case 62: 
          { return process(kFALSE);
          }
        case 124: break;
        case 37: 
          { return process(tCHOOSE);
          }
        case 125: break;
        case 64: 
          { return process(kYIELD);
          }
        case 126: break;
        case 22: 
          { return process(tAT);
          }
        case 127: break;
        case 3: 
          { return process(tIDENTIFIER);
          }
        case 128: break;
        case 46: 
          { return process(kNEW);
          }
        case 129: break;
        case 76: 
          { return process(kREQUIRES);
          }
        case 130: break;
        case 35: 
          { yybegin(IN_LINE_COMMENT_STATE);
                                            return process(tCOMMENT);
          }
        case 131: break;
        case 39: 
          { return process(tVIEW);
          }
        case 132: break;
        case 78: 
          { return process(kIMPLICIT);
          }
        case 133: break;
        case 6: 
          { return process(tPLUS);
          }
        case 134: break;
        case 63: 
          { return process(kFINAL);
          }
        case 135: break;
        case 43: 
          { return process(kTRY);
          }
        case 136: break;
        case 52: 
          { return process(kTYPE);
          }
        case 137: break;
        case 21: 
          { return process(tINNER_CLASS);
          }
        case 138: break;
        case 57: 
          { return process(kSUPER);
          }
        case 139: break;
        case 53: 
          { return process(kCASE);
          }
        case 140: break;
        case 8: 
          { return process(tUNDER);
          }
        case 141: break;
        case 20: 
          { return process(tASSIGN);
          }
        case 142: break;
        case 18: 
          { return process(tRPARENTHIS);
          }
        case 143: break;
        case 42: 
          { yybegin(IN_XML_STATE);
                                            return process(tOPENXMLTAG);
          }
        case 144: break;
        case 70: 
          { return process(kIMPORT);
          }
        case 145: break;
        case 75: 
          { return process(kABSTRACT);
          }
        case 146: break;
        case 34: 
          { return process(tFLOAT);
          }
        case 147: break;
        case 7: 
          { return process(tMINUS);
          }
        case 148: break;
        case 33: 
          { return process(kIF);
          }
        case 149: break;
        case 36: 
          { yybegin(IN_BLOCK_COMMENT_STATE);
                                            return process(tCOMMENT);
          }
        case 150: break;
        case 49: 
          { return process(tCHAR);
          }
        case 151: break;
        case 41: 
          { return process(tFUNTYPE);
          }
        case 152: break;
        case 14: 
          { return process(tRSQBRACKET);
          }
        case 153: break;
        case 30: 
          { yybegin(YYINITIAL);
                                            return process(tBEGINSCALAEXPR);
          }
        case 154: break;
        case 66: 
          { return process(kWHILE);
          }
        case 155: break;
        case 44: 
          { return process(kDEF);
          }
        case 156: break;
        case 54: 
          { return process(kELSE);
          }
        case 157: break;
        case 28: 
          { yybegin(YYINITIAL);
                                            return process(tCOMMENT);
          }
        case 158: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
