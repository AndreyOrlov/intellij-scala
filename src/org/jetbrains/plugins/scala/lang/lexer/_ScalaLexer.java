/* The following code was generated by JFlex 1.4.1 on 26.09.06 18:59 */

package org.jetbrains.plugins.scala.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 26.09.06 18:59 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaLexer implements FlexLexer, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LINE_COMMENT_STATE = 2;
  public static final int IN_BLOCK_COMMENT_STATE = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\35\1\0\1\0\1\37\22\0\1\32\6\0\1\32"+
    "\2\0\1\41\4\0\1\40\1\0\1\0\5\0\1\0\1\0\1\0"+
    "\7\0\3\34\1\34\7\34\1\36\1\34\1\33\5\34\1\34\5\34"+
    "\1\34\6\0\1\1\1\2\1\6\1\12\1\7\1\13\1\30\1\10"+
    "\1\17\1\25\1\27\1\11\1\21\1\16\1\14\1\22\1\31\1\5"+
    "\1\3\1\4\1\24\1\26\1\23\1\15\1\20\1\34\1\0\1\32"+
    "\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\22\2\2\1\3\3\2\4\15\2\1\5"+
    "\10\2\1\6\7\2\1\7\1\10\4\2\1\11\15\2"+
    "\1\12\1\2\1\13\4\2\1\14\10\2\1\15\1\16"+
    "\4\2\1\17\1\2\1\20\1\21\2\2\1\22\2\2"+
    "\1\23\10\2\1\24\13\2\1\25\1\26\1\27\2\2"+
    "\1\30\1\31\2\2\1\32\1\33\4\2\1\34\1\35"+
    "\3\2\1\36\1\37\1\2\1\40\1\41\4\2\1\42"+
    "\2\2\1\43\5\2\1\44\1\2\1\45\2\2\1\46"+
    "\1\2\1\47\1\50\1\51\1\2\1\52\1\53\2\2"+
    "\1\54\1\2\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec\0\u030e"+
    "\0\146\0\u0330\0\u0352\0\146\0\u0374\0\u0396\0\u03b8\0\u03da"+
    "\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea"+
    "\0\u050c\0\u052e\0\252\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8"+
    "\0\u05fa\0\u061c\0\u063e\0\252\0\u0660\0\u0682\0\u06a4\0\u06c6"+
    "\0\u06e8\0\u070a\0\u072c\0\146\0\146\0\u074e\0\u0770\0\u0792"+
    "\0\u07b4\0\252\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880"+
    "\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\252"+
    "\0\u0990\0\252\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\252\0\u0a3a"+
    "\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\252"+
    "\0\252\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0\0\252\0\u0bd2\0\252"+
    "\0\252\0\u0bf4\0\u0c16\0\252\0\u0c38\0\u0c5a\0\252\0\u0c7c"+
    "\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u0d48\0\u0d6a\0\252"+
    "\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\u0e7a"+
    "\0\u0e9c\0\u0ebe\0\u0ee0\0\252\0\252\0\252\0\u0f02\0\u0f24"+
    "\0\252\0\252\0\u0f46\0\u0f68\0\252\0\u0f8a\0\u0fac\0\u0fce"+
    "\0\u0ff0\0\u1012\0\252\0\252\0\u1034\0\u1056\0\u1078\0\252"+
    "\0\252\0\u109a\0\252\0\252\0\u10bc\0\u10de\0\u1100\0\u1122"+
    "\0\252\0\u1144\0\u1166\0\252\0\u1188\0\u11aa\0\u11cc\0\u11ee"+
    "\0\u1210\0\252\0\u1232\0\252\0\u1254\0\u1276\0\252\0\u1298"+
    "\0\252\0\252\0\252\0\u12ba\0\252\0\252\0\u12dc\0\u12fe"+
    "\0\252\0\u1320\0\252";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\6\1\15\1\16\1\17\1\6\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\6\1\26\3\6\1\4"+
    "\2\6\1\4\1\6\1\27\1\30\1\4\37\31\1\32"+
    "\1\31\1\33\35\31\1\34\1\31\1\35\2\31\43\0"+
    "\1\6\1\36\27\6\1\0\2\6\1\0\1\6\4\0"+
    "\31\6\1\0\2\6\1\0\1\6\4\0\6\6\1\37"+
    "\14\6\1\40\5\6\1\0\2\6\1\0\1\6\4\0"+
    "\4\6\1\41\2\6\1\42\7\6\1\43\11\6\1\0"+
    "\2\6\1\0\1\6\4\0\6\6\1\44\22\6\1\0"+
    "\2\6\1\0\1\6\4\0\1\45\7\6\1\46\20\6"+
    "\1\0\2\6\1\0\1\6\4\0\10\6\1\47\3\6"+
    "\1\50\14\6\1\0\2\6\1\0\1\6\4\0\6\6"+
    "\1\51\22\6\1\0\2\6\1\0\1\6\4\0\6\6"+
    "\1\52\4\6\1\53\15\6\1\0\2\6\1\0\1\6"+
    "\4\0\1\54\12\6\1\55\2\6\1\56\12\6\1\0"+
    "\2\6\1\0\1\6\4\0\1\6\1\57\3\6\1\60"+
    "\17\6\1\61\3\6\1\0\2\6\1\0\1\6\4\0"+
    "\6\6\1\62\14\6\1\63\5\6\1\0\2\6\1\0"+
    "\1\6\4\0\12\6\1\64\5\6\1\65\10\6\1\0"+
    "\2\6\1\0\1\6\4\0\16\6\1\66\12\6\1\0"+
    "\2\6\1\0\1\6\4\0\1\67\30\6\1\0\2\6"+
    "\1\0\1\6\4\0\1\70\3\6\1\71\24\6\1\0"+
    "\2\6\1\0\1\6\4\0\7\6\1\72\21\6\1\0"+
    "\2\6\1\0\1\6\4\0\1\73\30\6\1\0\2\6"+
    "\1\0\1\6\40\0\1\4\44\0\1\74\1\75\35\0"+
    "\1\31\44\0\1\34\36\0\1\34\5\0\2\6\1\76"+
    "\26\6\1\0\2\6\1\0\1\6\4\0\1\77\30\6"+
    "\1\0\2\6\1\0\1\6\4\0\21\6\1\100\7\6"+
    "\1\0\2\6\1\0\1\6\4\0\1\101\16\6\1\102"+
    "\3\6\1\103\5\6\1\0\2\6\1\0\1\6\4\0"+
    "\4\6\1\104\11\6\1\105\12\6\1\0\2\6\1\0"+
    "\1\6\4\0\21\6\1\106\7\6\1\0\2\6\1\0"+
    "\1\6\4\0\3\6\1\107\24\6\1\110\1\0\2\6"+
    "\1\0\1\6\4\0\2\6\1\111\1\112\25\6\1\0"+
    "\2\6\1\0\1\6\4\0\1\113\30\6\1\0\2\6"+
    "\1\0\1\6\4\0\2\6\1\114\26\6\1\0\2\6"+
    "\1\0\1\6\4\0\3\6\1\115\25\6\1\0\2\6"+
    "\1\0\1\6\4\0\14\6\1\116\14\6\1\0\2\6"+
    "\1\0\1\6\4\0\5\6\1\117\4\6\1\120\16\6"+
    "\1\0\2\6\1\0\1\6\4\0\10\6\1\121\20\6"+
    "\1\0\2\6\1\0\1\6\4\0\4\6\1\122\24\6"+
    "\1\0\2\6\1\0\1\6\4\0\15\6\1\123\13\6"+
    "\1\0\2\6\1\0\1\6\4\0\24\6\1\124\4\6"+
    "\1\0\2\6\1\0\1\6\4\0\3\6\1\125\25\6"+
    "\1\0\2\6\1\0\1\6\4\0\6\6\1\126\22\6"+
    "\1\0\2\6\1\0\1\6\4\0\22\6\1\127\6\6"+
    "\1\0\2\6\1\0\1\6\4\0\10\6\1\130\20\6"+
    "\1\0\2\6\1\0\1\6\4\0\21\6\1\131\7\6"+
    "\1\0\2\6\1\0\1\6\4\0\6\6\1\132\22\6"+
    "\1\0\2\6\1\0\1\6\4\0\3\6\1\133\25\6"+
    "\1\0\2\6\1\0\1\6\4\0\5\6\1\134\23\6"+
    "\1\0\2\6\1\0\1\6\4\0\13\6\1\135\2\6"+
    "\1\136\12\6\1\0\2\6\1\0\1\6\4\0\16\6"+
    "\1\137\12\6\1\0\2\6\1\0\1\6\4\0\4\6"+
    "\1\140\3\6\1\141\20\6\1\0\2\6\1\0\1\6"+
    "\4\0\3\6\1\142\25\6\1\0\2\6\1\0\1\6"+
    "\4\0\10\6\1\143\20\6\1\0\2\6\1\0\1\6"+
    "\4\0\6\6\1\144\22\6\1\0\2\6\1\0\1\6"+
    "\4\0\16\6\1\145\12\6\1\0\2\6\1\0\1\6"+
    "\4\0\6\6\1\146\22\6\1\0\2\6\1\0\1\6"+
    "\4\0\13\6\1\147\15\6\1\0\2\6\1\0\1\6"+
    "\4\0\2\6\1\150\26\6\1\0\2\6\1\0\1\6"+
    "\4\0\6\6\1\151\22\6\1\0\2\6\1\0\1\6"+
    "\4\0\23\6\1\152\5\6\1\0\2\6\1\0\1\6"+
    "\4\0\23\6\1\153\5\6\1\0\2\6\1\0\1\6"+
    "\4\0\6\6\1\154\22\6\1\0\2\6\1\0\1\6"+
    "\4\0\5\6\1\155\23\6\1\0\2\6\1\0\1\6"+
    "\4\0\2\6\1\156\26\6\1\0\2\6\1\0\1\6"+
    "\4\0\6\6\1\157\22\6\1\0\2\6\1\0\1\6"+
    "\4\0\6\6\1\160\22\6\1\0\2\6\1\0\1\6"+
    "\4\0\31\6\1\0\1\161\1\6\1\0\1\6\4\0"+
    "\16\6\1\162\12\6\1\0\2\6\1\0\1\6\4\0"+
    "\2\6\1\163\26\6\1\0\2\6\1\0\1\6\4\0"+
    "\1\164\30\6\1\0\2\6\1\0\1\6\4\0\6\6"+
    "\1\165\22\6\1\0\2\6\1\0\1\6\4\0\1\166"+
    "\30\6\1\0\2\6\1\0\1\6\4\0\4\6\1\167"+
    "\24\6\1\0\2\6\1\0\1\6\4\0\10\6\1\170"+
    "\20\6\1\0\2\6\1\0\1\6\4\0\10\6\1\171"+
    "\2\6\1\172\15\6\1\0\2\6\1\0\1\6\4\0"+
    "\10\6\1\173\20\6\1\0\2\6\1\0\1\6\4\0"+
    "\5\6\1\174\23\6\1\0\2\6\1\0\1\6\4\0"+
    "\26\6\1\175\2\6\1\0\2\6\1\0\1\6\4\0"+
    "\3\6\1\176\25\6\1\0\2\6\1\0\1\6\4\0"+
    "\25\6\1\177\3\6\1\0\2\6\1\0\1\6\4\0"+
    "\3\6\1\200\4\6\1\201\20\6\1\0\2\6\1\0"+
    "\1\6\4\0\4\6\1\202\24\6\1\0\2\6\1\0"+
    "\1\6\4\0\6\6\1\203\22\6\1\0\2\6\1\0"+
    "\1\6\4\0\4\6\1\204\24\6\1\0\2\6\1\0"+
    "\1\6\4\0\3\6\1\205\25\6\1\0\2\6\1\0"+
    "\1\6\4\0\22\6\1\206\6\6\1\0\2\6\1\0"+
    "\1\6\4\0\4\6\1\207\24\6\1\0\2\6\1\0"+
    "\1\6\4\0\16\6\1\210\12\6\1\0\2\6\1\0"+
    "\1\6\4\0\7\6\1\211\21\6\1\0\2\6\1\0"+
    "\1\6\4\0\2\6\1\212\26\6\1\0\2\6\1\0"+
    "\1\6\4\0\15\6\1\213\13\6\1\0\2\6\1\0"+
    "\1\6\4\0\23\6\1\214\5\6\1\0\2\6\1\0"+
    "\1\6\4\0\20\6\1\125\10\6\1\0\2\6\1\0"+
    "\1\6\4\0\6\6\1\215\22\6\1\0\2\6\1\0"+
    "\1\6\4\0\10\6\1\216\20\6\1\0\2\6\1\0"+
    "\1\6\4\0\5\6\1\217\23\6\1\0\2\6\1\0"+
    "\1\6\4\0\10\6\1\116\20\6\1\0\2\6\1\0"+
    "\1\6\4\0\4\6\1\220\24\6\1\0\2\6\1\0"+
    "\1\6\4\0\16\6\1\221\12\6\1\0\2\6\1\0"+
    "\1\6\4\0\4\6\1\222\24\6\1\0\2\6\1\0"+
    "\1\6\4\0\11\6\1\223\17\6\1\0\2\6\1\0"+
    "\1\6\4\0\7\6\1\224\21\6\1\0\2\6\1\0"+
    "\1\6\4\0\1\225\30\6\1\0\2\6\1\0\1\6"+
    "\4\0\6\6\1\226\22\6\1\0\2\6\1\0\1\6"+
    "\4\0\1\227\30\6\1\0\2\6\1\0\1\6\4\0"+
    "\7\6\1\230\21\6\1\0\2\6\1\0\1\6\4\0"+
    "\6\6\1\231\22\6\1\0\2\6\1\0\1\6\4\0"+
    "\1\232\30\6\1\0\2\6\1\0\1\6\4\0\11\6"+
    "\1\233\17\6\1\0\2\6\1\0\1\6\4\0\15\6"+
    "\1\234\13\6\1\0\2\6\1\0\1\6\4\0\4\6"+
    "\1\235\24\6\1\0\2\6\1\0\1\6\4\0\11\6"+
    "\1\236\17\6\1\0\2\6\1\0\1\6\4\0\20\6"+
    "\1\237\10\6\1\0\2\6\1\0\1\6\4\0\10\6"+
    "\1\240\20\6\1\0\2\6\1\0\1\6\4\0\3\6"+
    "\1\241\25\6\1\0\2\6\1\0\1\6\4\0\16\6"+
    "\1\242\12\6\1\0\2\6\1\0\1\6\4\0\5\6"+
    "\1\243\23\6\1\0\2\6\1\0\1\6\4\0\3\6"+
    "\1\244\25\6\1\0\2\6\1\0\1\6\4\0\27\6"+
    "\1\245\1\6\1\0\2\6\1\0\1\6\4\0\5\6"+
    "\1\246\23\6\1\0\2\6\1\0\1\6\4\0\3\6"+
    "\1\247\25\6\1\0\2\6\1\0\1\6\4\0\5\6"+
    "\1\250\23\6\1\0\2\6\1\0\1\6\4\0\6\6"+
    "\1\251\22\6\1\0\2\6\1\0\1\6\4\0\2\6"+
    "\1\252\26\6\1\0\2\6\1\0\1\6\4\0\6\6"+
    "\1\253\22\6\1\0\2\6\1\0\1\6\4\0\17\6"+
    "\1\254\11\6\1\0\2\6\1\0\1\6\4\0\11\6"+
    "\1\255\17\6\1\0\2\6\1\0\1\6\4\0\16\6"+
    "\1\256\12\6\1\0\2\6\1\0\1\6\4\0\6\6"+
    "\1\257\22\6\1\0\2\6\1\0\1\6\4\0\3\6"+
    "\1\260\25\6\1\0\2\6\1\0\1\6\4\0\6\6"+
    "\1\261\22\6\1\0\2\6\1\0\1\6\4\0\3\6"+
    "\1\262\25\6\1\0\2\6\1\0\1\6\4\0\2\6"+
    "\1\263\26\6\1\0\2\6\1\0\1\6\4\0\4\6"+
    "\1\264\24\6\1\0\2\6\1\0\1\6\4\0\6\6"+
    "\1\265\22\6\1\0\2\6\1\0\1\6\4\0\3\6"+
    "\1\266\25\6\1\0\2\6\1\0\1\6\4\0\6\6"+
    "\1\267\22\6\1\0\2\6\1\0\1\6\4\0\1\270"+
    "\30\6\1\0\2\6\1\0\1\6\4\0\11\6\1\271"+
    "\17\6\1\0\2\6\1\0\1\6\4\0\10\6\1\272"+
    "\20\6\1\0\2\6\1\0\1\6\4\0\10\6\1\273"+
    "\20\6\1\31\2\6\1\0\1\273\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4930];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\24\1\1\11\2\1\1\11\37\1\2\11"+
    "\176\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private IElementType process(IElementType type){
        return type;
    }



  public _ScalaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 122) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return process(kCASE);
          }
        case 45: break;
        case 17: 
          { return process(kTYPE);
          }
        case 46: break;
        case 36: 
          { return process(kEXTENDS);
          }
        case 47: break;
        case 19: 
          { return process(kELSE);
          }
        case 48: break;
        case 22: 
          { return process(kTRAIT);
          }
        case 49: break;
        case 26: 
          { return process(kFALSE);
          }
        case 50: break;
        case 21: 
          { return process(kSUPER);
          }
        case 51: break;
        case 14: 
          { return process(kVAL);
          }
        case 52: break;
        case 33: 
          { return process(kRETURN);
          }
        case 53: break;
        case 9: 
          { return process(kTRY);
          }
        case 54: break;
        case 25: 
          { return process(kCLASS);
          }
        case 55: break;
        case 1: 
          { return tSTUB;
          }
        case 56: break;
        case 16: 
          { return process(kTHIS);
          }
        case 57: break;
        case 40: 
          { return process(kABSTRACT);
          }
        case 58: break;
        case 5: 
          { return process(kDO);
          }
        case 59: break;
        case 34: 
          { return process(kOBJECT);
          }
        case 60: break;
        case 4: 
          { yybegin(YYINITIAL);
                                            return process(tCOMMENT);
          }
        case 61: break;
        case 6: 
          { return process(kIF);
          }
        case 62: break;
        case 35: 
          { return process(kIMPORT);
          }
        case 63: break;
        case 37: 
          { return process(kFINALLY);
          }
        case 64: break;
        case 23: 
          { return process(kTHROW);
          }
        case 65: break;
        case 10: 
          { return process(kDEF);
          }
        case 66: break;
        case 38: 
          { return process(kPACKAGE);
          }
        case 67: break;
        case 28: 
          { return process(kYIELD);
          }
        case 68: break;
        case 13: 
          { return process(kVAR);
          }
        case 69: break;
        case 27: 
          { return process(kFINAL);
          }
        case 70: break;
        case 42: 
          { return process(kOVERRIDE);
          }
        case 71: break;
        case 41: 
          { return process(kREQUIRES);
          }
        case 72: break;
        case 20: 
          { return process(kNULL);
          }
        case 73: break;
        case 11: 
          { return process(kFOR);
          }
        case 74: break;
        case 43: 
          { return process(kIMPLICIT);
          }
        case 75: break;
        case 30: 
          { return process(kWHITH);
          }
        case 76: break;
        case 32: 
          { return process(kSEALED);
          }
        case 77: break;
        case 12: 
          { return process(kNEW);
          }
        case 78: break;
        case 31: 
          { return process(kWHILE);
          }
        case 79: break;
        case 7: 
          { yybegin(IN_LINE_COMMENT_STATE);
                                            return process(tCOMMENT);
          }
        case 80: break;
        case 39: 
          { return process(kPRIVATE);
          }
        case 81: break;
        case 44: 
          { return process(kPROTECTED);
          }
        case 82: break;
        case 2: 
          { System.out.println("ID found!");
                                             return process(tIDENTIFIER);
          }
        case 83: break;
        case 3: 
          { return process(tCOMMENT);
          }
        case 84: break;
        case 8: 
          { yybegin(IN_BLOCK_COMMENT_STATE);
                                            return process(tCOMMENT);
          }
        case 85: break;
        case 24: 
          { return process(kCATCH);
          }
        case 86: break;
        case 15: 
          { return process(kTRUE);
          }
        case 87: break;
        case 29: 
          { return process(kMATCH);
          }
        case 88: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
