/* The following code was generated by JFlex 1.4.1 on 19.01.07 13:45 */

package org.jetbrains.plugins.scala.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 19.01.07 13:45 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaLexer implements FlexLexer, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT_STATE_NEW_LINE = 4;
  public static final int NEW_LINE_ALLOWED = 1;
  public static final int NEW_LINE_DEPRECATED = 1;
  public static final int IN_BLOCK_COMMENT_STATE = 3;
  public static final int PROCESS_NEW_LINE = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\67\1\32\1\0\1\67\1\64\16\30\4\0\1\67\1\20"+
    "\1\34\1\21\1\27\1\57\1\20\1\33\1\72\1\61\1\22\1\13"+
    "\1\52\1\14\1\10\1\25\1\3\7\6\2\5\1\23\1\53\1\56"+
    "\1\54\1\55\1\20\1\60\3\7\1\15\1\11\1\15\5\27\1\1"+
    "\16\27\1\70\1\24\1\62\1\20\1\31\1\0\1\36\1\73\1\35"+
    "\1\17\1\12\1\16\1\101\1\40\1\43\1\75\1\100\1\2\1\45"+
    "\1\42\1\74\1\76\1\47\1\46\1\41\1\37\1\50\1\77\1\51"+
    "\1\4\1\44\1\27\1\71\1\26\1\63\1\20\6\30\1\65\32\30"+
    "\2\0\4\27\4\0\1\27\2\0\1\30\7\0\1\27\4\0\1\27"+
    "\5\0\27\27\1\0\37\27\1\0\u013f\27\31\0\162\27\4\0\14\27"+
    "\16\0\5\27\11\0\1\27\21\0\130\30\5\0\23\30\12\0\1\27"+
    "\13\0\1\27\1\0\3\27\1\0\1\27\1\0\24\27\1\0\54\27"+
    "\1\0\46\27\1\0\5\27\4\0\202\27\1\0\4\30\3\0\105\27"+
    "\1\0\46\27\2\0\2\27\6\0\20\27\41\0\46\27\2\0\1\27"+
    "\7\0\47\27\11\0\21\30\1\0\27\30\1\0\3\30\1\0\1\30"+
    "\1\0\2\30\1\0\1\30\13\0\33\27\5\0\3\27\15\0\4\30"+
    "\14\0\6\30\13\0\32\27\5\0\13\27\16\30\7\0\12\30\4\0"+
    "\2\27\1\30\143\27\1\0\1\27\10\30\1\0\6\30\2\27\2\30"+
    "\1\0\4\30\2\27\12\30\3\27\2\0\1\27\17\0\1\30\1\27"+
    "\1\30\36\27\33\30\2\0\3\27\60\0\46\27\13\30\1\27\u014f\0"+
    "\3\30\66\27\2\0\1\30\1\27\20\30\2\0\1\27\4\30\3\0"+
    "\12\27\2\30\2\0\12\30\21\0\3\30\1\0\10\27\2\0\2\27"+
    "\2\0\26\27\1\0\7\27\1\0\1\27\3\0\4\27\2\0\1\30"+
    "\1\27\7\30\2\0\2\30\2\0\3\30\11\0\1\30\4\0\2\27"+
    "\1\0\3\27\2\30\2\0\12\30\4\27\15\0\3\30\1\0\6\27"+
    "\4\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0\2\27"+
    "\1\0\2\27\2\0\1\30\1\0\5\30\4\0\2\30\2\0\3\30"+
    "\13\0\4\27\1\0\1\27\7\0\14\30\3\27\14\0\3\30\1\0"+
    "\11\27\1\0\3\27\1\0\26\27\1\0\7\27\1\0\2\27\1\0"+
    "\5\27\2\0\1\30\1\27\10\30\1\0\3\30\1\0\3\30\2\0"+
    "\1\27\17\0\2\27\2\30\2\0\12\30\1\0\1\27\17\0\3\30"+
    "\1\0\10\27\2\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27"+
    "\1\0\5\27\2\0\1\30\1\27\6\30\3\0\2\30\2\0\3\30"+
    "\10\0\2\30\4\0\2\27\1\0\3\27\4\0\12\30\1\0\1\27"+
    "\20\0\1\30\1\27\1\0\6\27\3\0\3\27\1\0\4\27\3\0"+
    "\2\27\1\0\1\27\1\0\2\27\3\0\2\27\3\0\3\27\3\0"+
    "\10\27\1\0\3\27\4\0\5\30\3\0\3\30\1\0\4\30\11\0"+
    "\1\30\17\0\11\30\11\0\1\27\7\0\3\30\1\0\10\27\1\0"+
    "\3\27\1\0\27\27\1\0\12\27\1\0\5\27\4\0\7\30\1\0"+
    "\3\30\1\0\4\30\7\0\2\30\11\0\2\27\4\0\12\30\22\0"+
    "\2\30\1\0\10\27\1\0\3\27\1\0\27\27\1\0\12\27\1\0"+
    "\5\27\2\0\1\30\1\27\7\30\1\0\3\30\1\0\4\30\7\0"+
    "\2\30\7\0\1\27\1\0\2\27\4\0\12\30\22\0\2\30\1\0"+
    "\10\27\1\0\3\27\1\0\27\27\1\0\20\27\4\0\6\30\2\0"+
    "\3\30\1\0\4\30\11\0\1\30\10\0\2\27\4\0\12\30\22\0"+
    "\2\30\1\0\22\27\3\0\30\27\1\0\11\27\1\0\1\27\2\0"+
    "\7\27\3\0\1\30\4\0\6\30\1\0\1\30\1\0\10\30\22\0"+
    "\2\30\15\0\60\27\1\30\2\27\7\30\4\0\10\27\10\30\1\0"+
    "\12\30\47\0\2\27\1\0\1\27\2\0\2\27\1\0\1\27\2\0"+
    "\1\27\6\0\4\27\1\0\7\27\1\0\3\27\1\0\1\27\1\0"+
    "\1\27\2\0\2\27\1\0\4\27\1\30\2\27\6\30\1\0\2\30"+
    "\1\27\2\0\5\27\1\0\1\27\1\0\6\30\2\0\12\30\2\0"+
    "\2\27\42\0\1\27\27\0\2\30\6\0\12\30\13\0\1\30\1\0"+
    "\1\30\1\0\1\30\4\0\2\30\10\27\1\0\42\27\6\0\24\30"+
    "\1\0\2\30\4\27\4\0\10\30\1\0\44\30\11\0\1\30\71\0"+
    "\42\27\1\0\5\27\1\0\2\27\1\0\7\30\3\0\4\30\6\0"+
    "\12\30\6\0\6\27\4\30\106\0\46\27\12\0\51\27\7\0\132\27"+
    "\5\0\104\27\5\0\122\27\6\0\7\27\1\0\77\27\1\0\1\27"+
    "\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27\2\0\47\27"+
    "\1\0\1\27\1\0\4\27\2\0\37\27\1\0\1\27\1\0\4\27"+
    "\2\0\7\27\1\0\1\27\1\0\4\27\2\0\7\27\1\0\7\27"+
    "\1\0\27\27\1\0\37\27\1\0\1\27\1\0\4\27\2\0\7\27"+
    "\1\0\47\27\1\0\23\27\16\0\11\30\56\0\125\27\14\0\u026c\27"+
    "\2\0\10\27\12\0\32\27\5\0\113\27\3\0\3\27\17\0\15\27"+
    "\1\0\4\27\3\30\13\0\22\27\3\30\13\0\22\27\2\30\14\0"+
    "\15\27\1\0\3\27\1\0\2\30\14\0\64\27\40\30\3\0\1\27"+
    "\3\0\2\27\1\30\2\0\12\30\41\0\3\30\2\0\12\30\6\0"+
    "\130\27\10\0\51\27\1\30\126\0\35\27\3\0\14\30\4\0\14\30"+
    "\12\0\12\30\36\27\2\0\5\27\u038b\0\154\27\224\0\234\27\4\0"+
    "\132\27\6\0\26\27\2\0\6\27\2\0\46\27\2\0\6\27\2\0"+
    "\10\27\1\0\1\27\1\0\1\27\1\0\1\27\1\0\37\27\2\0"+
    "\65\27\1\0\7\27\1\0\1\27\3\0\3\27\1\0\7\27\3\0"+
    "\4\27\2\0\6\27\4\0\15\27\5\0\3\27\1\0\7\27\17\0"+
    "\4\30\30\0\1\66\1\66\5\30\20\0\2\27\23\0\1\27\13\0"+
    "\4\30\6\0\6\30\1\0\1\27\15\0\1\27\40\0\22\27\36\0"+
    "\15\30\4\0\1\30\3\0\6\30\27\0\1\27\4\0\1\27\2\0"+
    "\12\27\1\0\1\27\3\0\5\27\6\0\1\27\1\0\1\27\1\0"+
    "\1\27\1\0\4\27\1\0\3\27\1\0\7\27\3\0\3\27\5\0"+
    "\5\27\26\0\44\27\116\0\1\102\u0e32\0\3\27\31\0\11\27\6\30"+
    "\1\0\5\27\2\0\5\27\4\0\126\27\2\0\2\30\2\0\3\27"+
    "\1\0\137\27\5\0\50\27\4\0\136\27\21\0\30\27\70\0\20\27"+
    "\u0200\0\u19b6\27\112\0\u51a6\27\132\0\u048d\27\u0773\0\u2ba4\27\u215c\0\u012e\27"+
    "\2\0\73\27\225\0\7\27\14\0\5\27\5\0\1\27\1\30\12\27"+
    "\1\0\15\27\1\0\5\27\1\0\1\27\1\0\2\27\1\0\2\27"+
    "\1\0\154\27\41\0\u016b\27\22\0\100\27\2\0\66\27\50\0\15\27"+
    "\3\0\20\30\20\0\4\30\17\0\2\27\30\0\3\27\31\0\1\27"+
    "\6\0\5\27\1\0\207\27\2\0\1\30\4\0\1\27\13\0\12\30"+
    "\7\0\32\27\4\0\1\27\1\0\32\27\12\0\132\27\3\0\6\27"+
    "\2\0\6\27\2\0\6\27\2\0\3\27\3\0\2\27\3\0\2\27"+
    "\22\0\3\30\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\4\2\1\5\1\6"+
    "\1\2\1\7\1\10\1\1\1\11\12\2\1\12\1\13"+
    "\1\14\2\2\1\15\1\16\1\17\1\20\1\10\1\21"+
    "\1\22\1\23\1\24\3\2\1\25\1\14\1\26\1\27"+
    "\1\30\2\31\2\32\4\33\1\2\2\3\2\0\1\34"+
    "\1\0\2\34\6\2\1\35\1\36\1\37\1\0\3\40"+
    "\1\0\1\41\2\11\12\2\1\42\6\2\1\43\1\44"+
    "\1\45\1\46\1\47\5\2\1\50\1\51\1\52\1\53"+
    "\2\52\1\53\4\52\1\53\5\52\3\0\1\54\1\55"+
    "\1\56\1\0\4\3\1\0\1\34\1\0\4\2\1\57"+
    "\1\60\1\36\1\41\1\40\10\2\1\61\3\2\1\62"+
    "\15\2\1\63\1\64\1\51\3\0\2\65\16\0\3\66"+
    "\1\3\1\67\5\2\1\70\1\2\1\71\1\2\1\72"+
    "\1\2\1\73\2\2\1\74\7\2\1\75\5\2\3\0"+
    "\1\65\4\0\1\2\1\76\1\77\1\100\1\101\1\0"+
    "\2\2\1\102\1\103\1\2\1\104\2\2\1\105\1\106"+
    "\2\2\1\107\5\2\4\0\2\2\2\0\3\2\1\110"+
    "\1\2\1\111\1\112\1\2\1\113\4\2\3\0\1\114"+
    "\1\115\2\0\6\2\1\116\1\117\1\2\5\0\2\2"+
    "\1\120\1\121\1\122\1\123\1\2\2\0\2\2\1\124"+
    "\1\125\1\0\1\125\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u02e1\0\u02e1"+
    "\0\u03aa\0\u0192\0\u014f\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9"+
    "\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u014f"+
    "\0\u014f\0\u0711\0\u0754\0\u0797\0\u02e1\0\u014f\0\u014f\0\u014f"+
    "\0\u07da\0\u014f\0\u014f\0\u014f\0\u014f\0\u081d\0\u0860\0\u08a3"+
    "\0\u014f\0\u08e6\0\u014f\0\u014f\0\u014f\0\u014f\0\u0929\0\u096c"+
    "\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u014f\0\u0b41"+
    "\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u014f\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0192\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\u0fb4\0\u0f71\0\u014f\0\u0ff7\0\u014f\0\u103a"+
    "\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252"+
    "\0\u1295\0\u0192\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u02e1\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\u1576\0\u02e1\0\u15b9\0\u014f\0\u014f\0\u15fc\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\u096c\0\u09f2\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u19a6\0\u02e1\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1af5\0\u1b38"+
    "\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u0192\0\u0192\0\u0e65"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f"+
    "\0\u1ee2\0\u1f25\0\u0192\0\u1f68\0\u1fab\0\u1fee\0\u0192\0\u2031"+
    "\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249"+
    "\0\u228c\0\u22cf\0\u2312\0\u2355\0\u0192\0\u0192\0\u15b9\0\u2398"+
    "\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24a4\0\u24e7\0\u252a\0\u256d"+
    "\0\u25b0\0\u15fc\0\u163f\0\u16c5\0\u1708\0\u174b\0\u178e\0\u1814"+
    "\0\u1857\0\u18dd\0\u19a6\0\u19e9\0\u014f\0\u25f3\0\u0192\0\u2636"+
    "\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u0192\0\u280b"+
    "\0\u0192\0\u284e\0\u0192\0\u2891\0\u28d4\0\u0192\0\u2917\0\u295a"+
    "\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u0192\0\u2aec\0\u2b2f"+
    "\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47"+
    "\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u0192\0\u2e96\0\u0192\0\u0192"+
    "\0\u2ed9\0\u2f1c\0\u2f5f\0\u0192\0\u0192\0\u2fa2\0\u0192\0\u2fe5"+
    "\0\u3028\0\u0192\0\u0192\0\u306b\0\u30ae\0\u0192\0\u30f1\0\u3134"+
    "\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c"+
    "\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u0192\0\u3521"+
    "\0\u0192\0\u0192\0\u3564\0\u0192\0\u35a7\0\u35ea\0\u362d\0\u3670"+
    "\0\u36b3\0\u36f6\0\u3739\0\u0192\0\u0192\0\u377c\0\u37bf\0\u3802"+
    "\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u0192\0\u0192\0\u3994"+
    "\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u0192"+
    "\0\u0192\0\u0192\0\u0192\0\u3bac\0\u3bef\0\u3c32\0\u3c75\0\u3cb8"+
    "\0\u0192\0\u014f\0\u3cfb\0\u0192\0\u3d3e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\10\1\7\2\11\1\7\1\12\1\7"+
    "\1\13\2\14\1\7\1\15\1\16\1\14\1\17\1\14"+
    "\1\20\1\14\1\21\1\14\1\7\1\6\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\7\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\7\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\14\1\45\1\46\1\47\1\50"+
    "\1\51\2\23\1\52\1\53\1\54\1\55\1\7\1\56"+
    "\1\7\1\57\1\60\2\7\1\61\1\6\2\7\1\10"+
    "\1\7\2\11\1\7\1\12\1\7\1\13\2\14\1\7"+
    "\1\15\1\16\1\14\1\17\1\14\1\20\1\14\1\21"+
    "\1\14\1\7\1\6\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\7\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\7\1\37\1\40\1\41\1\62\1\43\1\44"+
    "\1\14\1\45\1\63\1\64\1\65\1\51\2\23\1\52"+
    "\1\53\1\54\1\55\1\7\1\56\1\7\1\57\1\60"+
    "\2\7\1\61\25\66\1\67\4\66\1\70\31\66\1\71"+
    "\2\70\1\52\13\66\22\72\1\73\2\72\1\74\77\72"+
    "\1\75\2\72\1\74\55\72\104\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\15\7\13\0"+
    "\1\7\5\0\7\7\2\0\2\77\1\100\1\101\1\102"+
    "\1\100\1\0\1\103\2\104\2\0\3\105\64\0\2\77"+
    "\1\11\1\0\2\11\1\0\1\103\2\104\2\0\3\105"+
    "\66\0\1\106\1\0\2\106\75\0\1\7\1\107\1\7"+
    "\1\110\3\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\15\7\13\0\1\7\5\0\7\7\14\0"+
    "\2\14\3\0\7\14\25\0\5\14\23\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\1\7"+
    "\1\111\4\7\1\112\6\7\13\0\1\7\5\0\1\7"+
    "\1\113\5\7\2\0\7\7\1\0\1\7\1\114\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\15\7\13\0\1\7"+
    "\5\0\1\7\1\115\5\7\14\0\2\14\3\0\2\14"+
    "\1\116\2\14\1\117\1\14\25\0\5\14\22\0\1\120"+
    "\2\121\1\120\1\121\2\120\1\121\1\120\2\121\2\122"+
    "\3\121\4\122\1\123\1\122\1\124\1\121\1\120\1\121"+
    "\1\0\1\125\1\120\15\121\2\120\5\122\3\120\1\0"+
    "\6\120\7\121\1\120\24\25\1\126\5\25\1\0\1\25"+
    "\1\127\27\25\1\0\16\25\1\0\1\7\1\130\5\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\1\7\1\131\13\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\15\7\13\0\1\7\5\0\1\132\6\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\3\7\1\133\3\7\1\134\1\7\1\135\3\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\1\7"+
    "\1\136\2\0\3\7\7\0\2\7\1\76\3\0\13\7"+
    "\1\137\1\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\1\7\1\140\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\13\7\1\141\1\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\1\7\1\142\1\7"+
    "\7\0\2\7\1\76\3\0\10\7\1\143\4\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\6\7\1\144\6\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\1\7\1\145"+
    "\13\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\1\7\1\146\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\15\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\3\7"+
    "\1\147\2\7\1\150\6\7\13\0\1\7\5\0\7\7"+
    "\14\0\2\14\3\0\7\14\25\0\1\14\1\151\3\14"+
    "\35\0\2\14\3\0\3\14\1\152\3\14\25\0\5\14"+
    "\35\0\1\14\1\153\3\0\3\14\1\154\3\14\25\0"+
    "\3\14\1\155\1\14\54\0\1\23\51\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\1\156\3\7\1\157\2\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\1\7\1\160\7\7\1\161\3\7\13\0\1\7"+
    "\5\0\7\7\2\0\7\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\1\7\1\162\13\7\13\0"+
    "\1\7\5\0\7\7\14\0\2\14\3\0\7\14\25\0"+
    "\1\14\1\163\3\14\44\0\1\164\2\0\1\117\55\0"+
    "\10\165\1\166\1\165\1\167\3\165\1\170\2\165\1\166"+
    "\1\165\1\166\5\165\1\171\3\165\1\172\6\165\1\173"+
    "\1\172\1\174\2\165\1\175\2\166\1\176\1\177\1\200"+
    "\1\165\4\166\1\201\2\165\1\202\23\165\1\166\1\165"+
    "\1\167\3\165\1\170\2\165\1\166\1\165\1\166\5\165"+
    "\1\171\1\203\2\165\1\172\6\165\1\173\1\172\1\174"+
    "\2\165\1\175\2\166\1\176\1\177\1\200\1\165\4\166"+
    "\1\201\2\165\1\202\13\165\22\204\1\205\2\204\1\206"+
    "\77\204\1\205\2\204\1\207\77\204\1\210\2\204\1\206"+
    "\77\204\1\205\2\204\1\211\55\204\1\0\7\7\1\0"+
    "\2\7\2\14\3\7\6\14\1\212\2\7\1\76\3\0"+
    "\15\7\2\0\5\14\4\0\1\7\5\0\7\7\2\0"+
    "\2\77\1\100\1\0\1\102\1\100\1\0\1\103\2\104"+
    "\2\0\3\105\66\0\1\213\1\0\3\213\1\0\2\213"+
    "\2\0\3\213\15\0\2\213\34\0\1\213\12\0\1\102"+
    "\1\0\2\102\1\0\1\103\2\104\2\0\3\105\64\0"+
    "\2\214\1\106\1\214\2\106\1\214\1\0\2\215\2\216"+
    "\3\214\6\216\1\217\1\214\1\0\1\214\3\0\15\214"+
    "\2\0\5\216\12\0\7\214\4\0\1\220\1\0\2\220"+
    "\4\0\2\221\71\0\1\106\1\0\2\106\2\0\2\104"+
    "\2\0\3\105\64\0\7\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\4\7\1\222\10\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\2\7\1\223\12\7"+
    "\13\0\1\7\5\0\7\7\2\0\1\7\1\224\5\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\15\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\5\7"+
    "\1\225\7\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\11\7\1\226\3\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\1\7\1\227\1\7\7\0"+
    "\2\7\1\76\3\0\15\7\13\0\1\7\5\0\7\7"+
    "\1\0\103\230\32\117\1\0\31\117\1\0\16\117\24\120"+
    "\1\231\5\120\1\0\1\125\30\120\1\0\17\120\7\121"+
    "\1\120\2\121\2\120\3\121\4\120\1\231\2\120\2\121"+
    "\1\232\1\0\1\125\1\120\15\121\12\120\1\0\1\121"+
    "\5\120\7\121\14\120\2\122\3\120\4\122\1\123\2\122"+
    "\3\120\1\0\1\125\20\120\5\122\3\120\1\0\31\120"+
    "\2\122\3\120\7\122\3\120\1\0\21\120\5\122\3\120"+
    "\1\0\16\120\32\25\1\0\31\25\1\0\16\25\1\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\1\7\1\233\13\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\2\7\1\234\1\7\1\235\10\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\4\7\1\236\10\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\6\7\1\237"+
    "\2\7\1\240\3\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\15\7\13\0\1\7\5\0\3\7\1\241\3\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\1\7\1\242\5\7\1\243\3\7\1\244"+
    "\1\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\1\7"+
    "\1\245\13\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\15\7\13\0\1\7\5\0\3\7\1\246\3\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\14\7\1\247\13\0\1\7\5\0\7\7\2\0"+
    "\1\7\1\250\5\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\15\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\15\7\13\0\1\7\5\0\3\7\1\251"+
    "\3\7\2\0\7\7\1\0\1\7\1\252\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\2\7\1\253\12\7\13\0\1\7"+
    "\5\0\7\7\2\0\7\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\2\7\1\254\7\7\1\255"+
    "\2\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\6\7"+
    "\1\256\6\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\2\7\1\257\12\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\15\7\13\0\1\7\5\0\2\7\1\260\4\7"+
    "\2\0\7\7\1\0\1\7\1\261\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\15\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\1\262\14\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\6\7\1\263\6\7\13\0\1\7\5\0"+
    "\1\7\1\264\5\7\2\0\1\7\1\265\5\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\11\7"+
    "\1\266\3\7\13\0\1\7\5\0\7\7\1\0\103\267"+
    "\2\0\1\270\1\0\1\271\141\0\1\272\40\0\2\273"+
    "\1\0\1\273\2\0\1\273\1\0\2\273\2\274\3\273"+
    "\6\274\1\275\1\273\1\0\1\273\3\0\15\273\2\0"+
    "\5\274\12\0\7\273\37\0\1\276\107\0\1\277\51\0"+
    "\1\300\133\0\1\301\114\0\1\166\50\0\1\166\73\0"+
    "\1\166\6\0\1\166\33\0\1\166\55\0\1\165\60\0"+
    "\1\166\1\0\1\302\3\0\1\303\2\0\1\166\1\0"+
    "\1\166\5\0\1\171\3\0\1\304\6\0\1\305\1\304"+
    "\1\306\2\0\1\307\2\166\1\176\1\310\1\311\1\0"+
    "\4\166\3\0\1\312\13\0\22\204\1\205\2\204\1\313"+
    "\77\204\1\314\2\204\1\206\55\204\22\0\1\315\105\0"+
    "\1\315\56\0\2\77\1\213\1\0\3\213\1\0\2\213"+
    "\2\0\3\213\15\0\2\213\34\0\1\213\10\0\7\214"+
    "\1\0\2\214\2\0\3\214\7\0\2\214\1\316\3\0"+
    "\15\214\13\0\1\214\5\0\7\214\2\0\7\214\1\0"+
    "\2\214\2\221\3\214\7\0\2\214\1\316\3\0\15\214"+
    "\13\0\1\214\5\0\7\214\14\0\2\216\3\0\7\216"+
    "\25\0\5\216\25\0\1\220\1\0\2\220\6\0\3\105"+
    "\66\0\1\220\1\0\2\220\75\0\7\7\1\0\1\7"+
    "\1\317\2\0\3\7\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\1\7"+
    "\1\320\2\0\3\7\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\4\7\1\321"+
    "\10\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\1\7"+
    "\1\322\13\7\13\0\1\7\5\0\7\7\1\0\32\120"+
    "\1\0\31\120\1\0\17\120\7\121\1\120\2\121\2\122"+
    "\3\121\4\122\1\123\1\122\1\124\2\121\1\232\1\0"+
    "\1\125\1\120\15\121\2\120\5\122\3\120\1\0\1\121"+
    "\5\120\7\121\1\120\1\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\4\7\1\323\10\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\1\324\14\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\1\7"+
    "\1\325\2\0\3\7\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\2\7\1\326"+
    "\12\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\4\7"+
    "\1\327\10\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\15\7\13\0\1\7\5\0\1\7\1\330\5\7\2\0"+
    "\7\7\1\0\1\7\1\331\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\15\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\6\7\1\332\6\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\1\7\1\333\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\15\7\13\0\1\7\5\0\7\7"+
    "\2\0\1\7\1\334\5\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\1\7\1\335\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\1\7\1\336\5\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\15\7\13\0\1\7"+
    "\5\0\7\7\2\0\1\7\1\337\5\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\15\7\13\0"+
    "\1\7\5\0\1\7\1\340\5\7\2\0\1\7\1\341"+
    "\5\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\15\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\1\342\14\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\13\7\1\343\1\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\13\7\1\344\1\7\13\0\1\7\5\0\7\7"+
    "\2\0\1\7\1\345\5\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\3\7\1\346\11\7\13\0\1\7"+
    "\5\0\7\7\2\0\7\7\1\0\1\7\1\347\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\15\7\13\0\1\7"+
    "\5\0\7\7\2\0\7\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\11\7\1\350\3\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\15\7\13\0\1\7"+
    "\5\0\5\7\1\351\1\7\2\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\15\7\13\0"+
    "\1\7\5\0\4\7\1\352\2\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\2\7"+
    "\1\353\12\7\13\0\1\7\5\0\7\7\42\0\1\354"+
    "\100\0\1\355\105\0\1\356\41\0\7\273\1\0\2\273"+
    "\2\0\3\273\7\0\2\273\1\357\3\0\15\273\13\0"+
    "\1\273\5\0\7\273\14\0\2\274\3\0\7\274\25\0"+
    "\5\274\61\0\1\360\55\0\1\361\137\0\1\362\72\0"+
    "\1\363\44\0\7\214\1\0\2\214\2\216\3\214\6\216"+
    "\1\217\2\214\1\316\3\0\15\214\2\0\5\216\4\0"+
    "\1\214\5\0\7\214\2\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\5\7\1\364\7\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\1\7"+
    "\1\365\2\0\3\7\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\7\7\2\0\1\7\1\366\5\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\15\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\4\7"+
    "\1\367\10\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\3\7\1\370\11\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\1\371\2\0\15\7\12\0\1\371\1\372\2\371\3\0"+
    "\7\7\2\0\7\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\11\7\1\373\3\7\13\0\1\7"+
    "\5\0\7\7\2\0\7\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\14\7\1\374\13\0\1\7"+
    "\5\0\7\7\2\0\7\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\2\7\1\375\12\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\1\7\1\376"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\15\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\11\7\1\377\3\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\6\7\1\u0100"+
    "\6\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\11\7"+
    "\1\u0101\3\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\2\7\1\u0102\7\0\2\7\1\76"+
    "\3\0\15\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\3\7\1\u0103\11\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\11\7\1\u0104\3\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\6\7\1\u0105\6\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\1\7\1\u0106\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\1\u0107\14\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\11\7\1\u0108\3\7\13\0\1\7"+
    "\5\0\7\7\2\0\7\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\1\7\1\u0109\13\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\1\7\1\u010a\13\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\1\7"+
    "\1\u010b\2\0\3\7\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\7\7\13\0\1\171\102\0\1\u010c"+
    "\126\0\1\u010d\45\0\7\273\1\0\2\273\2\274\3\273"+
    "\6\274\1\275\2\273\1\357\3\0\15\273\2\0\5\274"+
    "\4\0\1\273\5\0\7\273\36\0\1\363\47\0\1\u010e"+
    "\150\0\1\u010f\72\0\1\171\43\0\7\7\1\0\2\7"+
    "\2\0\2\7\1\u0110\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\7\7\2\0\1\7\1\u0111\5\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\15\7\13\0\1\7\5\0\7\7\33\0\1\371\2\0"+
    "\1\u0112\26\0\4\371\4\0\1\u0113\7\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\1\371\2\0"+
    "\1\u0114\14\7\12\0\1\371\1\372\2\371\3\0\1\7"+
    "\1\u0115\5\7\2\0\7\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\1\7\1\u0116\13\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\2\7\2\0"+
    "\2\7\1\u0117\7\0\2\7\1\76\3\0\15\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\1\u0118\14\7\13\0"+
    "\1\7\5\0\7\7\2\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\2\7\1\u0119\12\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\5\7\1\u011a"+
    "\7\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\11\7"+
    "\1\u011b\3\7\13\0\1\7\5\0\7\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\2\7\1\u011c\12\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\6\7\1\u011d\6\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\15\7\13\0\1\7\5\0\6\7\1\u011e"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\2\7\1\u011f\12\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\1\u0120\14\7\13\0\1\7\5\0"+
    "\7\7\43\0\1\u0121\42\0\1\u0122\117\0\1\171\126\0"+
    "\1\u0123\40\0\7\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\4\7\1\u0124\10\7\13\0\1\7"+
    "\5\0\7\7\2\0\7\7\1\0\2\7\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\7\7\1\u0125\5\7\13\0"+
    "\1\7\5\0\7\7\3\0\1\u0126\173\0\1\u0127\10\0"+
    "\1\7\1\u0128\5\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\15\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\15\7\13\0\1\7\5\0\1\u0129\6\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\1\u012a\14\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\6\7\1\u012b\6\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\1\7\1\u012c\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\2\7\2\0\2\7\1\u012d"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\1\7\1\u012e\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\1\7\1\u012f\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\2\7\1\u0130\12\7\13\0\1\7"+
    "\5\0\7\7\20\0\1\u0131\65\0\1\u0132\146\0\1\u0133"+
    "\72\0\1\u0134\141\0\1\u0135\6\0\7\7\1\0\2\7"+
    "\2\0\3\7\7\0\2\7\1\76\3\0\1\7\1\u0136"+
    "\13\7\13\0\1\7\5\0\7\7\2\0\7\7\1\0"+
    "\2\7\2\0\3\7\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\2\7\1\u0137\4\7\2\0\7\7"+
    "\1\0\2\7\2\0\3\7\7\0\2\7\1\76\3\0"+
    "\2\7\1\u0138\12\7\13\0\1\7\5\0\7\7\2\0"+
    "\7\7\1\0\2\7\2\0\3\7\7\0\2\7\1\76"+
    "\3\0\2\7\1\u0139\12\7\13\0\1\7\5\0\7\7"+
    "\2\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\4\7\1\u013a\10\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\1\7\1\u013b\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\1\7\1\u013c\2\0\3\7"+
    "\7\0\2\7\1\76\3\0\15\7\13\0\1\7\5\0"+
    "\7\7\42\0\1\171\105\0\1\171\50\0\1\u0131\131\0"+
    "\1\u013d\53\0\1\u013e\71\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\4\7\1\u013f\10\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\1\7"+
    "\1\u0140\2\0\3\7\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\7\7\2\0\7\7\1\0\2\7"+
    "\2\0\2\7\1\u0141\7\0\2\7\1\76\3\0\15\7"+
    "\13\0\1\7\5\0\7\7\42\0\1\u0142\76\0\1\u0143"+
    "\46\0\7\7\1\0\2\7\2\0\3\7\7\0\2\7"+
    "\1\76\3\0\4\7\1\u0144\10\7\13\0\1\7\5\0"+
    "\7\7\2\0\7\7\1\0\2\7\2\0\3\7\7\0"+
    "\2\7\1\76\3\0\1\u0145\14\7\13\0\1\7\5\0"+
    "\7\7\40\0\1\u0142\44\0\7\7\1\0\2\7\2\0"+
    "\3\7\7\0\2\7\1\76\3\0\2\7\1\u0144\12\7"+
    "\13\0\1\7\5\0\7\7\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15745];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\3\11\1\1\11\14\1\2\11"+
    "\4\1\3\11\1\1\4\11\3\1\1\11\1\1\4\11"+
    "\1\1\2\3\5\1\1\11\1\3\1\0\1\2\1\1"+
    "\1\0\1\11\10\1\1\7\1\1\1\0\3\1\1\0"+
    "\1\11\1\1\1\11\34\1\1\7\2\15\14\5\1\7"+
    "\3\0\3\1\1\0\1\1\3\5\1\0\1\1\1\0"+
    "\6\1\1\5\36\1\1\5\3\0\2\5\16\0\2\1"+
    "\1\11\1\5\6\1\1\3\26\1\3\0\1\5\4\0"+
    "\5\1\1\0\22\1\4\0\2\1\2\0\15\1\3\0"+
    "\2\1\2\0\11\1\5\0\7\1\2\0\3\1\1\15"+
    "\1\0\1\5\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Stack for braces
    private Stack <IElementType> braceStack = new Stack<IElementType>();

    // Stack for comment positions
    private Stack <IElementType> commentStack = new Stack<IElementType>();

    /* Defines, is in this section new line is whitespace or not? */
    private boolean newLineAllowed(){
      if (braceStack.isEmpty()){
        return true;
      } else {
        if (ScalaTokenTypes.tLBRACE.equals(braceStack.peek())){
          return true;
        } else {
          return false;
        }
      }
    }

    /* Changes state depending on brace stack */
    private void changeState(){
      if (braceStack.isEmpty()) {
        yybegin(YYINITIAL);
      } else if ( tLPARENTHIS.equals(braceStack.peek()) || tLSQBRACKET.equals(braceStack.peek()) ){
        yybegin(NEW_LINE_DEPRECATED);
      } else {
        yybegin(NEW_LINE_ALLOWED);
      }
    }

    /* removes brace from stack */
    private IElementType popBraceStack(IElementType elem){
     if (
          !braceStack.isEmpty() &&
          (
            (elem.equals(tRSQBRACKET) && tLSQBRACKET.equals(braceStack.peek())) ||
            (elem.equals(tRBRACE) && tLBRACE.equals(braceStack.peek())) ||
            (elem.equals(tRPARENTHIS) && tLPARENTHIS.equals(braceStack.peek()))
          )
        ) {
          braceStack.pop();
          return process(elem);
        } else if (elem.equals(tFUNTYPE)) {
          if (!braceStack.isEmpty() && kCASE.equals(braceStack.peek())) {
            braceStack.pop();
          }
          return process(elem);
        } else {
          return tWRONG;
        }
    }

    private IElementType process(IElementType type){
        return type;
    }

    private void processNewLine(){
      yybegin(PROCESS_NEW_LINE);
    }



  public _ScalaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1786) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 65: 
          { return process(kCATCH);
          }
        case 86: break;
        case 43: 
          { changeState();
                                                    return process(tNON_SIGNIFICANT_NEWLINE);
          }
        case 87: break;
        case 67: 
          { return process(kTRAIT);
          }
        case 88: break;
        case 84: 
          { return process(kPROTECTED);
          }
        case 89: break;
        case 36: 
          { return process(tLOWER_BOUND);
          }
        case 90: break;
        case 6: 
          { return process(tCOLON);
          }
        case 91: break;
        case 76: 
          { return process(kEXTENDS);
          }
        case 92: break;
        case 58: 
          { //processNewLine();
                                            return process(kTYPE);
          }
        case 93: break;
        case 31: 
          { return process(tCOMMENT);
          }
        case 94: break;
        case 52: 
          { return process(kVAR);
          }
        case 95: break;
        case 62: 
          { processNewLine();
                                            return process(kFALSE);
          }
        case 96: break;
        case 25: 
          { yypushback(yylength());
                                                    changeState();
          }
        case 97: break;
        case 11: 
          { return process(tSEMICOLON);
          }
        case 98: break;
        case 15: 
          { processNewLine();
                                            return process(tRSQBRACKET);
          }
        case 99: break;
        case 75: 
          { return process(kOBJECT);
          }
        case 100: break;
        case 46: 
          { IElementType elem = commentStack.pop();
                                                  if (commentStack.isEmpty()) {
                                                    yybegin(PROCESS_NEW_LINE);
                                                  }
                                                  if (!ScalaTokenTypes.tLBRACE.equals(elem)) {
                                                    return process(ScalaTokenTypes.tDOC_COMMENT_END);
                                                  } else {
                                                   return process(ScalaTokenTypes.tCOMMENT_END);
                                                  }
          }
        case 101: break;
        case 40: 
          { return popBraceStack(tFUNTYPE);
          }
        case 102: break;
        case 1: 
          { return process(tSTUB);
          }
        case 103: break;
        case 61: 
          { return process(kWITH);
          }
        case 104: break;
        case 22: 
          { processNewLine();
                                            return popBraceStack(tRPARENTHIS);
          }
        case 105: break;
        case 38: 
          { return process(tUPPER_BOUND);
          }
        case 106: break;
        case 44: 
          { IElementType elem = commentStack.pop();
                                                  if (commentStack.isEmpty()) {
                                                    changeState();
                                                  }
                                                  if (!ScalaTokenTypes.tLBRACE.equals(elem)) {
                                                    return process(ScalaTokenTypes.tDOC_COMMENT_END);
                                                  } else {
                                                   return process(ScalaTokenTypes.tCOMMENT_END);
                                                  }
          }
        case 107: break;
        case 4: 
          { return process(tDOT);
          }
        case 108: break;
        case 70: 
          { return process(kMATCH);
          }
        case 109: break;
        case 27: 
          { while (!commentStack.isEmpty()){
                                                    commentStack.pop();
                                                  }
                                                  return process(ScalaTokenTypes.tCOMMENT_CONTENT);
          }
        case 110: break;
        case 10: 
          { return process(tCOMMA);
          }
        case 111: break;
        case 66: 
          { return process(kTHROW);
          }
        case 112: break;
        case 51: 
          { return process(kVAL);
          }
        case 113: break;
        case 79: 
          { return process(kPRIVATE);
          }
        case 114: break;
        case 33: 
          { processNewLine();
                                            return process(tCHAR);
          }
        case 115: break;
        case 77: 
          { return process(kFINALLY);
          }
        case 116: break;
        case 32: 
          { processNewLine();
                                            return process(tSYMBOL);
          }
        case 117: break;
        case 17: 
          { return process(tWHITE_SPACE_IN_LINE);
          }
        case 118: break;
        case 72: 
          { return process(kSEALED);
          }
        case 119: break;
        case 45: 
          { commentStack.push(ScalaTokenTypes.tLBRACE);
                                                  return process(ScalaTokenTypes.tCOMMENT_BEGIN);
          }
        case 120: break;
        case 3: 
          { processNewLine();
                                            return process(tINTEGER);
          }
        case 121: break;
        case 64: 
          { return process(kCLASS);
          }
        case 122: break;
        case 8: 
          { return process(tNON_SIGNIFICANT_NEWLINE);
          }
        case 123: break;
        case 83: 
          { return process(kOVERRIDE);
          }
        case 124: break;
        case 78: 
          { return process(kPACKAGE);
          }
        case 125: break;
        case 23: 
          { processNewLine();
                                            return popBraceStack(tRSQBRACKET);
          }
        case 126: break;
        case 29: 
          { return process(kDO);
          }
        case 127: break;
        case 47: 
          { return process(kFOR);
          }
        case 128: break;
        case 7: 
          { processNewLine();
                                            return process(tUNDER);
          }
        case 129: break;
        case 42: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tNON_SIGNIFICANT_NEWLINE);
                                                    }
          }
        case 130: break;
        case 9: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSTRING);
          }
        case 131: break;
        case 37: 
          { return process(tCHOOSE);
          }
        case 132: break;
        case 69: 
          { return process(kYIELD);
          }
        case 133: break;
        case 59: 
          { processNewLine();
                                            return process(kTRUE);
          }
        case 134: break;
        case 13: 
          { return process(tAT);
          }
        case 135: break;
        case 50: 
          { return process(kNEW);
          }
        case 136: break;
        case 82: 
          { return process(kREQUIRES);
          }
        case 137: break;
        case 53: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tNON_SIGNIFICANT_NEWLINE);
                                                    }
          }
        case 138: break;
        case 20: 
          { braceStack.push(tLPARENTHIS);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLPARENTHIS);
          }
        case 139: break;
        case 18: 
          { braceStack.push(tLSQBRACKET);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLSQBRACKET);
          }
        case 140: break;
        case 28: 
          { processNewLine();
                                            return process(tFLOAT);
          }
        case 141: break;
        case 24: 
          { processNewLine();
                                            return popBraceStack(tRBRACE);
          }
        case 142: break;
        case 39: 
          { return process(tVIEW);
          }
        case 143: break;
        case 81: 
          { return process(kIMPLICIT);
          }
        case 144: break;
        case 57: 
          { processNewLine();
                                            return process(kTHIS);
          }
        case 145: break;
        case 60: 
          { processNewLine();
                                            return process(kNULL);
          }
        case 146: break;
        case 74: 
          { processNewLine();
                                            return process(kRETURN);
          }
        case 147: break;
        case 41: 
          { yybegin(IN_BLOCK_COMMENT_STATE_NEW_LINE);
                                                  commentStack.push(ScalaTokenTypes.tLBRACE);
                                                  return process(ScalaTokenTypes.tCOMMENT_BEGIN);
          }
        case 148: break;
        case 63: 
          { return process(kFINAL);
          }
        case 149: break;
        case 49: 
          { return process(kTRY);
          }
        case 150: break;
        case 5: 
          { return process(tINNER_CLASS);
          }
        case 151: break;
        case 30: 
          { yybegin(IN_BLOCK_COMMENT_STATE);
                                                  commentStack.push(ScalaTokenTypes.tLBRACE);
                                                  return process(ScalaTokenTypes.tCOMMENT_BEGIN);
          }
        case 152: break;
        case 68: 
          { return process(kSUPER);
          }
        case 153: break;
        case 85: 
          { return process(kCASE);
          }
        case 154: break;
        case 2: 
          { processNewLine();
                                            return process(tIDENTIFIER);
          }
        case 155: break;
        case 12: 
          { return process(tASSIGN);
          }
        case 156: break;
        case 21: 
          { return process(tFUNTYPE_ASCII);
          }
        case 157: break;
        case 73: 
          { return process(kIMPORT);
          }
        case 158: break;
        case 16: 
          { processNewLine();
                                            return process(tRBRACE);
          }
        case 159: break;
        case 80: 
          { return process(kABSTRACT);
          }
        case 160: break;
        case 26: 
          { changeState();
                                                    return process(tLINE_TERMINATOR);
          }
        case 161: break;
        case 34: 
          { return process(kIF);
          }
        case 162: break;
        case 56: 
          { braceStack.push(kCASE);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(kCASE);
          }
        case 163: break;
        case 14: 
          { processNewLine();
                                            return process(tRPARENTHIS);
          }
        case 164: break;
        case 19: 
          { braceStack.push(tLBRACE);
                                            yybegin(NEW_LINE_ALLOWED);
                                            return process(tLBRACE);
          }
        case 165: break;
        case 35: 
          { return process(tFUNTYPE);
          }
        case 166: break;
        case 71: 
          { return process(kWHILE);
          }
        case 167: break;
        case 48: 
          { return process(kDEF);
          }
        case 168: break;
        case 55: 
          { return process(kELSE);
          }
        case 169: break;
        case 54: 
          { yypushback(2);
                                                  return process(ScalaTokenTypes.tCOMMENT_CONTENT);
          }
        case 170: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
