/* The following code was generated by JFlex 1.4.1 on 26.09.06 18:24 */

package org.jetbrains.plugins.scala.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 26.09.06 18:24 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaLexer implements FlexLexer, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LINE_COMMENT_STATE = 2;
  public static final int IN_BLOCK_COMMENT_STATE = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\32\1\0\1\0\1\33\16\0\4\0\1\0\3\0"+
    "\1\0\2\0\1\0\2\0\1\35\4\0\1\34\1\0\1\0\5\0"+
    "\1\0\1\0\1\0\7\0\3\0\1\0\7\0\1\0\1\0\1\0"+
    "\5\0\1\0\5\0\1\0\4\0\1\0\1\0\1\1\1\2\1\6"+
    "\1\12\1\7\1\13\1\30\1\10\1\17\1\25\1\27\1\11\1\21"+
    "\1\16\1\14\1\22\1\31\1\5\1\3\1\4\1\24\1\26\1\23"+
    "\1\15\1\20\1\0\1\0\1\0\2\0\41\0\2\0\4\0\4\0"+
    "\1\0\2\0\1\0\7\0\1\0\4\0\1\0\5\0\27\0\1\0"+
    "\37\0\1\0\u013f\0\31\0\162\0\4\0\14\0\16\0\5\0\11\0"+
    "\1\0\21\0\130\0\5\0\23\0\12\0\1\0\13\0\1\0\1\0"+
    "\3\0\1\0\1\0\1\0\24\0\1\0\54\0\1\0\46\0\1\0"+
    "\5\0\4\0\202\0\1\0\4\0\3\0\105\0\1\0\46\0\2\0"+
    "\2\0\6\0\20\0\41\0\46\0\2\0\1\0\7\0\47\0\11\0"+
    "\21\0\1\0\27\0\1\0\3\0\1\0\1\0\1\0\2\0\1\0"+
    "\1\0\13\0\33\0\5\0\3\0\15\0\4\0\14\0\6\0\13\0"+
    "\32\0\5\0\13\0\16\0\7\0\12\0\4\0\2\0\1\0\143\0"+
    "\1\0\1\0\10\0\1\0\6\0\2\0\2\0\1\0\4\0\2\0"+
    "\12\0\3\0\2\0\1\0\17\0\1\0\1\0\1\0\36\0\33\0"+
    "\2\0\3\0\60\0\46\0\13\0\1\0\u014f\0\3\0\66\0\2\0"+
    "\1\0\1\0\20\0\2\0\1\0\4\0\3\0\12\0\2\0\2\0"+
    "\12\0\21\0\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0"+
    "\7\0\1\0\1\0\3\0\4\0\2\0\1\0\1\0\7\0\2\0"+
    "\2\0\2\0\3\0\11\0\1\0\4\0\2\0\1\0\3\0\2\0"+
    "\2\0\12\0\4\0\15\0\3\0\1\0\6\0\4\0\2\0\2\0"+
    "\26\0\1\0\7\0\1\0\2\0\1\0\2\0\1\0\2\0\2\0"+
    "\1\0\1\0\5\0\4\0\2\0\2\0\3\0\13\0\4\0\1\0"+
    "\1\0\7\0\14\0\3\0\14\0\3\0\1\0\11\0\1\0\3\0"+
    "\1\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0\1\0"+
    "\1\0\10\0\1\0\3\0\1\0\3\0\2\0\1\0\17\0\2\0"+
    "\2\0\2\0\12\0\1\0\1\0\17\0\3\0\1\0\10\0\2\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0"+
    "\1\0\1\0\6\0\3\0\2\0\2\0\3\0\10\0\2\0\4\0"+
    "\2\0\1\0\3\0\4\0\12\0\1\0\1\0\20\0\1\0\1\0"+
    "\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0\1\0"+
    "\1\0\2\0\3\0\2\0\3\0\3\0\3\0\10\0\1\0\3\0"+
    "\4\0\5\0\3\0\3\0\1\0\4\0\11\0\1\0\17\0\11\0"+
    "\11\0\1\0\7\0\3\0\1\0\10\0\1\0\3\0\1\0\27\0"+
    "\1\0\12\0\1\0\5\0\4\0\7\0\1\0\3\0\1\0\4\0"+
    "\7\0\2\0\11\0\2\0\4\0\12\0\22\0\2\0\1\0\10\0"+
    "\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0\2\0\1\0"+
    "\1\0\7\0\1\0\3\0\1\0\4\0\7\0\2\0\7\0\1\0"+
    "\1\0\2\0\4\0\12\0\22\0\2\0\1\0\10\0\1\0\3\0"+
    "\1\0\27\0\1\0\20\0\4\0\6\0\2\0\3\0\1\0\4\0"+
    "\11\0\1\0\10\0\2\0\4\0\12\0\22\0\2\0\1\0\22\0"+
    "\3\0\30\0\1\0\11\0\1\0\1\0\2\0\7\0\3\0\1\0"+
    "\4\0\6\0\1\0\1\0\1\0\10\0\22\0\2\0\15\0\60\0"+
    "\1\0\2\0\7\0\4\0\10\0\10\0\1\0\12\0\47\0\2\0"+
    "\1\0\1\0\2\0\2\0\1\0\1\0\2\0\1\0\6\0\4\0"+
    "\1\0\7\0\1\0\3\0\1\0\1\0\1\0\1\0\2\0\2\0"+
    "\1\0\4\0\1\0\2\0\6\0\1\0\2\0\1\0\2\0\5\0"+
    "\1\0\1\0\1\0\6\0\2\0\12\0\2\0\2\0\42\0\1\0"+
    "\27\0\2\0\6\0\12\0\13\0\1\0\1\0\1\0\1\0\1\0"+
    "\4\0\2\0\10\0\1\0\42\0\6\0\24\0\1\0\2\0\4\0"+
    "\4\0\10\0\1\0\44\0\11\0\1\0\71\0\42\0\1\0\5\0"+
    "\1\0\2\0\1\0\7\0\3\0\4\0\6\0\12\0\6\0\6\0"+
    "\4\0\106\0\46\0\12\0\51\0\7\0\132\0\5\0\104\0\5\0"+
    "\122\0\6\0\7\0\1\0\77\0\1\0\1\0\1\0\4\0\2\0"+
    "\7\0\1\0\1\0\1\0\4\0\2\0\47\0\1\0\1\0\1\0"+
    "\4\0\2\0\37\0\1\0\1\0\1\0\4\0\2\0\7\0\1\0"+
    "\1\0\1\0\4\0\2\0\7\0\1\0\7\0\1\0\27\0\1\0"+
    "\37\0\1\0\1\0\1\0\4\0\2\0\7\0\1\0\47\0\1\0"+
    "\23\0\16\0\11\0\56\0\125\0\14\0\u026c\0\2\0\10\0\12\0"+
    "\32\0\5\0\113\0\3\0\3\0\17\0\15\0\1\0\4\0\3\0"+
    "\13\0\22\0\3\0\13\0\22\0\2\0\14\0\15\0\1\0\3\0"+
    "\1\0\2\0\14\0\64\0\40\0\3\0\1\0\3\0\2\0\1\0"+
    "\2\0\12\0\41\0\3\0\2\0\12\0\6\0\130\0\10\0\51\0"+
    "\1\0\126\0\35\0\3\0\14\0\4\0\14\0\12\0\12\0\36\0"+
    "\2\0\5\0\u038b\0\154\0\224\0\234\0\4\0\132\0\6\0\26\0"+
    "\2\0\6\0\2\0\46\0\2\0\6\0\2\0\10\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\37\0\2\0\65\0\1\0\7\0"+
    "\1\0\1\0\3\0\3\0\1\0\7\0\3\0\4\0\2\0\6\0"+
    "\4\0\15\0\5\0\3\0\1\0\7\0\17\0\4\0\32\0\5\0"+
    "\20\0\2\0\23\0\1\0\13\0\4\0\6\0\6\0\1\0\1\0"+
    "\15\0\1\0\40\0\22\0\36\0\15\0\4\0\1\0\3\0\6\0"+
    "\27\0\1\0\4\0\1\0\2\0\12\0\1\0\1\0\3\0\5\0"+
    "\6\0\1\0\1\0\1\0\1\0\1\0\1\0\4\0\1\0\3\0"+
    "\1\0\7\0\3\0\3\0\5\0\5\0\26\0\44\0\u0e81\0\3\0"+
    "\31\0\11\0\6\0\1\0\5\0\2\0\5\0\4\0\126\0\2\0"+
    "\2\0\2\0\3\0\1\0\137\0\5\0\50\0\4\0\136\0\21\0"+
    "\30\0\70\0\20\0\u0200\0\u19b6\0\112\0\u51a6\0\132\0\u048d\0\u0773\0"+
    "\u2ba4\0\u215c\0\u012e\0\2\0\73\0\225\0\7\0\14\0\5\0\5\0"+
    "\1\0\1\0\12\0\1\0\15\0\1\0\5\0\1\0\1\0\1\0"+
    "\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0\100\0\2\0"+
    "\66\0\50\0\15\0\3\0\20\0\20\0\4\0\17\0\2\0\30\0"+
    "\3\0\31\0\1\0\6\0\5\0\1\0\207\0\2\0\1\0\4\0"+
    "\1\0\13\0\12\0\7\0\32\0\4\0\1\0\1\0\32\0\12\0"+
    "\132\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0\3\0"+
    "\2\0\3\0\2\0\22\0\3\0\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\23\1\3\2\2\3\14\0\1\4\7\0\1\5"+
    "\7\0\1\6\1\7\4\0\1\10\13\0\1\11\1\0"+
    "\1\12\3\0\1\13\10\0\1\14\1\15\4\0\1\16"+
    "\1\0\1\17\1\20\2\0\1\21\2\0\1\22\5\0"+
    "\1\23\13\0\1\24\1\25\1\26\2\0\1\27\1\30"+
    "\1\0\1\31\1\32\4\0\1\33\1\34\3\0\1\35"+
    "\1\36\1\0\1\37\1\40\3\0\1\41\2\0\1\42"+
    "\5\0\1\43\1\44\2\0\1\45\1\0\1\46\1\47"+
    "\1\50\1\51\1\52\1\0\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\322"+
    "\0\360\0\u010e\0\u012c\0\u014a\0\u0168\0\u0186\0\u01a4\0\u01c2"+
    "\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276\0\132\0\u0294"+
    "\0\u02b2\0\132\0\u02d0\0\u02ee\0\u030c\0\u032a\0\u0348\0\u0366"+
    "\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a\0\u0438\0\132"+
    "\0\u0456\0\u0474\0\u0492\0\u04b0\0\u04ce\0\u04ec\0\u050a\0\132"+
    "\0\u0528\0\u0546\0\u0564\0\u0582\0\u05a0\0\u05be\0\u05dc\0\132"+
    "\0\132\0\u05fa\0\u0618\0\u0636\0\u0654\0\132\0\u0672\0\u0690"+
    "\0\u06ae\0\u06cc\0\u06ea\0\u0708\0\u0726\0\u0744\0\u0762\0\u0780"+
    "\0\u079e\0\132\0\u07bc\0\132\0\u07da\0\u07f8\0\u0816\0\132"+
    "\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac\0\u08ca\0\u08e8\0\u0906"+
    "\0\132\0\132\0\u0924\0\u0942\0\u0960\0\u097e\0\132\0\u099c"+
    "\0\132\0\132\0\u09ba\0\u09d8\0\132\0\u09f6\0\u0a14\0\132"+
    "\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c\0\u0aaa\0\132\0\u0ac8\0\u0ae6"+
    "\0\u0b04\0\u0b22\0\u0b40\0\u0b5e\0\u0b7c\0\u0b9a\0\u0bb8\0\u0bd6"+
    "\0\u0bf4\0\132\0\132\0\132\0\u0c12\0\u0c30\0\132\0\132"+
    "\0\u0c4e\0\132\0\u0c6c\0\u0c8a\0\u0ca8\0\u0cc6\0\u0ce4\0\132"+
    "\0\132\0\u0d02\0\u0d20\0\u0d3e\0\132\0\132\0\u0d5c\0\132"+
    "\0\132\0\u0d7a\0\u0d98\0\u0db6\0\132\0\u0dd4\0\u0df2\0\132"+
    "\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88\0\132\0\132\0\u0ea6"+
    "\0\u0ec4\0\132\0\u0ee2\0\132\0\132\0\132\0\132\0\132"+
    "\0\u0f00\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\2\4\1\13\1\14\1\15\1\4\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\2\4\1\24\4\4\1\25\1\26"+
    "\1\4\33\27\1\30\1\27\1\31\32\27\1\32\1\33"+
    "\2\27\40\0\1\34\42\0\1\35\14\0\1\36\16\0"+
    "\1\37\2\0\1\40\7\0\1\41\24\0\1\42\27\0"+
    "\1\43\7\0\1\44\35\0\1\45\3\0\1\46\27\0"+
    "\1\47\4\0\1\50\22\0\1\51\12\0\1\52\2\0"+
    "\1\53\20\0\1\54\23\0\1\55\16\0\1\56\14\0"+
    "\1\57\24\0\1\60\5\0\1\61\33\0\1\62\17\0"+
    "\1\63\35\0\1\64\3\0\1\65\40\0\1\66\26\0"+
    "\1\67\66\0\1\4\37\0\1\70\1\71\32\0\1\27"+
    "\37\0\1\32\33\0\1\32\6\0\1\72\33\0\1\73"+
    "\56\0\1\74\14\0\1\75\16\0\1\76\3\0\1\77"+
    "\16\0\1\100\11\0\1\101\40\0\1\102\17\0\1\103"+
    "\24\0\1\104\7\0\1\105\1\106\32\0\1\107\37\0"+
    "\1\110\36\0\1\111\44\0\1\112\33\0\1\113\31\0"+
    "\1\114\46\0\1\115\44\0\1\116\17\0\1\117\51\0"+
    "\1\120\23\0\1\121\46\0\1\122\22\0\1\123\32\0"+
    "\1\124\37\0\1\125\43\0\1\126\2\0\1\127\35\0"+
    "\1\130\23\0\1\131\3\0\1\132\30\0\1\133\42\0"+
    "\1\134\33\0\1\135\45\0\1\136\25\0\1\137\42\0"+
    "\1\140\24\0\1\141\41\0\1\142\52\0\1\143\35\0"+
    "\1\144\20\0\1\145\34\0\1\146\32\0\1\147\41\0"+
    "\1\150\35\0\1\151\31\0\1\152\33\0\1\153\43\0"+
    "\1\154\33\0\1\155\41\0\1\156\35\0\1\157\2\0"+
    "\1\160\32\0\1\161\32\0\1\162\56\0\1\163\12\0"+
    "\1\164\57\0\1\165\13\0\1\166\4\0\1\167\31\0"+
    "\1\170\37\0\1\171\33\0\1\172\34\0\1\173\54\0"+
    "\1\174\17\0\1\175\47\0\1\176\26\0\1\177\30\0"+
    "\1\200\50\0\1\201\26\0\1\202\37\0\1\203\32\0"+
    "\1\204\34\0\1\205\47\0\1\206\23\0\1\207\42\0"+
    "\1\210\33\0\1\211\26\0\1\212\43\0\1\213\27\0"+
    "\1\214\44\0\1\215\34\0\1\216\27\0\1\217\46\0"+
    "\1\220\41\0\1\221\24\0\1\222\42\0\1\223\34\0"+
    "\1\224\30\0\1\225\50\0\1\226\24\0\1\227\33\0"+
    "\1\230\61\0\1\231\13\0\1\232\33\0\1\233\37\0"+
    "\1\234\36\0\1\235\31\0\1\236\52\0\1\237\27\0"+
    "\1\240\42\0\1\241\25\0\1\242\32\0\1\243\40\0"+
    "\1\244\32\0\1\245\34\0\1\246\41\0\1\247\32\0"+
    "\1\250\40\0\1\251\40\0\1\252\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3870];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\22\1\1\11\2\1\1\11\1\1\14\0"+
    "\1\11\7\0\1\11\7\0\2\11\4\0\1\11\13\0"+
    "\1\11\1\0\1\11\3\0\1\11\10\0\2\11\4\0"+
    "\1\11\1\0\2\11\2\0\1\11\2\0\1\11\5\0"+
    "\1\11\13\0\3\11\2\0\2\11\1\0\1\11\1\1"+
    "\4\0\2\11\3\0\2\11\1\0\2\11\3\0\1\11"+
    "\2\0\1\11\5\0\2\11\2\0\1\11\1\0\5\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private IElementType process(IElementType type){
        return type;
    }



  public _ScalaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1752) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return process(kCASE);
          }
        case 44: break;
        case 16: 
          { return process(kTYPE);
          }
        case 45: break;
        case 18: 
          { return process(kELSE);
          }
        case 46: break;
        case 35: 
          { return process(kEXTENDS);
          }
        case 47: break;
        case 21: 
          { return process(kTRAIT);
          }
        case 48: break;
        case 25: 
          { return process(kFALSE);
          }
        case 49: break;
        case 20: 
          { return process(kSUPER);
          }
        case 50: break;
        case 13: 
          { return process(kVAL);
          }
        case 51: break;
        case 32: 
          { return process(kRETURN);
          }
        case 52: break;
        case 8: 
          { return process(kTRY);
          }
        case 53: break;
        case 24: 
          { return process(kCLASS);
          }
        case 54: break;
        case 1: 
          { return tSTUB;
          }
        case 55: break;
        case 15: 
          { return process(kTHIS);
          }
        case 56: break;
        case 39: 
          { return process(kABSTRACT);
          }
        case 57: break;
        case 4: 
          { return process(kDO);
          }
        case 58: break;
        case 33: 
          { return process(kOBJECT);
          }
        case 59: break;
        case 5: 
          { return process(kIF);
          }
        case 60: break;
        case 34: 
          { return process(kIMPORT);
          }
        case 61: break;
        case 6: 
          { yybegin(IN_LINE_COMMENT_STATE);
                                            return tCOMMENT;
          }
        case 62: break;
        case 36: 
          { return process(kFINALLY);
          }
        case 63: break;
        case 22: 
          { return process(kTHROW);
          }
        case 64: break;
        case 9: 
          { return process(kDEF);
          }
        case 65: break;
        case 37: 
          { return process(kPACKAGE);
          }
        case 66: break;
        case 27: 
          { return process(kYIELD);
          }
        case 67: break;
        case 12: 
          { return process(kVAR);
          }
        case 68: break;
        case 3: 
          { yybegin(YYINITIAL);
                                            return tCOMMENT;
          }
        case 69: break;
        case 26: 
          { return process(kFINAL);
          }
        case 70: break;
        case 7: 
          { yybegin(IN_BLOCK_COMMENT_STATE);
                                            return tCOMMENT;
          }
        case 71: break;
        case 41: 
          { return process(kOVERRIDE);
          }
        case 72: break;
        case 40: 
          { return process(kREQUIRES);
          }
        case 73: break;
        case 19: 
          { return process(kNULL);
          }
        case 74: break;
        case 10: 
          { return process(kFOR);
          }
        case 75: break;
        case 42: 
          { return process(kIMPLICIT);
          }
        case 76: break;
        case 29: 
          { return process(kWHITH);
          }
        case 77: break;
        case 31: 
          { return process(kSEALED);
          }
        case 78: break;
        case 11: 
          { return process(kNEW);
          }
        case 79: break;
        case 30: 
          { return process(kWHILE);
          }
        case 80: break;
        case 38: 
          { return process(kPRIVATE);
          }
        case 81: break;
        case 43: 
          { return process(kPROTECTED);
          }
        case 82: break;
        case 2: 
          { return tCOMMENT;
          }
        case 83: break;
        case 23: 
          { return process(kCATCH);
          }
        case 84: break;
        case 14: 
          { return process(kTRUE);
          }
        case 85: break;
        case 28: 
          { return process(kMATCH);
          }
        case 86: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
