/* The following code was generated by JFlex 1.4.1 on 26.09.06 20:42 */

package org.jetbrains.plugins.scala.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 26.09.06 20:42 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaLexer implements FlexLexer, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_LINE_COMMENT_STATE = 2;
  public static final int IN_BLOCK_COMMENT_STATE = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\37\1\0\1\0\1\45\22\0\1\0\11\0\1\47"+
    "\1\41\1\0\1\41\1\0\1\46\1\33\7\35\2\34\7\0\3\36"+
    "\1\42\1\40\1\42\5\44\1\32\16\44\4\0\1\43\1\0\1\1"+
    "\1\2\1\6\1\12\1\7\1\13\1\30\1\10\1\17\1\25\1\27"+
    "\1\11\1\21\1\16\1\14\1\22\1\31\1\5\1\3\1\4\1\24"+
    "\1\26\1\23\1\15\1\20\1\44\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\21\2\2\3\3\1\3\4\2\5\1\6"+
    "\16\2\1\7\7\2\1\10\7\2\1\6\1\3\1\6"+
    "\1\3\1\6\1\11\1\12\1\0\1\6\6\2\1\13"+
    "\13\2\1\14\1\2\1\15\3\2\1\16\10\2\1\17"+
    "\1\20\1\0\3\3\1\6\4\2\1\21\1\2\1\22"+
    "\1\23\2\2\1\24\2\2\1\25\5\2\1\26\11\2"+
    "\1\3\2\2\1\27\1\30\1\31\2\2\1\32\1\33"+
    "\1\2\1\34\1\35\4\2\1\36\1\37\3\2\1\40"+
    "\1\41\1\2\1\42\1\43\3\2\1\44\2\2\1\45"+
    "\5\2\1\46\1\47\2\2\1\50\1\2\1\51\1\52"+
    "\1\53\1\54\1\55\1\2\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0398\0\u0410\0\u0438\0\u0398\0\u0460\0\u0488"+
    "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8"+
    "\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u04b0\0\u06e0"+
    "\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u04b0\0\u07f8"+
    "\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0488"+
    "\0\u0938\0\u0960\0\u0988\0\u0398\0\u0398\0\u09b0\0\u0398\0\u09d8"+
    "\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u04b0\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30"+
    "\0\u0c58\0\u04b0\0\u0c80\0\u04b0\0\u0ca8\0\u0cd0\0\u0cf8\0\u04b0"+
    "\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38"+
    "\0\u04b0\0\u04b0\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28"+
    "\0\u0f50\0\u0f78\0\u0fa0\0\u04b0\0\u0fc8\0\u04b0\0\u04b0\0\u0ff0"+
    "\0\u1018\0\u04b0\0\u1040\0\u1068\0\u04b0\0\u1090\0\u10b8\0\u10e0"+
    "\0\u1108\0\u1130\0\u04b0\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8"+
    "\0\u1220\0\u1248\0\u1270\0\u1298\0\u0398\0\u12c0\0\u12e8\0\u04b0"+
    "\0\u04b0\0\u04b0\0\u1310\0\u1338\0\u04b0\0\u04b0\0\u1360\0\u04b0"+
    "\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u04b0\0\u04b0\0\u1450"+
    "\0\u1478\0\u14a0\0\u04b0\0\u04b0\0\u14c8\0\u04b0\0\u04b0\0\u14f0"+
    "\0\u1518\0\u1540\0\u04b0\0\u1568\0\u1590\0\u04b0\0\u15b8\0\u15e0"+
    "\0\u1608\0\u1630\0\u1658\0\u04b0\0\u04b0\0\u1680\0\u16a8\0\u04b0"+
    "\0\u16d0\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u04b0\0\u16f8\0\u04b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\2\6\1\14\1\15\1\16\1\6\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\6\1\25\4\6\1\26\2\27"+
    "\1\6\1\30\1\6\1\4\3\6\1\31\1\32\1\4"+
    "\45\33\1\34\1\33\1\35\37\33\1\36\5\33\1\37"+
    "\2\33\33\0\3\40\13\0\1\41\1\42\30\41\3\43"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\32\41\3\43"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\6\41\1\44"+
    "\14\41\1\45\6\41\3\43\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\4\41\1\46\2\41\1\47\7\41\1\50"+
    "\12\41\3\43\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\6\41\1\51\23\41\3\43\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\1\52\7\41\1\53\21\41\3\43\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\10\41\1\54\3\41"+
    "\1\55\15\41\3\43\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\6\41\1\56\4\41\1\57\16\41\3\43\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\1\60\12\41\1\61"+
    "\2\41\1\62\13\41\3\43\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\1\41\1\63\23\41\1\64\4\41\3\43"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\6\41\1\65"+
    "\14\41\1\66\6\41\3\43\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\12\41\1\67\5\41\1\70\11\41\3\43"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\16\41\1\71"+
    "\13\41\3\43\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\1\72\31\41\3\43\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\1\73\3\41\1\74\25\41\3\43\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\7\41\1\75\22\41\3\43"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\1\76\31\41"+
    "\3\43\1\41\1\0\1\41\1\0\3\41\3\0\7\40"+
    "\1\77\1\40\1\100\3\40\1\101\14\40\1\100\1\102"+
    "\1\103\1\102\1\40\1\0\1\77\16\40\1\77\1\40"+
    "\1\100\20\40\1\100\3\27\1\40\1\0\1\77\7\40"+
    "\103\0\3\40\1\0\1\30\43\0\3\40\10\0\1\104"+
    "\1\105\37\0\1\33\56\0\1\36\40\0\1\36\17\0"+
    "\1\106\2\0\2\107\17\0\3\40\2\0\1\106\1\0"+
    "\1\107\6\0\32\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\2\41\1\111\27\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\6\110\1\112\23\110\3\43"+
    "\1\110\1\0\1\112\1\0\1\110\1\0\1\110\4\0"+
    "\1\113\31\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\21\41\1\114\10\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\1\115\16\41\1\116\3\41\1\117"+
    "\6\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\4\41\1\120\11\41\1\121\13\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\21\41\1\122\10\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\3\41\1\123"+
    "\24\41\1\124\1\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\2\41\1\125\1\126\26\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\1\127\31\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\2\41\1\130"+
    "\27\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\3\41\1\131\26\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\12\41\1\132\17\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\10\41\1\133\21\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\4\41\1\134"+
    "\25\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\15\41\1\135\14\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\24\41\1\136\5\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\6\41\1\137\23\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\22\41\1\140"+
    "\7\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\10\41\1\141\21\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\21\41\1\142\10\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\6\41\1\143\23\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\3\41\1\144"+
    "\26\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\5\41\1\145\24\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\13\41\1\146\2\41\1\147\13\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\16\41\1\150"+
    "\13\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\4\41\1\151\3\41\1\152\21\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\12\0\1\106\2\0\2\107\17\0"+
    "\3\40\2\0\1\106\1\153\1\107\6\0\2\154\3\0"+
    "\1\154\1\155\2\0\2\154\17\0\3\156\1\154\1\0"+
    "\1\155\1\0\1\154\5\0\7\40\1\77\1\40\1\100"+
    "\20\40\1\100\1\102\1\103\1\102\1\40\1\0\1\77"+
    "\16\40\1\77\23\40\3\103\1\40\1\0\1\77\7\40"+
    "\33\0\3\157\3\0\1\153\7\0\36\110\1\0\1\110"+
    "\1\0\1\110\1\0\1\110\4\0\3\41\1\160\26\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\36\110"+
    "\1\0\1\110\1\153\1\110\1\0\1\110\4\0\10\41"+
    "\1\161\21\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\6\41\1\162\23\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\16\41\1\163\13\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\6\41\1\164\23\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\13\41"+
    "\1\165\16\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\2\41\1\166\27\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\6\41\1\167\23\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\23\41\1\170\6\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\23\41"+
    "\1\171\6\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\6\41\1\172\23\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\5\41\1\173\24\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\2\41\1\174\27\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\6\41"+
    "\1\175\23\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\6\41\1\176\23\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\2\41\1\177\27\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\1\200\31\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\6\41\1\201"+
    "\23\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\4\41\1\202\25\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\10\41\1\203\21\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\10\41\1\204\2\41\1\205"+
    "\16\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\10\41\1\206\21\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\5\41\1\207\24\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\26\41\1\210\3\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\3\41\1\211"+
    "\26\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\25\41\1\212\4\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\3\41\1\213\4\41\1\214\21\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\36\0\3\157\13\0"+
    "\2\154\3\0\2\154\1\0\1\215\2\154\16\0\1\215"+
    "\4\154\1\0\1\154\1\0\1\154\6\0\2\154\3\0"+
    "\2\154\1\0\1\215\2\154\16\0\1\215\4\154\1\0"+
    "\1\154\1\153\1\154\6\0\2\154\3\0\1\154\1\155"+
    "\1\0\1\215\2\154\16\0\1\215\3\156\1\154\1\0"+
    "\1\155\1\0\1\154\17\0\2\107\17\0\3\157\4\0"+
    "\1\107\6\0\4\41\1\216\25\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\6\41\1\217\23\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\4\41\1\220"+
    "\25\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\3\41\1\221\26\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\22\41\1\222\7\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\4\41\1\223\25\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\16\41\1\224"+
    "\13\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\7\41\1\225\22\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\2\41\1\226\27\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\15\41\1\227\14\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\6\41\1\230"+
    "\23\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\10\41\1\231\21\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\5\41\1\232\24\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\4\41\1\233\25\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\16\41\1\234"+
    "\13\41\3\110\1\41\1\0\1\41\1\0\3\41\4\0"+
    "\4\41\1\235\25\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\11\41\1\236\20\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\7\41\1\237\22\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\1\240\31\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\6\41"+
    "\1\241\23\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\1\242\31\41\3\110\1\41\1\0\1\41\1\0"+
    "\3\41\4\0\7\41\1\243\22\41\3\110\1\41\1\0"+
    "\1\41\1\0\3\41\4\0\6\41\1\244\23\41\3\110"+
    "\1\41\1\0\1\41\1\0\3\41\4\0\1\245\31\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\11\41"+
    "\1\246\20\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\15\41\1\247\14\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\4\41\1\250\25\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\11\41\1\251\20\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\10\41"+
    "\1\252\21\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\3\41\1\253\26\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\16\41\1\254\13\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\5\41\1\255\24\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\3\41"+
    "\1\256\26\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\27\41\1\257\2\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\5\41\1\260\24\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\3\41\1\261\26\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\5\41"+
    "\1\262\24\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\6\41\1\263\23\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\2\41\1\264\27\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\17\41\1\265\12\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\11\41"+
    "\1\266\20\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\16\41\1\267\13\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\6\41\1\270\23\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\3\41\1\271\26\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\6\41"+
    "\1\272\23\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\3\41\1\273\26\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\2\41\1\274\27\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\4\0\6\41\1\275\23\41"+
    "\3\110\1\41\1\0\1\41\1\0\3\41\4\0\3\41"+
    "\1\276\26\41\3\110\1\41\1\0\1\41\1\0\3\41"+
    "\4\0\6\41\1\277\23\41\3\110\1\41\1\0\1\41"+
    "\1\0\3\41\4\0\11\41\1\300\20\41\3\110\1\41"+
    "\1\0\1\41\1\0\3\41\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\24\1\1\11\2\1\1\11\2\1\1\11\45\1"+
    "\2\11\1\0\1\11\43\1\1\0\41\1\1\11\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private IElementType process(IElementType type){
        return type;
    }



  public _ScalaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 112) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { return process(kCASE);
          }
        case 47: break;
        case 19: 
          { return process(kTYPE);
          }
        case 48: break;
        case 38: 
          { return process(kEXTENDS);
          }
        case 49: break;
        case 21: 
          { return process(kELSE);
          }
        case 50: break;
        case 24: 
          { return process(kTRAIT);
          }
        case 51: break;
        case 28: 
          { return process(kFALSE);
          }
        case 52: break;
        case 23: 
          { return process(kSUPER);
          }
        case 53: break;
        case 16: 
          { return process(kVAL);
          }
        case 54: break;
        case 35: 
          { return process(kRETURN);
          }
        case 55: break;
        case 11: 
          { return process(kTRY);
          }
        case 56: break;
        case 27: 
          { return process(kCLASS);
          }
        case 57: break;
        case 1: 
          { return tSTUB;
          }
        case 58: break;
        case 18: 
          { return process(kTHIS);
          }
        case 59: break;
        case 42: 
          { return process(kABSTRACT);
          }
        case 60: break;
        case 7: 
          { return process(kDO);
          }
        case 61: break;
        case 36: 
          { return process(kOBJECT);
          }
        case 62: break;
        case 3: 
          { return process(tINTEGER);
          }
        case 63: break;
        case 5: 
          { yybegin(YYINITIAL);
                                            return process(tCOMMENT);
          }
        case 64: break;
        case 8: 
          { return process(kIF);
          }
        case 65: break;
        case 37: 
          { return process(kIMPORT);
          }
        case 66: break;
        case 39: 
          { return process(kFINALLY);
          }
        case 67: break;
        case 25: 
          { return process(kTHROW);
          }
        case 68: break;
        case 12: 
          { return process(kDEF);
          }
        case 69: break;
        case 40: 
          { return process(kPACKAGE);
          }
        case 70: break;
        case 30: 
          { return process(kYIELD);
          }
        case 71: break;
        case 15: 
          { return process(kVAR);
          }
        case 72: break;
        case 29: 
          { return process(kFINAL);
          }
        case 73: break;
        case 44: 
          { return process(kOVERRIDE);
          }
        case 74: break;
        case 43: 
          { return process(kREQUIRES);
          }
        case 75: break;
        case 6: 
          { return process(tFLOAT);
          }
        case 76: break;
        case 22: 
          { return process(kNULL);
          }
        case 77: break;
        case 13: 
          { return process(kFOR);
          }
        case 78: break;
        case 45: 
          { return process(kIMPLICIT);
          }
        case 79: break;
        case 32: 
          { return process(kWHITH);
          }
        case 80: break;
        case 34: 
          { return process(kSEALED);
          }
        case 81: break;
        case 14: 
          { return process(kNEW);
          }
        case 82: break;
        case 33: 
          { return process(kWHILE);
          }
        case 83: break;
        case 9: 
          { yybegin(IN_LINE_COMMENT_STATE);
                                            return process(tCOMMENT);
          }
        case 84: break;
        case 41: 
          { return process(kPRIVATE);
          }
        case 85: break;
        case 46: 
          { return process(kPROTECTED);
          }
        case 86: break;
        case 2: 
          { return process(tIDENTIFIER);
          }
        case 87: break;
        case 4: 
          { return process(tCOMMENT);
          }
        case 88: break;
        case 10: 
          { yybegin(IN_BLOCK_COMMENT_STATE);
                                            return process(tCOMMENT);
          }
        case 89: break;
        case 26: 
          { return process(kCATCH);
          }
        case 90: break;
        case 17: 
          { return process(kTRUE);
          }
        case 91: break;
        case 31: 
          { return process(kMATCH);
          }
        case 92: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
