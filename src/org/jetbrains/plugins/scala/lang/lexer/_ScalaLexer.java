/* The following code was generated by JFlex 1.4.1 on 10.10.06 17:26 */

package org.jetbrains.plugins.scala.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 10.10.06 17:26 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaLexer implements FlexLexer, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_XML_STATE = 4;
  public static final int IN_STRING_STATE = 3;
  public static final int IN_LINE_COMMENT_STATE = 2;
  public static final int IN_BLOCK_COMMENT_STATE = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\56\1\0\1\32\1\55\22\0\1\32\1\0\1\54"+
    "\1\74\3\0\1\45\1\70\1\71\1\61\1\42\1\0\1\43\1\40"+
    "\1\60\1\34\1\36\1\50\1\36\1\36\1\51\1\36\1\36\1\52"+
    "\1\35\1\72\1\76\1\62\1\73\1\63\1\0\1\75\3\37\1\44"+
    "\1\41\1\44\5\47\1\33\16\47\1\64\1\46\1\65\1\0\1\53"+
    "\1\0\1\1\1\2\1\6\1\12\1\7\1\13\1\30\1\10\1\17"+
    "\1\25\1\27\1\11\1\21\1\16\1\14\1\22\1\31\1\5\1\3"+
    "\1\4\1\24\1\26\1\23\1\15\1\20\1\47\1\66\1\0\1\67"+
    "\u1fab\0\1\57\u01a8\0\1\0\ude2d\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\0\1\2\21\3\1\4\2\5\1\6"+
    "\2\2\1\7\1\10\2\11\3\2\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\5\25\2\26\1\1\1\27\4\1\1\30\1\31\14\3"+
    "\1\32\7\3\1\33\10\3\1\0\1\5\1\34\1\0"+
    "\1\5\1\0\1\34\1\0\1\3\3\0\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\4\0\1\43\4\3\1\44"+
    "\13\3\1\45\1\3\1\46\3\3\1\47\11\3\1\50"+
    "\1\51\1\34\1\0\1\5\1\0\1\52\1\0\1\52"+
    "\10\0\4\3\1\53\1\3\1\54\1\55\2\3\1\56"+
    "\2\3\1\57\5\3\1\60\10\3\1\61\11\0\2\3"+
    "\1\62\1\63\1\64\2\3\1\65\1\66\1\3\1\67"+
    "\1\70\4\3\1\71\1\72\3\3\1\73\11\0\1\3"+
    "\1\74\1\75\3\3\1\76\2\3\1\77\3\3\1\0"+
    "\2\3\1\100\1\101\2\3\1\102\1\3\1\103\1\104"+
    "\1\105\1\106\1\107\1\3\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u013b"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u01b9\0\u013b\0\u06e4"+
    "\0\u013b\0\u0723\0\u0762\0\u07a1\0\u013b\0\u013b\0\u013b\0\u013b"+
    "\0\u013b\0\u013b\0\u013b\0\u07e0\0\u013b\0\u013b\0\u013b\0\u013b"+
    "\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u013b\0\u095a\0\u013b"+
    "\0\u013b\0\u0999\0\u09d8\0\u0a17\0\u013b\0\u013b\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u01b9\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46"+
    "\0\u0e85\0\u0ec4\0\u01b9\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff"+
    "\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u013b\0\u013b\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u013b"+
    "\0\u013b\0\u013b\0\u013b\0\u013b\0\u013b\0\u1371\0\u13b0\0\u13ef"+
    "\0\u0a17\0\u0a17\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u01b9\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u01b9\0\u17df\0\u01b9\0\u181e\0\u185d\0\u189c"+
    "\0\u01b9\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55"+
    "\0\u1a94\0\u1ad3\0\u01b9\0\u01b9\0\u1b12\0\u1b51\0\u1b90\0\u1275"+
    "\0\u1275\0\u1bcf\0\u013b\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u01b9"+
    "\0\u1f02\0\u01b9\0\u01b9\0\u1f41\0\u1f80\0\u01b9\0\u1fbf\0\u1ffe"+
    "\0\u01b9\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u01b9\0\u2178"+
    "\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u01b9"+
    "\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529"+
    "\0\u2568\0\u25a7\0\u25e6\0\u01b9\0\u01b9\0\u01b9\0\u2625\0\u2664"+
    "\0\u01b9\0\u01b9\0\u26a3\0\u01b9\0\u26e2\0\u2721\0\u2760\0\u279f"+
    "\0\u27de\0\u01b9\0\u01b9\0\u281d\0\u285c\0\u289b\0\u01b9\0\u28da"+
    "\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2"+
    "\0\u2b11\0\u01b9\0\u01b9\0\u2b50\0\u2b8f\0\u2bce\0\u01b9\0\u2c0d"+
    "\0\u2c4c\0\u01b9\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6"+
    "\0\u01b9\0\u01b9\0\u2e05\0\u2e44\0\u01b9\0\u2e83\0\u01b9\0\u01b9"+
    "\0\u01b9\0\u01b9\0\u01b9\0\u2ec2\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\10\1\16\1\17\1\20\1\10\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\10\1\27\3\10\1\30\1\10"+
    "\1\31\2\32\1\10\1\33\1\10\2\6\1\10\1\34"+
    "\1\35\1\10\3\32\1\36\1\37\1\40\1\41\1\6"+
    "\1\42\1\6\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\46\60"+
    "\1\61\6\60\1\62\3\60\1\63\63\60\1\64\6\60"+
    "\1\65\1\66\20\60\54\67\1\70\22\67\46\71\1\72"+
    "\6\71\1\73\4\71\1\74\3\71\1\75\1\76\7\71"+
    "\100\0\1\10\1\77\27\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\31\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\6\10"+
    "\1\100\14\10\1\101\5\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\4\10\1\102\2\10"+
    "\1\103\7\10\1\104\11\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\6\10\1\105\22\10"+
    "\1\0\5\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\24\0\1\106\7\10\1\107\20\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\10\10\1\110"+
    "\3\10\1\111\14\10\1\0\5\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\24\0\6\10\1\112\4\10\1\113"+
    "\15\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\1\114\12\10\1\115\2\10\1\116\12\10"+
    "\1\0\5\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\24\0\1\10\1\117\23\10\1\120\3\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\6\10"+
    "\1\121\14\10\1\122\5\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\12\10\1\123\5\10"+
    "\1\124\10\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\16\10\1\125\12\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\1\126"+
    "\30\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\1\127\3\10\1\130\24\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\7\10"+
    "\1\131\6\10\1\132\12\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\1\133\30\10\1\0"+
    "\5\10\1\0\1\10\2\0\1\10\2\0\5\10\32\0"+
    "\1\134\1\0\1\135\2\136\1\0\1\137\15\0\1\135"+
    "\1\140\1\141\1\140\1\0\1\142\1\134\2\0\1\136"+
    "\3\0\2\140\1\141\33\0\1\134\1\0\1\135\2\136"+
    "\17\0\1\135\3\32\1\0\1\142\1\134\2\0\1\136"+
    "\3\0\3\32\60\0\3\142\11\0\3\142\24\0\45\143"+
    "\1\144\1\145\5\143\1\146\22\143\24\0\1\147\32\0"+
    "\1\41\75\0\1\41\100\0\1\150\1\151\60\0\1\152"+
    "\26\0\1\153\76\0\1\154\67\0\1\155\37\0\1\156"+
    "\32\0\1\60\75\0\1\60\100\0\1\66\42\0\1\157"+
    "\32\0\1\66\75\0\1\66\20\0\54\67\1\0\22\67"+
    "\24\0\1\160\32\0\1\71\75\0\1\71\20\0\54\161"+
    "\1\0\6\161\1\162\13\161\1\0\2\10\1\163\26\10"+
    "\1\0\5\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\24\0\1\164\30\10\1\0\5\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\24\0\21\10\1\165\7\10\1\0"+
    "\5\10\1\0\1\10\2\0\1\10\2\0\5\10\24\0"+
    "\1\166\16\10\1\167\3\10\1\170\5\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\4\10"+
    "\1\171\11\10\1\172\12\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\21\10\1\173\7\10"+
    "\1\0\5\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\24\0\3\10\1\174\24\10\1\175\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\2\10\1\176"+
    "\1\177\25\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\1\200\30\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\2\10\1\201"+
    "\26\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\3\10\1\202\25\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\12\10\1\203"+
    "\16\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\10\10\1\204\20\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\4\10\1\205"+
    "\24\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\15\10\1\206\13\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\24\10\1\207"+
    "\4\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\6\10\1\210\22\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\22\10\1\211"+
    "\6\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\10\10\1\212\20\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\21\10\1\213"+
    "\7\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\6\10\1\214\22\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\3\10\1\215"+
    "\25\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\5\10\1\216\23\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\13\10\1\217"+
    "\2\10\1\220\12\10\1\0\5\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\24\0\16\10\1\221\12\10\1\0"+
    "\5\10\1\0\1\10\2\0\1\10\2\0\5\10\24\0"+
    "\3\10\1\222\25\10\1\0\5\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\24\0\4\10\1\223\3\10\1\224"+
    "\20\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\57\0\3\225\3\0\2\226\4\0\3\225\25\0"+
    "\2\227\3\0\2\227\2\0\2\227\20\0\4\227\1\0"+
    "\1\227\2\0\1\227\3\0\3\227\33\0\1\134\1\0"+
    "\1\135\2\136\17\0\1\135\1\140\1\141\1\140\1\0"+
    "\1\142\1\134\2\0\1\136\3\0\2\140\1\141\33\0"+
    "\1\134\2\0\2\136\20\0\3\141\1\0\1\142\1\134"+
    "\2\0\1\136\3\0\3\141\33\0\1\134\2\0\2\136"+
    "\20\0\3\142\2\0\1\134\2\0\1\136\3\0\3\142"+
    "\24\0\45\230\1\231\6\230\1\0\67\230\1\144\6\230"+
    "\1\0\46\230\1\232\20\230\1\231\6\230\1\0\22\230"+
    "\45\0\1\233\65\0\1\234\13\0\1\235\62\0\1\236"+
    "\13\0\1\237\62\0\1\240\13\0\1\241\62\0\1\242"+
    "\13\0\1\243\27\0\3\10\1\244\25\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\10\10"+
    "\1\245\20\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\6\10\1\246\22\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\16\10"+
    "\1\247\12\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\6\10\1\250\22\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\13\10"+
    "\1\251\15\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\2\10\1\252\26\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\6\10"+
    "\1\253\22\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\23\10\1\254\5\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\23\10"+
    "\1\255\5\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\6\10\1\256\22\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\5\10"+
    "\1\257\23\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\2\10\1\260\26\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\6\10"+
    "\1\261\22\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\6\10\1\262\22\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\2\10"+
    "\1\263\26\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\1\264\30\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\6\10\1\265"+
    "\22\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\4\10\1\266\24\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\10\10\1\267"+
    "\20\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\10\10\1\270\2\10\1\271\15\10\1\0"+
    "\5\10\1\0\1\10\2\0\1\10\2\0\5\10\24\0"+
    "\10\10\1\272\20\10\1\0\5\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\24\0\5\10\1\273\23\10\1\0"+
    "\5\10\1\0\1\10\2\0\1\10\2\0\5\10\24\0"+
    "\26\10\1\274\2\10\1\0\5\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\24\0\3\10\1\275\25\10\1\0"+
    "\5\10\1\0\1\10\2\0\1\10\2\0\5\10\24\0"+
    "\25\10\1\276\3\10\1\0\5\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\24\0\10\10\1\277\20\10\1\0"+
    "\5\10\1\0\1\10\2\0\1\10\2\0\5\10\24\0"+
    "\7\10\1\300\21\10\1\0\5\10\1\0\1\10\2\0"+
    "\1\10\2\0\5\10\35\0\2\136\20\0\3\225\5\0"+
    "\1\136\3\0\3\225\60\0\3\225\11\0\3\225\25\0"+
    "\2\227\3\0\2\227\1\0\1\135\2\227\17\0\1\135"+
    "\4\227\1\0\1\227\2\0\1\227\3\0\3\227\24\0"+
    "\1\230\2\301\3\230\2\301\2\230\2\301\20\230\4\301"+
    "\1\230\1\301\2\230\1\301\1\144\2\230\3\301\1\230"+
    "\1\0\22\230\34\0\1\302\76\0\1\303\76\0\1\304"+
    "\76\0\1\305\76\0\1\306\76\0\1\307\76\0\1\310"+
    "\76\0\1\311\43\0\4\10\1\312\24\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\6\10"+
    "\1\313\22\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\4\10\1\314\24\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\3\10"+
    "\1\315\25\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\22\10\1\316\6\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\4\10"+
    "\1\317\24\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\16\10\1\320\12\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\7\10"+
    "\1\321\21\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\2\10\1\322\26\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\15\10"+
    "\1\323\13\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\6\10\1\324\22\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\10\10"+
    "\1\325\20\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\5\10\1\326\23\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\4\10"+
    "\1\327\24\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\16\10\1\330\12\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\4\10"+
    "\1\331\24\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\11\10\1\332\17\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\7\10"+
    "\1\333\21\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\1\334\30\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\6\10\1\335"+
    "\22\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\1\336\30\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\6\10\1\337\22\10"+
    "\1\0\5\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\23\0\1\230\2\340\3\230\2\340\2\230\2\340\20\230"+
    "\4\340\1\230\1\340\2\230\1\340\1\144\2\230\3\340"+
    "\1\230\1\0\22\230\52\0\1\341\74\0\1\342\100\0"+
    "\1\343\74\0\1\344\100\0\1\345\74\0\1\346\100\0"+
    "\1\347\74\0\1\350\27\0\1\351\30\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\11\10"+
    "\1\352\17\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\15\10\1\353\13\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\4\10"+
    "\1\354\24\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\11\10\1\355\17\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\10\10"+
    "\1\356\20\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\3\10\1\357\25\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\16\10"+
    "\1\360\12\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\5\10\1\361\23\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\3\10"+
    "\1\362\25\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\27\10\1\363\1\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\24\0\5\10"+
    "\1\364\23\10\1\0\5\10\1\0\1\10\2\0\1\10"+
    "\2\0\5\10\24\0\3\10\1\365\25\10\1\0\5\10"+
    "\1\0\1\10\2\0\1\10\2\0\5\10\23\0\1\230"+
    "\2\366\3\230\2\366\2\230\2\366\20\230\4\366\1\230"+
    "\1\366\2\230\1\366\1\144\2\230\3\366\1\230\1\0"+
    "\22\230\51\0\1\41\77\0\1\41\75\0\1\60\77\0"+
    "\1\60\75\0\1\66\77\0\1\66\75\0\1\71\77\0"+
    "\1\71\25\0\5\10\1\367\23\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\6\10\1\370"+
    "\22\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\2\10\1\371\26\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\17\10\1\372"+
    "\11\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\11\10\1\373\17\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\16\10\1\374"+
    "\12\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\6\10\1\375\22\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\24\0\3\10\1\376"+
    "\25\10\1\0\5\10\1\0\1\10\2\0\1\10\2\0"+
    "\5\10\24\0\6\10\1\377\22\10\1\0\5\10\1\0"+
    "\1\10\2\0\1\10\2\0\5\10\23\0\1\230\2\143"+
    "\3\230\2\143\2\230\2\143\20\230\4\143\1\230\1\143"+
    "\2\230\1\143\1\144\2\230\3\143\1\230\1\0\22\230"+
    "\1\0\3\10\1\u0100\25\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\2\10\1\u0101\26\10"+
    "\1\0\5\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\24\0\6\10\1\u0102\22\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\3\10\1\u0103\25\10"+
    "\1\0\5\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\24\0\6\10\1\u0104\22\10\1\0\5\10\1\0\1\10"+
    "\2\0\1\10\2\0\5\10\24\0\11\10\1\u0105\17\10"+
    "\1\0\5\10\1\0\1\10\2\0\1\10\2\0\5\10"+
    "\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12033];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\0\1\11\21\1\1\11\6\1\1\11"+
    "\1\1\1\11\3\1\7\11\1\1\4\11\5\1\1\11"+
    "\1\1\2\11\3\1\2\11\35\1\1\0\2\11\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\3\0\6\11\4\0"+
    "\44\1\1\0\1\1\1\0\1\1\1\0\1\11\10\0"+
    "\35\1\11\0\26\1\11\0\15\1\1\0\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private IElementType process(IElementType type){
        //System.out.println(type.toString());
        return type;
    }



  public _ScalaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { return process(kCATCH);
          }
        case 73: break;
        case 51: 
          { return process(kTRAIT);
          }
        case 74: break;
        case 72: 
          { return process(kPROTECTED);
          }
        case 75: break;
        case 23: 
          { yybegin(YYINITIAL);
                                            return process(tSTRING_END);
          }
        case 76: break;
        case 64: 
          { return process(kEXTENDS);
          }
        case 77: break;
        case 49: 
          { return process(kWHITH);
          }
        case 78: break;
        case 21: 
          { return process(tCOMMENT);
          }
        case 79: break;
        case 40: 
          { return process(kVAR);
          }
        case 80: break;
        case 61: 
          { return process(kRETURN);
          }
        case 81: break;
        case 20: 
          { return process(tSEMICOLON);
          }
        case 82: break;
        case 8: 
          { yybegin(IN_STRING_STATE);
                                            return process(tSTRING_BEGIN);
          }
        case 83: break;
        case 43: 
          { return process(kTRUE);
          }
        case 84: break;
        case 34: 
          { return process(kFUNTYPE);
          }
        case 85: break;
        case 62: 
          { return process(kOBJECT);
          }
        case 86: break;
        case 2: 
          { return process(tSTUB);
          }
        case 87: break;
        case 6: 
          { return process(tDOT);
          }
        case 88: break;
        case 58: 
          { return process(kMATCH);
          }
        case 89: break;
        case 19: 
          { return process(kAT);
          }
        case 90: break;
        case 1: 
          { return process(tSTRING);
          }
        case 91: break;
        case 13: 
          { return process(tRBRACE);
          }
        case 92: break;
        case 31: 
          { return process(kCHOOSE);
          }
        case 93: break;
        case 9: 
          { return process(tWHITE_SPACE_LINE_TERMINATE);
          }
        case 94: break;
        case 44: 
          { return process(kTHIS);
          }
        case 95: break;
        case 52: 
          { return process(kTHROW);
          }
        case 96: break;
        case 41: 
          { return process(kVAL);
          }
        case 97: break;
        case 67: 
          { return process(kPRIVATE);
          }
        case 98: break;
        case 48: 
          { return process(kNULL);
          }
        case 99: break;
        case 18: 
          { return process(kINNER_CLASS);
          }
        case 100: break;
        case 65: 
          { return process(kFINALLY);
          }
        case 101: break;
        case 14: 
          { return process(tLPARENTHIS);
          }
        case 102: break;
        case 4: 
          { return process(tWHITE_SPACE_IN_LINE);
          }
        case 103: break;
        case 60: 
          { return process(kSEALED);
          }
        case 104: break;
        case 25: 
          { yybegin(IN_XML_STATE);
                                            return process(tENDSCALAEXPR);
          }
        case 105: break;
        case 5: 
          { return process(tINTEGER);
          }
        case 106: break;
        case 54: 
          { return process(kCLASS);
          }
        case 107: break;
        case 70: 
          { return process(kOVERRIDE);
          }
        case 108: break;
        case 66: 
          { return process(kPACKAGE);
          }
        case 109: break;
        case 10: 
          { return process(tLSQBRACKET);
          }
        case 110: break;
        case 12: 
          { return process(tLBRACE);
          }
        case 111: break;
        case 26: 
          { return process(kDO);
          }
        case 112: break;
        case 38: 
          { return process(kFOR);
          }
        case 113: break;
        case 17: 
          { return process(kASSIGN);
          }
        case 114: break;
        case 55: 
          { return process(kFALSE);
          }
        case 115: break;
        case 7: 
          { return process(kUNDER);
          }
        case 116: break;
        case 57: 
          { return process(kYIELD);
          }
        case 117: break;
        case 3: 
          { return process(tIDENTIFIER);
          }
        case 118: break;
        case 39: 
          { return process(kNEW);
          }
        case 119: break;
        case 69: 
          { return process(kREQUIRES);
          }
        case 120: break;
        case 29: 
          { yybegin(IN_LINE_COMMENT_STATE);
                                            return process(tCOMMENT);
          }
        case 121: break;
        case 32: 
          { return process(kLOWER_BOUND);
          }
        case 122: break;
        case 71: 
          { return process(kIMPLICIT);
          }
        case 123: break;
        case 56: 
          { return process(kFINAL);
          }
        case 124: break;
        case 36: 
          { return process(kTRY);
          }
        case 125: break;
        case 45: 
          { return process(kTYPE);
          }
        case 126: break;
        case 50: 
          { return process(kSUPER);
          }
        case 127: break;
        case 46: 
          { return process(kCASE);
          }
        case 128: break;
        case 15: 
          { return process(tRPARENTHIS);
          }
        case 129: break;
        case 33: 
          { return process(kUPPER_BOUND);
          }
        case 130: break;
        case 35: 
          { yybegin(IN_XML_STATE);
                                            return process(tOPENXMLTAG);
          }
        case 131: break;
        case 63: 
          { return process(kIMPORT);
          }
        case 132: break;
        case 16: 
          { return process(kCOLON);
          }
        case 133: break;
        case 28: 
          { return process(tFLOAT);
          }
        case 134: break;
        case 68: 
          { return process(kABSTRACT);
          }
        case 135: break;
        case 27: 
          { return process(kIF);
          }
        case 136: break;
        case 30: 
          { yybegin(IN_BLOCK_COMMENT_STATE);
                                            return process(tCOMMENT);
          }
        case 137: break;
        case 42: 
          { return process(tCHAR);
          }
        case 138: break;
        case 11: 
          { return process(tRSQBRACKET);
          }
        case 139: break;
        case 24: 
          { yybegin(YYINITIAL);
                                            return process(tBEGINSCALAEXPR);
          }
        case 140: break;
        case 59: 
          { return process(kWHILE);
          }
        case 141: break;
        case 37: 
          { return process(kDEF);
          }
        case 142: break;
        case 47: 
          { return process(kELSE);
          }
        case 143: break;
        case 22: 
          { yybegin(YYINITIAL);
                                            return process(tCOMMENT);
          }
        case 144: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
