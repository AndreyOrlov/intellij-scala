/* The following code was generated by JFlex 1.4.1 on 25.09.06 20:24 */

package org.jetbrains.plugins.scala.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 25.09.06 20:24 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaLexer implements FlexLexer, ScalaTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\40\1\36\1\40\1\40\1\40\22\0\1\32\1\54\1\0"+
    "\2\0\1\0\1\0\1\35\1\55\1\56\1\46\1\44\1\0\1\45"+
    "\1\0\1\47\1\0\1\0\5\0\1\0\1\0\1\0\2\0\1\41"+
    "\1\42\1\43\1\0\1\0\1\0\2\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\2\0\1\37\1\0\1\33\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\3\0\1\0\1\0\1\0\1\50\1\0\1\51\1\0"+
    "\1\0\1\0\1\1\1\2\1\6\1\12\1\7\1\13\1\30\1\10"+
    "\1\17\1\25\1\27\1\11\1\21\1\16\1\14\1\22\1\31\1\5"+
    "\1\3\1\4\1\24\1\26\1\23\1\15\1\20\1\0\1\52\1\34"+
    "\1\53\1\0\1\0\uff80\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\1\0\1\2\1\3\1\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\0"+
    "\1\15\1\16\15\0\1\17\10\0\1\20\11\0\1\21"+
    "\1\22\1\23\1\24\4\0\1\25\15\0\1\26\1\0"+
    "\1\27\4\0\1\30\11\0\1\31\1\32\5\0\1\33"+
    "\1\0\1\34\1\35\2\0\1\36\2\0\1\37\10\0"+
    "\1\40\15\0\1\41\1\42\1\43\2\0\1\44\1\45"+
    "\2\0\1\46\1\47\4\0\1\50\1\51\4\0\1\52"+
    "\1\53\2\0\1\54\1\55\4\0\1\56\2\0\1\57"+
    "\7\0\1\60\1\0\1\61\2\0\1\62\1\0\1\63"+
    "\1\64\1\0\1\65\1\66\1\0\1\67\1\70\3\0"+
    "\1\71\3\0\1\72\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u03ac\0\u03ac\0\u03ac\0\u03ac\0\u03ac\0\u03ac\0\u03ac\0\u03ac"+
    "\0\u0468\0\u03ac\0\u03ac\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u03ac\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u03ac\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d"+
    "\0\u098c\0\u09bb\0\u09ea\0\u03ac\0\u03ac\0\u03ac\0\u03ac\0\u0a19"+
    "\0\u0a48\0\u0a77\0\u0aa6\0\u03ac\0\u0ad5\0\u0b04\0\u0b33\0\u0b62"+
    "\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda"+
    "\0\u0d09\0\u03ac\0\u0d38\0\u03ac\0\u0d67\0\u0d96\0\u0dc5\0\u0df4"+
    "\0\u03ac\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u03ac\0\u03ac\0\u0fca\0\u0ff9\0\u1028\0\u1057"+
    "\0\u1086\0\u03ac\0\u10b5\0\u03ac\0\u03ac\0\u10e4\0\u1113\0\u03ac"+
    "\0\u1142\0\u1171\0\u03ac\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c"+
    "\0\u128b\0\u12ba\0\u12e9\0\u03ac\0\u1318\0\u1347\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u03ac\0\u03ac\0\u03ac\0\u157b\0\u15aa\0\u03ac\0\u03ac"+
    "\0\u15d9\0\u1608\0\u03ac\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3"+
    "\0\u03ac\0\u03ac\0\u1722\0\u1751\0\u1780\0\u17af\0\u03ac\0\u03ac"+
    "\0\u17de\0\u180d\0\u03ac\0\u03ac\0\u183c\0\u186b\0\u189a\0\u18c9"+
    "\0\u03ac\0\u18f8\0\u1927\0\u03ac\0\u1956\0\u1985\0\u19b4\0\u19e3"+
    "\0\u1a12\0\u1a41\0\u1a70\0\u03ac\0\u1a9f\0\u03ac\0\u1ace\0\u1afd"+
    "\0\u03ac\0\u1b2c\0\u03ac\0\u03ac\0\u1b5b\0\u03ac\0\u03ac\0\u1b8a"+
    "\0\u03ac\0\u03ac\0\u1bb9\0\u1be8\0\u1c17\0\u03ac\0\u1c46\0\u1c75"+
    "\0\u1ca4\0\u03ac\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe"+
    "\0\u1ded\0\u1e1c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\0\1\11\1\12\1\13\1\0\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\0\1\22\3\0\1\23"+
    "\2\0\1\24\1\25\1\0\1\23\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\2\0\1\44\63\0\1\45\14\0"+
    "\1\46\37\0\1\47\2\0\1\50\7\0\1\51\45\0"+
    "\1\52\50\0\1\53\7\0\1\54\56\0\1\55\3\0"+
    "\1\56\50\0\1\57\56\0\1\60\4\0\1\61\43\0"+
    "\1\62\12\0\1\63\2\0\1\64\41\0\1\65\3\0"+
    "\1\66\17\0\1\67\37\0\1\70\14\0\1\71\45\0"+
    "\1\72\5\0\1\73\54\0\1\74\40\0\1\75\56\0"+
    "\1\76\3\0\1\77\3\0\1\100\55\0\1\101\47\0"+
    "\1\102\107\0\1\23\5\0\1\23\53\0\1\103\142\0"+
    "\1\104\56\0\1\105\56\0\1\106\56\0\1\107\17\0"+
    "\1\110\54\0\1\111\77\0\1\112\35\0\1\113\16\0"+
    "\1\114\3\0\1\115\37\0\1\116\11\0\1\117\61\0"+
    "\1\120\40\0\1\121\24\0\1\122\30\0\1\123\1\124"+
    "\53\0\1\125\60\0\1\126\57\0\1\127\67\0\1\130"+
    "\47\0\1\131\4\0\1\132\54\0\1\133\52\0\1\134"+
    "\67\0\1\135\65\0\1\136\35\0\1\137\61\0\1\140"+
    "\72\0\1\141\44\0\1\142\67\0\1\143\43\0\1\144"+
    "\53\0\1\145\60\0\1\146\64\0\1\147\2\0\1\150"+
    "\40\0\1\151\74\0\1\152\44\0\1\153\3\0\1\154"+
    "\102\0\1\155\25\0\1\156\63\0\1\157\54\0\1\160"+
    "\66\0\1\161\46\0\1\162\63\0\1\163\45\0\1\164"+
    "\62\0\1\165\73\0\1\166\56\0\1\167\41\0\1\170"+
    "\55\0\1\171\53\0\1\172\62\0\1\173\56\0\1\174"+
    "\102\0\1\175\42\0\1\176\42\0\1\177\54\0\1\200"+
    "\64\0\1\201\50\0\1\202\62\0\1\203\62\0\1\204"+
    "\56\0\1\205\2\0\1\206\53\0\1\207\53\0\1\210"+
    "\77\0\1\211\33\0\1\212\100\0\1\213\47\0\1\214"+
    "\43\0\1\215\4\0\1\216\50\0\1\217\60\0\1\220"+
    "\60\0\1\221\54\0\1\222\55\0\1\223\75\0\1\224"+
    "\40\0\1\225\70\0\1\226\47\0\1\227\51\0\1\230"+
    "\71\0\1\231\64\0\1\232\53\0\1\137\44\0\1\233"+
    "\60\0\1\234\53\0\1\235\61\0\1\130\52\0\1\236"+
    "\70\0\1\237\44\0\1\240\63\0\1\241\54\0\1\242"+
    "\47\0\1\243\64\0\1\244\50\0\1\245\73\0\1\246"+
    "\50\0\1\247\55\0\1\250\53\0\1\251\53\0\1\252"+
    "\67\0\1\253\62\0\1\254\45\0\1\255\63\0\1\256"+
    "\65\0\1\257\46\0\1\260\51\0\1\261\71\0\1\262"+
    "\45\0\1\263\54\0\1\264\102\0\1\265\34\0\1\266"+
    "\54\0\1\267\71\0\1\270\44\0\1\271\57\0\1\272"+
    "\57\0\1\273\52\0\1\274\62\0\1\275\67\0\1\276"+
    "\50\0\1\277\63\0\1\300\46\0\1\301\53\0\1\302"+
    "\61\0\1\303\61\0\1\304\63\0\1\305\43\0\1\306"+
    "\55\0\1\307\60\0\1\310\60\0\1\311\53\0\1\312"+
    "\61\0\1\313\65\0\1\314\41\0\1\315\67\0\1\316"+
    "\74\0\1\317\37\0\1\320\104\0\1\321\30\0\1\322"+
    "\20\0\1\322\1\0\2\322\1\0\1\322\36\0\1\323"+
    "\43\0\1\324\61\0\1\325\54\0\1\326\52\0\1\327"+
    "\66\0\1\330\102\0\1\331\56\0\1\332\56\0\1\304"+
    "\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7755];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\1\1\1\0\1\11\1\1\1\0\1\1\10\11"+
    "\1\0\2\11\15\0\1\11\10\0\1\11\11\0\4\11"+
    "\4\0\1\11\15\0\1\11\1\0\1\11\4\0\1\11"+
    "\11\0\2\11\5\0\1\11\1\0\2\11\2\0\1\11"+
    "\2\0\1\11\10\0\1\11\15\0\3\11\2\0\2\11"+
    "\2\0\1\11\1\1\4\0\2\11\4\0\2\11\2\0"+
    "\2\11\4\0\1\11\2\0\1\11\7\0\1\11\1\0"+
    "\1\11\2\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\2\11\3\0\1\11\3\0\1\11\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[218];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private IElementType process(IElementType type){
        return type;
    }



  public _ScalaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return process(kCASE);
          }
        case 59: break;
        case 29: 
          { return process(kTYPE);
          }
        case 60: break;
        case 48: 
          { return process(kEXTENDS);
          }
        case 61: break;
        case 31: 
          { return process(kELSE);
          }
        case 62: break;
        case 34: 
          { return process(kTRAIT);
          }
        case 63: break;
        case 58: 
          { return tINTEGERLITERAL;
          }
        case 64: break;
        case 38: 
          { return process(kFALSE);
          }
        case 65: break;
        case 33: 
          { return process(kSUPER);
          }
        case 66: break;
        case 6: 
          { return tMINUS;
          }
        case 67: break;
        case 26: 
          { return process(kVAL);
          }
        case 68: break;
        case 45: 
          { return process(kRETURN);
          }
        case 69: break;
        case 21: 
          { return process(kTRY);
          }
        case 70: break;
        case 14: 
          { return tRPARENTHIS;
          }
        case 71: break;
        case 37: 
          { return process(kCLASS);
          }
        case 72: break;
        case 5: 
          { return tPLUS;
          }
        case 73: break;
        case 9: 
          { return tLBRACKET;
          }
        case 74: break;
        case 4: 
          { return tGREATER;
          }
        case 75: break;
        case 28: 
          { return process(kTHIS);
          }
        case 76: break;
        case 8: 
          { return tDIV;
          }
        case 77: break;
        case 53: 
          { return process(kABSTRACT);
          }
        case 78: break;
        case 15: 
          { return process(kDO);
          }
        case 79: break;
        case 46: 
          { return process(kOBJECT);
          }
        case 80: break;
        case 7: 
          { return tSTAR;
          }
        case 81: break;
        case 19: 
          { return tGREATEROREQUAL;
          }
        case 82: break;
        case 18: 
          { return tEQUAL;
          }
        case 83: break;
        case 16: 
          { return process(kIF);
          }
        case 84: break;
        case 47: 
          { return process(kIMPORT);
          }
        case 85: break;
        case 49: 
          { return process(kFINALLY);
          }
        case 86: break;
        case 35: 
          { return process(kTHROW);
          }
        case 87: break;
        case 22: 
          { return process(kDEF);
          }
        case 88: break;
        case 50: 
          { return process(kPACKAGE);
          }
        case 89: break;
        case 40: 
          { return process(kYIELD);
          }
        case 90: break;
        case 25: 
          { return process(kVAR);
          }
        case 91: break;
        case 20: 
          { return tNOTEQUAL;
          }
        case 92: break;
        case 39: 
          { return process(kFINAL);
          }
        case 93: break;
        case 55: 
          { return process(kOVERRIDE);
          }
        case 94: break;
        case 54: 
          { return process(kREQUIRES);
          }
        case 95: break;
        case 13: 
          { return tLPARENTHIS;
          }
        case 96: break;
        case 32: 
          { return process(kNULL);
          }
        case 97: break;
        case 23: 
          { return process(kFOR);
          }
        case 98: break;
        case 17: 
          { return tLESSOREQUAL;
          }
        case 99: break;
        case 56: 
          { return process(kIMPLICIT);
          }
        case 100: break;
        case 3: 
          { return tLESS;
          }
        case 101: break;
        case 42: 
          { return process(kWHITH);
          }
        case 102: break;
        case 44: 
          { return process(kSEALED);
          }
        case 103: break;
        case 12: 
          { return tRBRACE;
          }
        case 104: break;
        case 24: 
          { return process(kNEW);
          }
        case 105: break;
        case 11: 
          { return tLBRACE;
          }
        case 106: break;
        case 43: 
          { return process(kWHILE);
          }
        case 107: break;
        case 10: 
          { return tRBRACKET;
          }
        case 108: break;
        case 1: 
          { return tWHITE_SPACE;
          }
        case 109: break;
        case 51: 
          { return process(kPRIVATE);
          }
        case 110: break;
        case 57: 
          { return process(kPROTECTED);
          }
        case 111: break;
        case 36: 
          { return process(kCATCH);
          }
        case 112: break;
        case 27: 
          { return process(kTRUE);
          }
        case 113: break;
        case 52: 
          { return tID;
          }
        case 114: break;
        case 41: 
          { return process(kMATCH);
          }
        case 115: break;
        case 2: 
          { 
          }
        case 116: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
