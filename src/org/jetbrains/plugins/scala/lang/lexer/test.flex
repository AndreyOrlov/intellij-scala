package org.jetbrains.plugins.scala.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;

%%

%class _ScalaLexer
%implements FlexLexer, ScalaTokenTypes
%unicode
%public

%function advance
%type IElementType

%eof{ return;
%eof}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// USER CODE //////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

%{



%}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////// REGEXPS DECLARATIONS //////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////// integers /////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
DIGIT=[0-9]
DIGITS={DIGIT}|{DIGIT}"_"{DIGIT}
DECIMAL_INTEGER_LITERAL={DIGITS}+


INTEGER_LITERAL=
    {DECIMAL_INTEGER_LITERAL}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Operations //////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
OP =    "|" | "^"' | "&" | "<=>" | "==" | "===" | "=~" | ">" | ">=" | "<" | "<=" | "<<" | ">>"
        | "+" | "-" | "*" | "/" | "%" | "**" | "~" | "+@" | "-@" | "[]" | "[]=" | "`"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////// others //////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ESCAPE_SEQUENCE = "\\" | "\\t" | "\\n" | "\\r" | "\\f" | "\\b" | "\\a" | "\\e" | "\\s" | "\\v" | "\\\\" |
                "\\"({OCTAL_DIGIT}{1,3}) | "\\x"({HEX_DIGIT}{1,2})

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Keywords ////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
RESWORD	= "print"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// varibles and so on /////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// variables and so on
CHAR  = [^ \t\f\13\r\n]
SINGLE_CHAR = {ESCAPE_SEQUENCE} | {CHAR}

IDENT_CHAR=[a-zA-Z0-9_]
IDENT_LEADER=[a-z_]

EOL= "\r" | "\n"
WHITE_SPACE_CHAR= " " | "\t" | "\f" | "\r" | "\13"
LINE_CONTINUATION = "\\"{EOL}
WHITE_SPACE = {WHITE_SPACE_CHAR}+

IDENTIFIER={IDENT_LEADER}({IDENT_CHAR}*)
DELIMITER_CHAR = [^ _a-zA-Z0-9] | {EOL}


%%
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////// RULES declarations ////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<YYINITIAL>{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// comparison operators ///////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


"+"                                     {   return tPLUS; }
"-"                                     {   return tMINUS; }
"*"                                     {   return tSTAR; }
"/"                                     {   return tDIV; }

"("                                     {   return tLBRACKET; }
")"                                     {   return tRBRACKET; }

"print"                                 {
                                            System.out.println("print!!!");
                                            return kPRINT;                                            
                                        }

{WHITE_SPACE}                           {   return tWHITE_SPACE; }
{EOL}                                   {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////// Variables  /////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{IDENTIFIER}                            {   return tIDENTIFIER; }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////// Literals /////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

{INTEGER_LITERAL}                       {   return tINTEGER; }

}