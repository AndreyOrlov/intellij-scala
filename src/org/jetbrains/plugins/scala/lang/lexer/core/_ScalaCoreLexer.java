/* The following code was generated by JFlex 1.4.3 on 30.11.12 14:03 */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;
import org.jetbrains.plugins.scala.lang.scaladoc.parser.ScalaDocElementTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30.11.12 14:03 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INSIDE_MULTI_LINE_INTERPOLATED_STRING = 8;
  public static final int WAIT_FOR_INTERPOLATED_STRING = 4;
  public static final int INSIDE_INTERPOLATED_STRING = 6;
  public static final int COMMON_STATE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\34\1\46\1\36\1\0\1\46\1\36\16\34\4\0\1\46\1\22"+
    "\1\42\1\23\1\43\1\113\1\24\1\41\1\57\1\60\1\25\1\13"+
    "\1\115\1\14\1\10\1\31\1\3\1\107\1\106\5\6\1\5\1\111"+
    "\1\26\1\114\1\47\1\105\1\32\1\50\1\27\1\40\1\7\1\52"+
    "\1\17\1\11\1\15\5\33\1\1\6\33\1\75\1\53\6\33\1\51"+
    "\1\30\1\55\1\24\1\35\1\21\1\61\1\62\1\66\1\20\1\12"+
    "\1\16\1\104\1\71\1\73\1\70\1\103\1\2\1\76\1\72\1\67"+
    "\1\77\1\33\1\65\1\63\1\64\1\37\1\102\1\101\1\4\1\74"+
    "\1\100\1\54\1\24\1\56\1\24\6\34\1\44\32\34\2\0\4\33"+
    "\2\24\1\0\1\24\1\33\1\0\1\24\1\34\1\24\1\0\1\24"+
    "\1\24\3\0\1\33\1\24\3\0\1\33\5\0\27\33\1\24\37\33"+
    "\1\24\u013f\33\31\0\162\33\4\0\14\33\16\0\5\33\11\0\1\33"+
    "\21\0\130\34\5\0\23\34\12\0\1\33\13\0\1\33\1\0\3\33"+
    "\1\0\1\33\1\0\24\33\1\0\54\33\1\0\46\33\1\24\5\33"+
    "\4\0\202\33\1\24\4\34\3\0\105\33\1\0\46\33\2\0\2\33"+
    "\6\0\20\33\41\0\46\33\2\0\1\33\7\0\47\33\11\0\21\34"+
    "\1\0\27\34\1\0\3\34\1\0\1\34\1\0\2\34\1\0\1\34"+
    "\13\0\33\33\5\0\3\33\15\0\4\34\12\0\2\24\6\34\13\0"+
    "\32\33\5\0\13\33\16\34\7\0\12\34\4\0\2\33\1\34\143\33"+
    "\1\0\1\33\10\34\1\0\6\34\2\33\2\34\1\24\4\34\2\33"+
    "\12\34\3\33\2\24\1\33\17\0\1\34\1\33\1\34\36\33\33\34"+
    "\2\0\3\33\60\0\46\33\13\34\1\33\u014f\0\3\34\66\33\2\0"+
    "\1\34\1\33\20\34\2\0\1\33\4\34\3\0\12\33\2\34\2\0"+
    "\12\34\21\0\3\34\1\0\10\33\2\0\2\33\2\0\26\33\1\0"+
    "\7\33\1\0\1\33\3\0\4\33\2\0\1\34\1\33\7\34\2\0"+
    "\2\34\2\0\3\34\11\0\1\34\4\0\2\33\1\0\3\33\2\34"+
    "\2\0\12\34\4\33\6\0\1\24\6\0\3\34\1\0\6\33\4\0"+
    "\2\33\2\0\26\33\1\0\7\33\1\0\2\33\1\0\2\33\1\0"+
    "\2\33\2\0\1\34\1\0\5\34\4\0\2\34\2\0\3\34\13\0"+
    "\4\33\1\0\1\33\7\0\14\34\3\33\14\0\3\34\1\0\11\33"+
    "\1\0\3\33\1\0\26\33\1\0\7\33\1\0\2\33\1\0\5\33"+
    "\2\0\1\34\1\33\10\34\1\0\3\34\1\0\3\34\2\0\1\33"+
    "\17\0\2\33\2\34\2\0\12\34\1\0\1\33\17\0\3\34\1\0"+
    "\10\33\2\0\2\33\2\0\26\33\1\0\7\33\1\0\2\33\1\0"+
    "\5\33\2\0\1\34\1\33\6\34\3\0\2\34\2\0\3\34\10\0"+
    "\2\34\4\0\2\33\1\0\3\33\4\0\12\34\1\24\1\33\20\0"+
    "\1\34\1\33\1\0\6\33\3\0\3\33\1\0\4\33\3\0\2\33"+
    "\1\0\1\33\1\0\2\33\3\0\2\33\3\0\3\33\3\0\10\33"+
    "\1\0\3\33\4\0\5\34\3\0\3\34\1\0\4\34\11\0\1\34"+
    "\17\0\11\34\3\0\6\24\1\33\1\24\6\0\3\34\1\0\10\33"+
    "\1\0\3\33\1\0\27\33\1\0\12\33\1\0\5\33\4\0\7\34"+
    "\1\0\3\34\1\0\4\34\7\0\2\34\11\0\2\33\4\0\12\34"+
    "\22\0\2\34\1\0\10\33\1\0\3\33\1\0\27\33\1\0\12\33"+
    "\1\0\5\33\2\0\1\34\1\33\7\34\1\0\3\34\1\0\4\34"+
    "\7\0\2\34\7\0\1\33\1\0\2\33\4\0\12\34\22\0\2\34"+
    "\1\0\10\33\1\0\3\33\1\0\27\33\1\0\20\33\4\0\6\34"+
    "\2\0\3\34\1\0\4\34\11\0\1\34\10\0\2\33\4\0\12\34"+
    "\22\0\2\34\1\0\22\33\3\0\30\33\1\0\11\33\1\0\1\33"+
    "\2\0\7\33\3\0\1\34\4\0\6\34\1\0\1\34\1\0\10\34"+
    "\22\0\2\34\15\0\60\33\1\34\2\33\7\34\4\0\10\33\10\34"+
    "\1\0\12\34\47\0\2\33\1\0\1\33\2\0\2\33\1\0\1\33"+
    "\2\0\1\33\6\0\4\33\1\0\7\33\1\0\3\33\1\0\1\33"+
    "\1\0\1\33\2\0\2\33\1\0\4\33\1\34\2\33\6\34\1\0"+
    "\2\34\1\33\2\0\5\33\1\0\1\33\1\0\6\34\2\0\12\34"+
    "\2\0\2\33\42\0\1\33\3\24\17\0\5\24\2\34\6\24\12\34"+
    "\12\0\1\24\1\34\1\24\1\34\1\24\1\34\4\0\2\34\10\33"+
    "\1\0\42\33\6\0\24\34\1\0\2\34\4\33\4\0\10\34\1\0"+
    "\44\34\1\0\10\24\1\34\6\24\2\0\1\24\60\0\42\33\1\0"+
    "\5\33\1\0\2\33\1\0\7\34\3\0\4\34\6\0\12\34\6\0"+
    "\6\33\4\34\106\0\46\33\12\0\51\33\7\0\132\33\5\0\104\33"+
    "\5\0\122\33\6\0\7\33\1\0\77\33\1\0\1\33\1\0\4\33"+
    "\2\0\7\33\1\0\1\33\1\0\4\33\2\0\47\33\1\0\1\33"+
    "\1\0\4\33\2\0\37\33\1\0\1\33\1\0\4\33\2\0\7\33"+
    "\1\0\1\33\1\0\4\33\2\0\7\33\1\0\7\33\1\0\27\33"+
    "\1\0\37\33\1\0\1\33\1\0\4\33\2\0\7\33\1\0\47\33"+
    "\1\0\23\33\16\0\11\34\56\0\125\33\14\0\u026c\33\2\0\10\33"+
    "\12\0\32\33\5\0\113\33\3\0\3\33\17\0\15\33\1\0\4\33"+
    "\3\34\13\0\22\33\3\34\13\0\22\33\2\34\14\0\15\33\1\0"+
    "\3\33\1\0\2\34\14\0\64\33\40\34\3\0\1\33\3\0\2\33"+
    "\1\34\2\0\12\34\41\0\3\34\2\0\12\34\6\0\130\33\10\0"+
    "\51\33\1\34\126\0\35\33\3\0\14\34\4\0\14\34\4\0\1\24"+
    "\5\0\12\34\36\33\2\0\5\33\153\0\40\24\u0300\0\154\33\224\0"+
    "\234\33\4\0\132\33\6\0\26\33\2\0\6\33\2\0\46\33\2\0"+
    "\6\33\2\0\10\33\1\0\1\33\1\0\1\33\1\0\1\33\1\0"+
    "\37\33\2\0\65\33\1\0\7\33\1\0\1\33\3\0\3\33\1\0"+
    "\7\33\3\0\4\33\2\0\6\33\4\0\15\33\5\0\3\33\1\0"+
    "\7\33\17\0\4\34\30\0\1\45\1\45\5\34\20\0\2\33\3\0"+
    "\1\24\15\0\1\24\1\0\1\33\13\0\4\34\6\0\6\34\1\0"+
    "\1\33\10\0\3\24\2\0\1\33\12\0\3\24\23\0\22\33\36\0"+
    "\15\34\4\0\1\34\3\0\6\34\25\0\2\24\1\33\4\24\1\33"+
    "\2\24\12\33\1\24\1\33\3\24\5\33\6\24\1\33\1\24\1\33"+
    "\1\24\1\33\1\24\4\33\1\24\3\33\1\24\7\33\2\24\1\0"+
    "\3\33\5\24\5\33\1\24\1\24\24\0\44\33\14\0\1\112\4\24"+
    "\5\24\2\24\4\24\1\24\2\24\1\24\2\24\1\24\7\24\1\24"+
    "\37\24\2\24\2\24\1\110\1\24\1\24\37\24\u010c\24\10\24\4\24"+
    "\24\24\2\24\7\24\2\0\121\24\1\24\36\24\31\24\3\0\32\24"+
    "\57\0\47\24\31\0\13\24\121\0\116\24\26\0\267\24\1\24\11\24"+
    "\1\24\66\24\10\24\30\24\1\0\126\24\1\24\16\24\2\0\22\24"+
    "\16\0\2\24\137\0\4\24\1\0\4\24\2\0\34\24\1\0\43\24"+
    "\1\0\1\24\1\0\4\24\3\0\1\24\1\0\7\24\2\0\7\24"+
    "\54\0\1\24\3\0\30\24\1\0\16\24\21\0\26\24\12\0\20\24"+
    "\u0100\24\203\24\26\0\77\24\4\0\40\24\2\0\u0102\24\16\24\u0372\0"+
    "\32\24\1\0\131\24\14\0\326\24\32\0\14\24\10\0\1\24\3\33"+
    "\12\0\2\24\14\0\1\24\11\33\6\34\1\0\5\33\2\24\5\33"+
    "\1\0\2\24\1\0\126\33\2\0\2\34\2\0\3\33\1\0\137\33"+
    "\5\0\50\33\4\0\136\33\1\0\2\24\4\0\12\24\30\33\70\0"+
    "\20\33\37\24\13\0\32\24\14\0\1\24\17\0\36\24\1\0\1\24"+
    "\12\0\47\24\17\0\77\24\1\0\u0100\24\u19b6\33\12\0\100\24\u51a6\33"+
    "\132\0\u048d\33\3\0\67\24\u0739\0\u2ba4\33\u215c\0\u012e\33\2\0\73\33"+
    "\225\0\7\33\14\0\5\33\5\0\1\33\1\34\12\33\1\24\15\33"+
    "\1\0\5\33\1\0\1\33\1\0\2\33\1\0\2\33\1\0\154\33"+
    "\41\0\u016b\33\22\0\100\33\2\0\66\33\50\0\15\33\1\24\2\0"+
    "\20\34\20\0\4\34\17\0\2\33\30\0\3\33\22\0\1\24\1\0"+
    "\3\24\2\0\1\33\6\0\5\33\1\0\207\33\2\0\1\34\4\0"+
    "\1\33\6\0\1\24\4\0\12\34\2\0\3\24\2\0\32\33\4\0"+
    "\1\33\1\0\32\33\1\0\1\24\1\0\1\24\6\0\132\33\3\0"+
    "\6\33\2\0\6\33\2\0\6\33\2\0\3\33\3\0\2\33\1\24"+
    "\1\0\1\24\2\33\1\0\1\24\4\24\2\24\12\0\3\34\2\24"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\4\0\1\3\2\4\2\5\1\6"+
    "\4\4\1\3\1\7\1\10\1\11\3\4\1\12\1\13"+
    "\1\3\1\14\1\13\1\4\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\15\4\1\23\1\24\1\25\1\26\1\27"+
    "\1\4\1\30\1\1\1\14\1\31\1\32\1\14\1\2"+
    "\2\14\14\0\1\4\1\33\1\4\2\5\2\0\1\34"+
    "\1\0\2\34\6\4\1\35\1\0\1\4\1\0\2\4"+
    "\1\0\1\4\1\36\1\37\1\0\3\40\1\14\1\0"+
    "\1\41\1\42\1\4\1\43\1\4\1\44\2\0\15\4"+
    "\1\45\10\4\1\30\3\0\2\46\1\0\1\47\1\50"+
    "\2\0\1\51\2\52\1\0\1\47\1\53\14\0\1\4"+
    "\1\33\2\0\1\4\1\0\1\5\3\54\1\0\1\34"+
    "\1\0\3\4\1\55\1\4\1\56\1\4\1\0\2\4"+
    "\2\0\2\4\1\57\3\40\2\0\1\41\1\0\1\4"+
    "\1\0\1\60\2\0\1\61\2\0\5\4\1\62\11\4"+
    "\1\63\12\4\1\64\1\65\1\66\2\46\2\0\1\67"+
    "\2\52\6\0\1\33\1\70\2\54\1\0\1\71\4\4"+
    "\1\0\1\72\1\4\2\0\1\4\1\0\2\4\1\73"+
    "\4\0\1\42\5\0\3\4\1\74\2\4\1\75\1\76"+
    "\2\4\1\77\3\4\1\100\11\4\1\101\1\0\1\46"+
    "\1\52\2\0\1\54\1\4\1\102\1\4\1\103\1\72"+
    "\1\0\1\4\2\0\1\73\1\0\1\104\6\0\2\4"+
    "\1\105\1\106\1\107\1\4\1\110\1\0\1\4\1\111"+
    "\4\4\1\112\1\113\1\114\3\4\1\115\3\0\3\4"+
    "\1\0\1\4\1\24\1\25\1\104\2\0\1\116\3\0"+
    "\1\4\1\117\1\120\2\0\2\4\1\121\2\4\1\122"+
    "\3\4\1\123\1\124\1\125\1\0\1\4\4\0\1\4"+
    "\2\0\4\4\1\126\1\4\1\127\1\0\1\72\3\0"+
    "\1\130\2\0\2\4\1\131\1\132\1\4\1\72\4\0"+
    "\2\4\1\133\1\134\1\0\1\134\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u04e0\0\u06b4"+
    "\0\u0702\0\u0750\0\u030c\0\u079e\0\u07ec\0\u083a\0\u02be\0\u0888"+
    "\0\u02be\0\u08d6\0\u02be\0\u02be\0\u0924\0\u02be\0\u0972\0\u09c0"+
    "\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30"+
    "\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u04e0\0\u04e0\0\u02be\0\u02be"+
    "\0\u0db6\0\u0e04\0\u0e52\0\u0ea0\0\u02be\0\u02be\0\u0eee\0\u0f3c"+
    "\0\u0f8a\0\u0fd8\0\u1026\0\u1074\0\u10c2\0\u1110\0\u115e\0\u11ac"+
    "\0\u11fa\0\u1248\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u141c"+
    "\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u02be"+
    "\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860\0\u030c"+
    "\0\u05ca\0\u02be\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34"+
    "\0\u04e0\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56"+
    "\0\u02be\0\u1ca4\0\u04e0\0\u1cf2\0\u04e0\0\u1d40\0\u1d8e\0\u1ddc"+
    "\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c"+
    "\0\u209a\0\u20e8\0\u2136\0\u2184\0\u030c\0\u21d2\0\u2220\0\u226e"+
    "\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490\0\u24de"+
    "\0\u0ea0\0\u252c\0\u257a\0\u25c8\0\u252c\0\u02be\0\u2616\0\u2664"+
    "\0\u02be\0\u26b2\0\u2700\0\u274e\0\u26b2\0\u02be\0\u279c\0\u27ea"+
    "\0\u2838\0\u2886\0\u28d4\0\u2922\0\u02be\0\u2970\0\u29be\0\u02be"+
    "\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e"+
    "\0\u2c7c\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e"+
    "\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6\0\u030c\0\u05ca\0\u3024\0\u3072"+
    "\0\u30c0\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u02be\0\u3246\0\u3294"+
    "\0\u32e2\0\u3330\0\u337e\0\u02be\0\u33cc\0\u341a\0\u3468\0\u02be"+
    "\0\u34b6\0\u3504\0\u02be\0\u3552\0\u35a0\0\u35ee\0\u363c\0\u368a"+
    "\0\u36d8\0\u3726\0\u030c\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac"+
    "\0\u38fa\0\u3948\0\u3996\0\u39e4\0\u030c\0\u3a32\0\u3a80\0\u3ace"+
    "\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06\0\u3c54\0\u3ca2\0\u3cf0\0\u030c"+
    "\0\u030c\0\u3d3e\0\u3d8c\0\u02be\0\u3dda\0\u3e28\0\u02be\0\u3e76"+
    "\0\u02be\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u11ac\0\u3ffc\0\u404a"+
    "\0\u030c\0\u4098\0\u02be\0\u40e6\0\u030c\0\u4134\0\u4182\0\u41d0"+
    "\0\u421e\0\u426c\0\u18fc\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u43f2"+
    "\0\u4440\0\u448e\0\u04e0\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u04e0"+
    "\0\u4614\0\u4662\0\u46b0\0\u46fe\0\u474c\0\u479a\0\u47e8\0\u4836"+
    "\0\u030c\0\u4884\0\u48d2\0\u030c\0\u030c\0\u4920\0\u496e\0\u49bc"+
    "\0\u4a0a\0\u4a58\0\u4aa6\0\u030c\0\u4af4\0\u4b42\0\u4b90\0\u4bde"+
    "\0\u4c2c\0\u4c7a\0\u4cc8\0\u4d16\0\u4d64\0\u030c\0\u4db2\0\u25c8"+
    "\0\u274e\0\u4e00\0\u4e4e\0\u2db4\0\u4e9c\0\u030c\0\u4eea\0\u4f38"+
    "\0\u3024\0\u4f86\0\u4fd4\0\u5022\0\u5070\0\u02be\0\u50be\0\u04e0"+
    "\0\u510c\0\u515a\0\u51a8\0\u51f6\0\u5244\0\u5292\0\u52e0\0\u532e"+
    "\0\u030c\0\u030c\0\u030c\0\u537c\0\u030c\0\u53ca\0\u5418\0\u030c"+
    "\0\u5466\0\u54b4\0\u5502\0\u5550\0\u030c\0\u030c\0\u030c\0\u559e"+
    "\0\u55ec\0\u563a\0\u030c\0\u5688\0\u2922\0\u56d6\0\u5724\0\u5772"+
    "\0\u57c0\0\u580e\0\u585c\0\u02be\0\u02be\0\u02be\0\u58aa\0\u58f8"+
    "\0\u5946\0\u5994\0\u59e2\0\u5a30\0\u5a7e\0\u030c\0\u030c\0\u5acc"+
    "\0\u5b1a\0\u5b68\0\u5bb6\0\u030c\0\u5c04\0\u5c52\0\u030c\0\u5ca0"+
    "\0\u5cee\0\u5d3c\0\u030c\0\u030c\0\u030c\0\u5d8a\0\u5dd8\0\u5e26"+
    "\0\u5e74\0\u5ec2\0\u5f10\0\u5f5e\0\u5fac\0\u5ffa\0\u6048\0\u6096"+
    "\0\u60e4\0\u6132\0\u030c\0\u6180\0\u030c\0\u61ce\0\u42ba\0\u621c"+
    "\0\u626a\0\u62b8\0\u030c\0\u6306\0\u6354\0\u63a2\0\u63f0\0\u030c"+
    "\0\u030c\0\u643e\0\u4f86\0\u648c\0\u64da\0\u6528\0\u6576\0\u65c4"+
    "\0\u6612\0\u030c\0\u02be\0\u6660\0\u030c\0\u66ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\13\2\16\1\13\1\17"+
    "\1\13\1\20\2\21\1\13\1\22\1\13\1\23\1\24"+
    "\1\21\1\25\2\21\1\26\1\27\1\30\1\31\1\32"+
    "\1\13\1\12\1\33\1\34\2\13\1\35\1\36\1\13"+
    "\2\34\1\37\1\40\1\21\1\41\2\13\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\13\1\50\1\51\1\52"+
    "\1\53\1\54\2\13\1\55\1\56\1\57\1\13\1\60"+
    "\1\61\1\13\1\62\1\63\2\13\1\64\2\16\1\65"+
    "\1\16\1\66\1\21\1\67\1\70\1\12\1\13\1\14"+
    "\1\15\1\13\2\16\1\13\1\17\1\13\1\20\2\21"+
    "\1\13\1\22\1\13\1\23\1\24\1\21\1\25\2\21"+
    "\1\26\1\27\1\30\1\31\1\32\1\13\1\12\1\33"+
    "\1\34\2\13\1\35\1\36\1\13\2\34\1\37\1\71"+
    "\1\21\1\41\2\13\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\13\1\50\1\51\1\52\1\53\1\54\2\13"+
    "\1\55\1\56\1\57\1\13\1\60\1\61\1\13\1\62"+
    "\1\63\2\13\1\64\2\16\1\65\1\16\1\66\1\21"+
    "\1\67\1\70\42\0\1\72\53\0\30\73\1\74\5\73"+
    "\1\75\3\73\1\76\1\77\52\73\42\100\1\101\1\102"+
    "\52\100\1\0\2\103\1\0\1\103\2\0\1\103\1\0"+
    "\2\103\2\0\4\103\12\0\1\103\1\0\1\103\1\0"+
    "\2\103\2\0\1\103\6\0\2\103\5\0\24\103\11\0"+
    "\30\104\1\105\5\104\1\106\3\104\1\107\1\110\52\104"+
    "\3\0\1\111\1\0\2\112\77\0\2\112\1\0\1\112"+
    "\5\0\2\113\1\114\1\113\2\114\1\113\1\0\2\113"+
    "\2\115\4\113\1\116\11\115\1\113\1\114\1\113\1\0"+
    "\2\113\2\0\1\113\1\114\2\0\2\115\1\0\2\113"+
    "\5\0\24\113\1\115\2\114\1\115\1\114\2\115\121\0"+
    "\7\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\24\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\1\121\23\13"+
    "\1\0\2\13\1\0\1\13\5\0\2\122\1\123\1\124"+
    "\1\125\1\123\1\0\1\126\2\127\2\0\4\130\65\0"+
    "\2\123\1\0\1\125\5\0\2\122\1\16\1\0\2\16"+
    "\1\0\1\126\2\127\2\0\4\130\65\0\2\16\1\0"+
    "\1\16\7\0\1\131\1\0\2\131\77\0\2\131\1\0"+
    "\1\131\5\0\1\13\1\132\1\13\1\133\3\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\24\13\1\0"+
    "\2\13\1\0\1\13\17\0\2\21\5\0\11\21\14\0"+
    "\2\21\34\0\1\21\2\0\1\21\1\0\2\21\3\0"+
    "\7\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\1\134\5\13\1\135\3\13\1\136\11\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\1\13\1\137\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\6\13\1\140\15\13\1\0"+
    "\2\13\1\0\1\13\4\0\21\141\1\142\6\141\1\143"+
    "\5\141\1\0\5\141\2\0\50\141\13\0\2\21\5\0"+
    "\1\144\10\21\14\0\2\21\34\0\1\21\2\0\1\21"+
    "\1\0\2\21\15\0\2\21\5\0\4\21\1\145\4\21"+
    "\14\0\2\21\34\0\1\21\2\0\1\21\1\0\2\21"+
    "\15\0\2\21\5\0\11\21\4\0\1\146\7\0\2\21"+
    "\34\0\1\21\2\0\1\21\1\0\2\21\15\0\2\21"+
    "\5\0\3\21\1\147\3\21\1\150\1\21\14\0\2\21"+
    "\34\0\1\21\2\0\1\21\1\0\2\21\15\0\2\21"+
    "\5\0\4\21\1\151\4\21\14\0\2\21\34\0\1\21"+
    "\2\0\1\21\1\0\2\21\40\0\1\34\5\0\3\34"+
    "\47\0\1\152\2\153\1\152\1\153\2\152\1\153\1\152"+
    "\2\153\2\154\4\153\1\152\6\154\1\155\2\154\1\153"+
    "\1\152\1\153\1\0\2\153\1\0\1\152\1\153\3\152"+
    "\2\154\1\152\2\153\5\152\24\153\1\154\2\152\1\154"+
    "\1\152\2\154\2\152\30\156\1\157\5\156\1\0\3\156"+
    "\1\160\53\156\1\0\2\161\1\0\1\161\2\0\1\161"+
    "\1\0\2\161\1\21\1\66\4\161\1\0\1\162\3\21"+
    "\1\163\4\21\1\161\1\0\1\161\1\0\2\161\2\0"+
    "\1\161\3\0\1\21\1\164\1\0\2\161\5\0\24\161"+
    "\1\21\2\0\1\21\1\0\1\21\1\165\51\0\1\166"+
    "\115\0\1\167\47\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\1\13\1\170\22\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\1\13\1\171\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\1\172\1\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\24\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\4\13\1\173\3\13\1\174\2\13"+
    "\1\175\10\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\1\13\1\176\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\24\13\1\0\2\13\1\0\1\13\5\0\1\13\1\177"+
    "\5\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\1\200\23\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\1\13"+
    "\1\201\17\13\1\202\2\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\1\13\1\203\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\1\204\1\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\24\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\1\13\1\205\2\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\15\13\1\206\6\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\12\13\1\207\11\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\1\210\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\1\211\3\13\1\212\17\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\10\13\1\213\1\13\1\214\11\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\1\215\23\13\1\0"+
    "\2\13\1\0\1\13\17\0\2\21\5\0\10\21\1\65"+
    "\14\0\2\21\34\0\1\21\2\0\1\21\1\0\2\21"+
    "\15\0\1\21\1\66\5\0\4\21\1\163\4\21\14\0"+
    "\2\21\34\0\1\21\2\0\1\21\1\0\1\21\1\165"+
    "\2\0\30\216\1\217\5\216\1\0\3\216\1\220\1\0"+
    "\52\216\30\73\1\221\5\73\1\0\3\73\2\0\110\73"+
    "\1\0\57\73\1\0\2\222\1\0\1\222\2\0\1\222"+
    "\1\0\2\222\2\223\4\222\1\224\11\223\1\222\1\0"+
    "\1\222\1\0\2\222\2\0\1\225\3\0\2\223\1\0"+
    "\2\222\1\226\4\0\24\222\1\223\2\0\1\223\1\0"+
    "\2\223\2\0\42\100\1\227\1\0\114\100\1\230\1\231"+
    "\52\100\1\0\2\232\1\0\1\232\2\0\1\232\1\0"+
    "\2\232\2\233\4\232\1\234\11\233\1\232\1\0\1\232"+
    "\1\0\2\232\2\0\1\235\3\0\2\233\1\0\2\232"+
    "\1\236\4\0\24\232\1\233\2\0\1\233\1\0\2\233"+
    "\3\0\7\103\1\0\2\103\2\0\4\103\12\0\2\103"+
    "\1\237\1\0\2\103\2\0\2\103\5\0\2\103\5\0"+
    "\24\103\1\0\2\103\1\0\1\103\4\0\36\104\1\106"+
    "\3\104\1\240\1\110\52\104\30\106\1\241\11\106\1\242"+
    "\1\0\114\106\1\242\1\0\52\106\30\0\1\243\11\0"+
    "\1\244\103\0\1\243\66\0\2\245\1\246\1\247\1\0"+
    "\1\246\77\0\2\246\7\0\2\245\1\112\1\0\2\112"+
    "\77\0\2\112\1\0\1\112\5\0\2\113\1\114\1\113"+
    "\2\114\1\113\1\250\2\113\2\0\4\113\12\0\1\113"+
    "\1\114\1\113\1\0\2\113\2\0\1\113\1\114\5\0"+
    "\2\113\5\0\24\113\1\0\2\114\1\0\1\114\5\0"+
    "\2\113\1\114\1\113\2\114\1\113\1\0\2\113\2\0"+
    "\4\113\12\0\1\113\1\114\1\113\1\0\2\113\2\0"+
    "\1\113\1\114\5\0\2\113\5\0\24\113\1\0\2\114"+
    "\1\0\1\114\14\0\1\250\2\0\2\115\5\0\11\115"+
    "\2\0\1\114\11\0\2\115\34\0\1\115\2\0\1\115"+
    "\1\0\2\115\2\0\21\116\1\251\14\116\1\0\5\116"+
    "\2\252\50\116\1\0\7\13\1\0\2\13\2\253\4\13"+
    "\1\0\11\253\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\2\0\2\253\1\0\2\13\5\0\24\13\1\253"+
    "\2\13\1\253\1\13\2\253\2\0\30\254\1\255\5\254"+
    "\1\0\3\254\1\256\1\0\52\254\1\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\17\13\1\257"+
    "\4\13\1\0\2\13\1\0\1\13\14\0\1\260\106\0"+
    "\2\122\1\123\1\0\1\125\1\123\1\0\1\126\2\127"+
    "\2\0\4\130\65\0\2\123\1\0\1\125\7\0\1\261"+
    "\1\0\3\261\1\0\2\261\2\0\4\261\17\0\1\261"+
    "\11\0\1\261\6\0\2\261\3\0\1\261\17\0\2\261"+
    "\1\0\1\261\7\0\1\125\1\0\2\125\1\0\1\131"+
    "\2\127\2\0\4\130\65\0\2\125\1\0\1\125\5\0"+
    "\2\262\1\131\1\262\2\131\1\262\1\0\2\263\2\264"+
    "\4\262\1\265\11\264\1\262\1\0\1\262\1\0\2\262"+
    "\2\0\1\262\3\0\2\264\1\0\2\262\5\0\24\262"+
    "\1\264\2\131\1\264\1\131\2\264\5\0\1\266\1\0"+
    "\2\266\4\0\2\267\71\0\2\266\1\0\1\266\7\0"+
    "\1\131\1\0\2\131\2\0\2\127\2\0\4\130\65\0"+
    "\2\131\1\0\1\131\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\2\13\1\270\21\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\3\13\1\271\20\13\1\0"+
    "\2\13\1\0\1\13\5\0\1\13\1\272\5\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\24\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\4\13\1\273\17\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\11\13\1\274\12\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\1\13\1\275\2\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\24\13\1\0"+
    "\2\13\1\0\1\13\4\0\21\141\1\276\6\141\1\143"+
    "\5\141\1\0\57\141\13\277\2\144\5\277\1\300\10\144"+
    "\14\277\2\144\34\277\1\144\2\277\1\144\1\277\2\144"+
    "\2\277\13\0\2\21\5\0\1\21\1\301\7\21\14\0"+
    "\2\21\34\0\1\21\2\0\1\21\1\0\2\21\110\0"+
    "\1\302\7\0\13\303\2\304\5\303\3\304\1\305\3\304"+
    "\1\21\1\304\14\303\2\304\34\303\1\304\2\303\1\304"+
    "\1\303\2\304\2\303\36\150\1\0\57\150\30\0\1\306"+
    "\10\0\1\306\55\0\7\307\1\0\2\307\2\0\4\307"+
    "\7\0\1\306\2\0\2\307\1\310\1\0\2\307\1\306"+
    "\1\0\2\307\5\0\2\307\5\0\24\307\1\0\2\307"+
    "\1\0\1\307\17\0\2\311\5\0\11\311\6\0\1\306"+
    "\5\0\2\311\34\0\1\311\2\0\1\311\1\0\2\311"+
    "\2\0\3\152\1\312\2\152\1\312\4\152\2\154\5\152"+
    "\11\154\3\152\1\0\1\313\7\152\2\154\34\152\1\154"+
    "\2\312\1\154\1\152\2\154\2\152\30\156\1\157\5\156"+
    "\1\0\3\156\1\314\111\156\1\0\57\156\42\0\1\315"+
    "\66\0\1\21\1\316\5\0\11\21\14\0\2\21\1\317"+
    "\33\0\1\21\2\0\1\21\1\0\2\21\3\0\2\161"+
    "\1\0\1\161\2\0\1\161\1\0\2\161\2\21\4\161"+
    "\1\0\11\21\1\161\1\0\1\161\1\0\2\161\2\0"+
    "\1\161\3\0\2\21\1\0\2\161\5\0\24\161\1\21"+
    "\2\0\1\21\1\0\2\21\3\0\2\320\1\0\1\320"+
    "\2\0\1\320\1\0\2\320\2\0\4\320\1\0\1\321"+
    "\10\0\1\320\1\0\1\320\1\0\2\320\2\0\1\320"+
    "\4\0\1\322\1\0\2\320\5\0\24\320\12\0\2\323"+
    "\1\0\1\323\2\0\1\323\1\0\2\323\2\0\4\323"+
    "\1\0\1\324\10\0\1\323\1\0\1\323\1\0\2\323"+
    "\2\0\1\323\4\0\1\325\1\0\2\323\5\0\24\323"+
    "\12\0\7\13\1\0\2\13\2\0\4\13\12\0\2\13"+
    "\1\117\1\0\2\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\2\13\1\326\21\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\12\0\2\13"+
    "\1\117\1\0\2\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\1\327\23\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\16\13\1\330\5\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\1\331\1\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\1\332\12\13\1\333\10\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\4\13\1\334\5\13\1\335\11\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\16\13\1\336\5\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\3\13\1\337\20\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\1\340\23\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\2\13\1\341\1\342\20\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\7\13\1\343\14\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\1\13\1\344"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\24\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\20\13\1\345\3\13\1\0\2\13"+
    "\1\0\1\13\5\0\1\13\1\346\5\13\1\0\2\13"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\24\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\16\13\1\347\5\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\1\13\1\350\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\24\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\3\13\1\351\1\13\1\352\16\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\5\13\1\353\16\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\6\13\1\354\3\13\1\355"+
    "\11\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\12\13\1\356"+
    "\11\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\3\13\1\357"+
    "\20\13\1\0\2\13\1\0\1\13\5\0\1\13\1\360"+
    "\5\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\4\13\1\361\17\13\1\0\2\13\1\0\1\13\4\0"+
    "\30\216\1\217\5\216\1\0\3\216\2\0\110\216\1\0"+
    "\57\216\42\0\1\362\54\0\7\222\1\0\2\222\2\0"+
    "\4\222\12\0\2\222\1\363\1\0\2\222\2\0\2\222"+
    "\5\0\2\222\5\0\24\222\1\0\2\222\1\0\1\222"+
    "\17\0\2\223\5\0\11\223\14\0\2\223\34\0\1\223"+
    "\2\0\1\223\1\0\2\223\2\0\21\224\1\364\6\224"+
    "\1\365\5\224\1\0\5\224\2\0\50\224\42\100\1\366"+
    "\1\0\114\100\1\367\1\0\52\100\1\0\7\232\1\0"+
    "\2\232\2\0\4\232\12\0\2\232\1\370\1\0\2\232"+
    "\2\0\2\232\5\0\2\232\5\0\24\232\1\0\2\232"+
    "\1\0\1\232\17\0\2\233\5\0\11\233\14\0\2\233"+
    "\34\0\1\233\2\0\1\233\1\0\2\233\2\0\21\234"+
    "\1\371\6\234\1\372\5\234\1\0\5\234\2\0\50\234"+
    "\1\0\7\103\1\0\2\103\2\373\4\103\1\0\11\373"+
    "\2\103\1\237\1\0\2\103\2\0\2\103\2\0\2\373"+
    "\1\0\2\103\5\0\24\103\1\373\2\103\1\373\1\103"+
    "\2\373\2\0\30\106\1\241\11\106\1\374\1\0\52\106"+
    "\30\104\1\105\5\104\1\106\3\104\1\240\1\110\52\104"+
    "\42\106\1\374\1\0\52\106\30\375\1\110\5\375\1\0"+
    "\3\375\1\376\1\110\52\375\42\0\1\250\54\0\2\245"+
    "\1\246\2\0\1\246\77\0\2\246\11\0\1\377\1\0"+
    "\3\377\1\0\2\377\2\0\4\377\17\0\1\377\11\0"+
    "\1\377\6\0\2\377\3\0\1\377\17\0\2\377\1\0"+
    "\1\377\14\0\1\250\17\0\1\116\115\0\1\116\100\0"+
    "\2\253\5\0\11\253\7\0\1\120\4\0\2\253\34\0"+
    "\1\253\2\0\1\253\1\0\2\253\2\0\30\254\1\255"+
    "\5\254\1\0\3\254\2\0\110\254\1\0\57\254\42\0"+
    "\1\u0100\54\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\13\13\1\u0101\10\13\1\0\2\13\1\0"+
    "\1\13\5\0\2\262\1\0\1\262\2\0\1\262\1\0"+
    "\2\262\2\264\4\262\1\265\11\264\1\262\1\0\1\262"+
    "\1\0\2\262\2\0\1\262\3\0\2\264\1\0\2\262"+
    "\5\0\24\262\1\264\2\0\1\264\1\0\2\264\3\0"+
    "\2\122\1\261\1\0\3\261\1\260\2\261\2\0\4\261"+
    "\17\0\1\261\11\0\1\261\6\0\2\261\3\0\1\261"+
    "\17\0\2\261\1\0\1\261\5\0\7\262\1\0\2\262"+
    "\2\0\4\262\12\0\2\262\1\u0102\1\0\2\262\2\0"+
    "\2\262\5\0\2\262\5\0\24\262\1\0\2\262\1\0"+
    "\1\262\5\0\7\262\1\0\2\262\2\267\4\262\12\0"+
    "\2\262\1\u0102\1\0\2\262\2\0\2\262\5\0\2\262"+
    "\5\0\24\262\1\0\2\262\1\0\1\262\17\0\2\264"+
    "\5\0\11\264\14\0\2\264\34\0\1\264\2\0\1\264"+
    "\1\0\2\264\2\0\21\265\1\u0103\6\265\1\u0104\5\265"+
    "\1\0\5\265\2\0\50\265\3\0\1\266\1\0\2\266"+
    "\6\0\4\130\65\0\2\266\1\0\1\266\7\0\1\266"+
    "\1\0\2\266\77\0\2\266\1\0\1\266\5\0\7\13"+
    "\1\0\1\13\1\u0105\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\24\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\1\13\1\u0106\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\24\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\2\13\1\u0107\21\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\14\13\1\u0108\7\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\1\u0109\23\13\1\0"+
    "\2\13\1\0\1\13\4\0\22\277\1\u010a\106\277\2\144"+
    "\5\277\1\300\1\u010b\7\144\14\277\2\144\34\277\1\144"+
    "\2\277\1\144\1\277\2\144\2\277\13\0\2\21\5\0"+
    "\1\u010c\10\21\14\0\2\21\34\0\1\21\2\0\1\21"+
    "\1\0\2\21\111\0\1\u010d\6\0\25\303\1\u010e\3\303"+
    "\1\0\77\303\2\304\5\303\3\304\1\u010f\3\304\1\21"+
    "\1\304\14\303\2\304\34\303\1\304\2\303\1\304\1\303"+
    "\2\304\2\303\13\u0110\2\u0111\5\u0110\3\u0111\1\u0112\3\u0111"+
    "\1\u0113\1\u0111\14\u0110\2\u0111\34\u0110\1\u0111\2\u0110\1\u0111"+
    "\1\u0110\2\u0111\2\u0110\1\0\7\307\1\0\2\307\2\0"+
    "\4\307\12\0\2\307\1\310\1\0\2\307\2\0\2\307"+
    "\5\0\2\307\5\0\24\307\1\0\2\307\1\0\1\307"+
    "\5\0\7\307\1\0\2\307\2\311\4\307\1\0\11\311"+
    "\2\307\1\310\1\0\2\307\2\0\2\307\2\0\2\311"+
    "\1\0\2\307\5\0\24\307\1\311\2\307\1\311\1\307"+
    "\2\311\15\0\2\311\5\0\11\311\14\0\2\311\34\0"+
    "\1\311\2\0\1\311\1\0\2\311\5\0\1\u0114\2\0"+
    "\1\u0114\21\0\1\306\10\0\1\306\44\0\2\u0114\11\0"+
    "\1\u0115\1\0\3\u0116\1\0\2\u0116\2\0\4\u0116\7\0"+
    "\1\306\7\0\1\u0116\1\306\10\0\1\u0116\6\0\2\u0116"+
    "\3\0\1\u0116\17\0\2\u0116\1\0\1\u0116\4\0\42\315"+
    "\1\u0117\53\315\13\0\1\21\1\u0118\5\0\11\21\14\0"+
    "\2\21\34\0\1\21\2\0\1\21\1\0\2\21\54\0"+
    "\1\u0119\57\0\1\u011a\34\0\1\u011b\45\0\2\320\1\0"+
    "\1\320\2\0\1\320\1\0\2\320\2\0\4\320\12\0"+
    "\1\320\1\0\1\320\1\0\2\320\2\0\1\320\6\0"+
    "\2\320\5\0\24\320\25\0\1\u011c\34\0\1\u011d\45\0"+
    "\2\323\1\0\1\323\2\0\1\323\1\0\2\323\2\0"+
    "\4\323\12\0\1\323\1\0\1\323\1\0\2\323\2\0"+
    "\1\323\6\0\2\323\5\0\24\323\12\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\3\13\1\u011e"+
    "\20\13\1\0\2\13\1\0\1\13\5\0\1\13\1\u011f"+
    "\5\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\24\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\1\13\1\u0120\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\24\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\1\13"+
    "\1\u0121\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\24\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\12\13\1\u0122\11\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\6\13\1\u0123\15\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\2\13\1\u0124\21\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\1\13\1\u0125"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\24\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\1\u0126\1\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\24\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\2\13\1\u0127\21\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\1\13\1\u0128\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\24\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\12\0\2\13"+
    "\1\117\1\0\2\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\5\13\1\u0129\16\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\1\13\1\u012a\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\24\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\4\13\1\u012b\17\13\1\0\2\13\1\0\1\13\5\0"+
    "\1\13\1\u012c\5\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\24\13\1\0\2\13\1\0\1\13\5\0"+
    "\1\13\1\u012d\5\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\6\13\1\u012e\15\13\1\0\2\13\1\0"+
    "\1\13\5\0\1\13\1\u012f\5\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\24\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\5\13\1\u0130\16\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\4\13\1\u0131\17\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\22\13\1\u0132\1\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\3\13\1\u0133\20\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\21\13\1\u0134\2\13\1\0\2\13\1\0"+
    "\1\13\5\0\1\13\1\u0135\5\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\24\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\10\13\1\u0136\13\13\1\0\2\13\1\0"+
    "\1\13\4\0\42\362\1\u0137\1\0\52\362\1\0\7\222"+
    "\1\0\2\222\2\223\4\222\1\0\11\223\2\222\1\363"+
    "\1\0\2\222\2\0\2\222\2\0\2\223\1\0\2\222"+
    "\5\0\24\222\1\223\2\222\1\223\1\222\2\223\2\0"+
    "\21\224\1\u0138\6\224\1\365\5\224\1\0\57\224\42\100"+
    "\2\0\52\100\1\0\7\232\1\0\2\232\2\233\4\232"+
    "\1\0\11\233\2\232\1\370\1\0\2\232\2\0\2\232"+
    "\2\0\2\233\1\0\2\232\5\0\24\232\1\233\2\232"+
    "\1\233\1\232\2\233\2\0\21\234\1\u0139\6\234\1\372"+
    "\5\234\1\0\57\234\13\0\2\373\5\0\11\373\14\0"+
    "\2\373\34\0\1\373\2\0\1\373\1\0\2\373\2\0"+
    "\42\106\1\u013a\1\0\52\106\36\375\1\0\3\375\1\376"+
    "\1\110\52\375\1\0\2\245\1\377\1\0\3\377\1\0"+
    "\2\377\2\0\4\377\17\0\1\377\11\0\1\377\6\0"+
    "\2\377\3\0\1\377\17\0\2\377\1\0\1\377\4\0"+
    "\42\u0100\1\u013b\1\0\52\u0100\1\0\7\262\1\0\2\262"+
    "\2\264\4\262\1\0\11\264\2\262\1\u0102\1\0\2\262"+
    "\2\0\2\262\2\0\2\264\1\0\2\262\5\0\24\262"+
    "\1\264\2\262\1\264\1\262\2\264\2\0\21\265\1\u013c"+
    "\6\265\1\u0104\5\265\1\0\57\265\1\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\11\13\1\u013d"+
    "\12\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\1\13\1\u013e\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\24\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\6\13\1\u013f\15\13"+
    "\1\0\2\13\1\0\1\13\5\0\1\13\1\u0140\5\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\24\13"+
    "\1\0\2\13\1\0\1\13\4\0\22\277\1\u010a\1\u0141"+
    "\72\277\13\u0142\2\u010c\5\u0142\4\u010c\1\u0143\4\u010c\14\u0142"+
    "\2\u010c\34\u0142\1\u010c\2\u0142\1\u010c\1\u0142\2\u010c\2\u0142"+
    "\17\0\1\u0144\71\0\1\u0145\4\0\25\303\1\u010e\3\303"+
    "\1\u0146\77\303\2\304\5\303\3\304\1\u010f\3\304\1\u0113"+
    "\1\304\14\303\2\304\34\303\1\304\2\303\1\304\1\303"+
    "\2\304\2\303\25\u0110\1\u0147\3\u0110\1\0\77\u0110\2\u0111"+
    "\5\u0110\3\u0111\1\u0112\3\u0111\1\21\1\u0111\14\u0110\2\u0111"+
    "\34\u0110\1\u0111\2\u0110\1\u0111\1\u0110\2\u0111\15\u0110\2\u0111"+
    "\5\u0110\3\u0111\1\u0112\3\u0111\1\u0148\1\u0111\14\u0110\2\u0111"+
    "\34\u0110\1\u0111\2\u0110\1\u0111\1\u0110\2\u0111\2\u0110\3\0"+
    "\1\152\2\0\1\152\21\0\1\306\10\0\1\306\44\0"+
    "\2\152\11\0\1\u0149\1\0\3\u014a\1\0\2\u014a\2\0"+
    "\4\u014a\17\0\1\u014a\11\0\1\u014a\6\0\2\u014a\3\0"+
    "\1\u014a\17\0\2\u014a\1\0\1\u014a\7\0\1\u014a\1\0"+
    "\3\u014a\1\0\2\u014a\2\0\4\u014a\17\0\1\u014a\11\0"+
    "\1\u014a\6\0\2\u014a\3\0\1\u014a\17\0\2\u014a\1\0"+
    "\1\u014a\4\0\42\315\1\u014b\53\315\17\0\1\u014c\112\0"+
    "\1\320\153\0\1\u014d\57\0\1\323\153\0\1\u014e\44\0"+
    "\7\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\4\13\1\u014f\17\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\1\13\1\u0150\2\0\4\13\12\0\2\13"+
    "\1\117\1\0\2\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\24\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\4\13"+
    "\1\u0151\17\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\3\13"+
    "\1\u0152\20\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\20\13"+
    "\1\u0153\3\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\4\13"+
    "\1\u0154\17\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\2\13"+
    "\1\u0155\21\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\u0156"+
    "\2\13\1\0\1\120\1\13\1\u0157\2\u0156\3\0\2\13"+
    "\5\0\24\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\10\13"+
    "\1\u0158\13\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\5\13"+
    "\1\u0159\16\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\4\13"+
    "\1\u015a\17\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\12\13"+
    "\1\u015b\11\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\4\13"+
    "\1\u015c\17\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\3\13\1\u015d\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\24\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\10\13\1\u015e"+
    "\13\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\6\13\1\u015f"+
    "\15\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\1\u0160\23\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\1\13"+
    "\1\u0161\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\24\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\1\u0162\23\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\1\13\1\u0163\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\24\13\1\0\2\13\1\0"+
    "\1\13\4\0\42\362\1\u0164\1\0\52\362\42\0\1\u0165"+
    "\53\0\42\u0100\1\u0166\1\0\52\u0100\1\0\7\13\1\0"+
    "\2\13\2\0\3\13\1\u0167\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\24\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\15\13\1\u0168\6\13"+
    "\1\0\2\13\1\0\1\13\5\0\1\13\1\u0169\5\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\24\13"+
    "\1\0\2\13\1\0\1\13\4\0\26\u0142\1\u016a\102\u0142"+
    "\2\u010c\5\u0142\4\u010c\1\u016b\4\u010c\14\u0142\2\u010c\34\u0142"+
    "\1\u010c\2\u0142\1\u010c\1\u0142\2\u010c\2\u0142\106\0\1\u016c"+
    "\12\0\1\u016d\112\0\25\u0110\1\u0147\3\u0110\1\u016e\64\u0110"+
    "\3\0\1\u016f\1\0\3\u0170\1\0\2\u0170\2\0\4\u0170"+
    "\17\0\1\u0170\11\0\1\u0170\6\0\2\u0170\3\0\1\u0170"+
    "\17\0\2\u0170\1\0\1\u0170\7\0\1\u0170\1\0\3\u0170"+
    "\1\0\2\u0170\2\0\4\u0170\17\0\1\u0170\11\0\1\u0170"+
    "\6\0\2\u0170\3\0\1\u0170\17\0\2\u0170\1\0\1\u0170"+
    "\4\0\42\315\1\u0171\53\315\40\0\1\u0172\74\0\1\u0173"+
    "\115\0\1\u0174\77\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\1\u0175\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\3\13\1\u0176"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\24\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\12\0\2\13"+
    "\1\117\1\0\2\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\11\13\1\u0177\12\13\1\0\2\13\1\0\1\13"+
    "\42\0\1\u0156\5\0\3\u0156\17\0\1\u0178\1\u0179\27\0"+
    "\7\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\u0156\2\13\1\0\1\120\1\13\1\u0157\2\u0156\3\0"+
    "\2\13\5\0\5\13\1\u017a\1\u017b\15\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\3\13\1\u017c\20\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\12\13\1\u017d\11\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\5\13\1\u017e\16\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\3\13\1\u017f\20\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\23\13\1\u0180\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\5\13\1\u0181\16\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\3\13\1\u0182\20\13\1\0\2\13\1\0"+
    "\1\13\4\0\42\362\2\0\52\362\42\u0100\2\0\52\u0100"+
    "\1\0\7\13\1\0\2\13\2\0\4\13\12\0\2\13"+
    "\1\117\1\0\2\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\2\13\1\u0183\21\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\1\13\1\u0184\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\24\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\13\13\1\u0185\10\13\1\0\2\13\1\0\1\13\4\0"+
    "\26\u0142\1\u0186\102\u0142\2\u010c\5\u0142\1\u0187\3\u010c\1\u016b"+
    "\4\u010c\14\u0142\2\u010c\34\u0142\1\u010c\2\u0142\1\u010c\1\u0142"+
    "\2\u010c\2\u0142\3\0\1\152\1\0\3\152\1\0\2\152"+
    "\2\0\4\152\17\0\1\u0188\11\0\1\152\6\0\2\152"+
    "\3\0\1\152\17\0\2\152\1\0\1\152\7\0\1\152"+
    "\1\0\3\152\1\0\2\152\2\0\4\152\17\0\1\152"+
    "\11\0\1\152\6\0\2\152\3\0\1\152\17\0\2\152"+
    "\1\0\1\152\46\0\1\u0171\126\0\1\u0189\102\0\1\u018a"+
    "\115\0\1\u018b\56\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\5\13\1\u018c\16\13\1\0\2\13"+
    "\1\0\1\13\6\0\1\u018d\175\0\1\u018e\34\0\1\13"+
    "\1\u018f\5\13\1\0\2\13\2\0\4\13\12\0\2\13"+
    "\1\117\1\0\2\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\24\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\1\13"+
    "\1\u0190\22\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\3\13\1\u0191\12\0\2\13\1\117"+
    "\1\0\2\13\1\0\1\120\2\13\5\0\2\13\5\0"+
    "\24\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\12\13\1\u0192"+
    "\11\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\1\13\1\u0193\2\0\4\13\12\0\2\13\1\117\1\0"+
    "\2\13\1\0\1\120\2\13\5\0\2\13\5\0\24\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\3\13\1\u0194\20\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\1\13"+
    "\1\u0195\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\24\13\1\0"+
    "\2\13\1\0\1\13\4\0\22\u0142\1\u0196\3\u0142\1\u0186"+
    "\102\u0142\2\u010c\5\u0142\1\u010c\1\u0197\2\u010c\1\u0143\4\u010c"+
    "\14\u0142\2\u010c\34\u0142\1\u010c\2\u0142\1\u010c\1\u0142\2\u010c"+
    "\2\u0142\41\0\1\306\114\0\1\u0198\130\0\1\u0199\115\0"+
    "\1\u019a\43\0\7\13\1\0\2\13\2\0\4\13\12\0"+
    "\2\13\1\117\1\0\2\13\1\0\1\120\2\13\5\0"+
    "\2\13\5\0\3\13\1\u019b\20\13\1\0\2\13\1\0"+
    "\1\13\65\0\1\u019c\124\0\1\u019d\26\0\7\13\1\0"+
    "\2\13\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\1\u019e\23\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\7\13\1\u019f\14\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\1\13"+
    "\1\u01a0\2\0\4\13\12\0\2\13\1\117\1\0\2\13"+
    "\1\0\1\120\2\13\5\0\2\13\5\0\24\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\3\13\1\u01a1\20\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\1\13\1\u01a2"+
    "\2\0\4\13\12\0\2\13\1\117\1\0\2\13\1\0"+
    "\1\120\2\13\5\0\2\13\5\0\24\13\1\0\2\13"+
    "\1\0\1\13\4\0\23\u0142\1\u01a3\2\u0142\1\u016a\67\u0142"+
    "\51\0\1\161\104\0\1\u01a4\115\0\1\u01a5\140\0\1\u01a6"+
    "\44\0\1\u01a7\104\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\2\13\1\u01a8\21\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\1\13\1\u01a9\2\0"+
    "\4\13\12\0\2\13\1\117\1\0\2\13\1\0\1\120"+
    "\2\13\5\0\2\13\5\0\24\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\3\13\1\u01aa"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\24\13\1\0\2\13\1\0\1\13"+
    "\55\0\1\320\115\0\1\323\127\0\1\u01ab\120\0\1\u01ac"+
    "\30\0\7\13\1\0\2\13\2\0\4\13\12\0\2\13"+
    "\1\117\1\0\2\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\2\13\1\u01ad\21\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\12\0\2\13"+
    "\1\117\1\0\2\13\1\0\1\120\2\13\5\0\2\13"+
    "\5\0\5\13\1\u01ae\16\13\1\0\2\13\1\0\1\13"+
    "\70\0\1\u01ab\32\0\7\13\1\0\2\13\2\0\4\13"+
    "\12\0\2\13\1\117\1\0\2\13\1\0\1\120\2\13"+
    "\5\0\2\13\5\0\3\13\1\u01ad\20\13\1\0\2\13"+
    "\1\0\1\13\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\4\0\1\11\24\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\20\1\2\11\4\1\2\11"+
    "\5\1\3\0\1\1\1\0\2\1\4\0\5\1\2\0"+
    "\1\1\1\0\1\11\10\1\1\0\1\11\1\0\2\1"+
    "\1\0\3\1\1\0\4\1\1\0\1\1\1\11\4\1"+
    "\2\0\27\1\3\0\2\1\1\0\1\1\1\11\2\0"+
    "\1\11\2\1\1\0\1\1\1\11\2\1\4\0\1\11"+
    "\1\1\1\0\1\11\2\0\2\1\2\0\1\1\1\0"+
    "\4\1\1\0\1\1\1\0\7\1\1\0\2\1\2\0"+
    "\2\1\1\11\3\1\2\0\1\11\1\0\1\1\1\0"+
    "\1\11\2\0\1\11\2\0\36\1\1\11\2\0\1\11"+
    "\1\1\1\11\1\0\1\1\2\0\5\1\1\11\1\0"+
    "\5\1\1\0\2\1\2\0\1\1\1\0\3\1\4\0"+
    "\1\1\5\0\31\1\1\0\3\1\1\0\6\1\1\0"+
    "\1\1\2\0\1\11\1\0\1\1\6\0\7\1\1\0"+
    "\15\1\1\0\1\1\1\0\3\1\1\0\1\1\3\11"+
    "\2\0\1\1\3\0\3\1\2\0\14\1\1\0\1\1"+
    "\4\0\1\1\2\0\7\1\1\0\1\1\3\0\1\1"+
    "\2\0\6\1\4\0\3\1\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //do we need to close interpolated String ${}
    private boolean insideInterpolatedStringBracers = false;
    private boolean insideInterpolatedMultilineStringBracers = false;
    //to get id after $ in interpolated String
    private boolean haveIdInString = false;
    private boolean haveIdInMultilineString = false;
    //bracers count inside injection
    private int structuralBracers = 0;

    public boolean isInsideInterpolatedStringInjection() {
      return structuralBracers > 0;
    }
    
    public boolean isInterpolatedStringState() {
        return insideInterpolatedStringBracers || insideInterpolatedMultilineStringBracers ||
            haveIdInString || haveIdInMultilineString || yystate() == INSIDE_INTERPOLATED_STRING || 
            yystate() == INSIDE_MULTI_LINE_INTERPOLATED_STRING;
    }

    private IElementType process(IElementType type){
      if (type == tIDENTIFIER && (haveIdInString || haveIdInMultilineString)) {

        if (haveIdInString) {
          haveIdInString = false;
          yybegin(INSIDE_INTERPOLATED_STRING);
        } else {
          haveIdInMultilineString = false;
          yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
        }
      }
      
      if (yystate() == YYINITIAL && type != tWHITE_SPACE_IN_LINE && type != tLBRACE && type != tLPARENTHESIS) {
        yybegin(COMMON_STATE);
      }

      return type;
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { return process(kCATCH);
          }
        case 93: break;
        case 70: 
          { return process(kTRAIT);
          }
        case 94: break;
        case 34: 
          { yybegin(COMMON_STATE);
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 95: break;
        case 91: 
          { return process(kPROTECTED);
          }
        case 96: break;
        case 31: 
          { return process(tLOWER_BOUND);
          }
        case 97: break;
        case 30: 
          { return process(tLINE_COMMENT);
          }
        case 98: break;
        case 26: 
          { yybegin(COMMON_STATE);
    return process(tINTERPOLATED_STRING_END);
          }
        case 99: break;
        case 58: 
          { return process(tSH_COMMENT);
          }
        case 100: break;
        case 8: 
          { return process(tCOLON);
          }
        case 101: break;
        case 83: 
          { return process(kEXTENDS);
          }
        case 102: break;
        case 53: 
          { return process(kVAR);
          }
        case 103: break;
        case 14: 
          { if (insideInterpolatedStringBracers || insideInterpolatedMultilineStringBracers) {
                                              ++structuralBracers;
                                            }

                                            return process(tLBRACE);
          }
        case 104: break;
        case 80: 
          { return process(kRETURN);
          }
        case 105: break;
        case 40: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
    insideInterpolatedStringBracers = true;
    return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 106: break;
        case 22: 
          { return process(tSEMICOLON);
          }
        case 107: break;
        case 60: 
          { return process(kTRUE);
          }
        case 108: break;
        case 81: 
          { return process(kOBJECT);
          }
        case 109: break;
        case 12: 
          { return process(tWRONG_STRING);
          }
        case 110: break;
        case 16: 
          { if (insideInterpolatedStringBracers || insideInterpolatedMultilineStringBracers) {
                                              --structuralBracers;
                                              if (structuralBracers == 0) {
                                                 if (insideInterpolatedMultilineStringBracers) {
                                                    yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
                                                    insideInterpolatedMultilineStringBracers = false;
                                                 } else {
                                                    yybegin(INSIDE_INTERPOLATED_STRING);
                                                    insideInterpolatedStringBracers = false;
                                                 }
                                              }

                                            }
                                            return process(tRBRACE);
          }
        case 111: break;
        case 3: 
          { return process(tSTUB);
          }
        case 112: break;
        case 65: 
          { return process(kWITH);
          }
        case 113: break;
        case 35: 
          { return process(tUPPER_BOUND);
          }
        case 114: break;
        case 6: 
          { return process(tDOT);
          }
        case 115: break;
        case 75: 
          { return process(kMATCH);
          }
        case 116: break;
        case 24: 
          { yybegin(INSIDE_INTERPOLATED_STRING);
    return process(tINTERPOLATED_STRING);
          }
        case 117: break;
        case 23: 
          { return process(tCOMMA);
          }
        case 118: break;
        case 33: 
          { return process(tSTRING);
          }
        case 119: break;
        case 61: 
          { return process(kTHIS);
          }
        case 120: break;
        case 71: 
          { return process(kTHROW);
          }
        case 121: break;
        case 52: 
          { return process(kVAL);
          }
        case 122: break;
        case 87: 
          { return process(kPRIVATE);
          }
        case 123: break;
        case 64: 
          { return process(kNULL);
          }
        case 124: break;
        case 39: 
          { return process(tINTERPOLATED_STRING_ESCAPE);
          }
        case 125: break;
        case 85: 
          { return process(kFINALLY);
          }
        case 126: break;
        case 84: 
          { return process(kFOR_SOME);
          }
        case 127: break;
        case 79: 
          { return process(kSEALED);
          }
        case 128: break;
        case 72: 
          { return process(kCLASS);
          }
        case 129: break;
        case 5: 
          { return process(tINTEGER);
          }
        case 130: break;
        case 44: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return process(tINTEGER);
          }
        case 131: break;
        case 89: 
          { return process(kOVERRIDE);
          }
        case 132: break;
        case 86: 
          { return process(kPACKAGE);
          }
        case 133: break;
        case 13: 
          { return process(tLSQBRACKET);
          }
        case 134: break;
        case 59: 
          { //for comments in interpolated strings
    return process(tBLOCK_COMMENT);
          }
        case 135: break;
        case 29: 
          { return process(kDO);
          }
        case 136: break;
        case 45: 
          { return process(kFOR);
          }
        case 137: break;
        case 11: 
          { yybegin(YYINITIAL);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 138: break;
        case 66: 
          { return process(kFALSE);
          }
        case 139: break;
        case 21: 
          { return process(tCHOOSE);
          }
        case 140: break;
        case 74: 
          { return process(kYIELD);
          }
        case 141: break;
        case 9: 
          { return process(tAT);
          }
        case 142: break;
        case 43: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
      insideInterpolatedMultilineStringBracers = true;
      return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 143: break;
        case 4: 
          { return process(tIDENTIFIER);
          }
        case 144: break;
        case 51: 
          { return process(kNEW);
          }
        case 145: break;
        case 18: 
          { return process(tRPARENTHESIS);
          }
        case 146: break;
        case 27: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(WAIT_FOR_INTERPOLATED_STRING);
  return haveIdInString || haveIdInMultilineString ? process(tIDENTIFIER) : process(tINTERPOLATED_STRING_ID) ;
          }
        case 147: break;
        case 48: 
          { if (insideInterpolatedStringBracers || insideInterpolatedMultilineStringBracers) {
                                              ++structuralBracers;
                                            }
                                            yypushback(yytext().length() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLBRACE);
          }
        case 148: break;
        case 49: 
          { yypushback(yytext().length() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLPARENTHESIS);
          }
        case 149: break;
        case 76: 
          { return process(kMACRO);
          }
        case 150: break;
        case 55: 
          { yybegin(COMMON_STATE);
      return process(tINTERPOLATED_STRING_END);
          }
        case 151: break;
        case 68: 
          { //for comments in interpolated strings
    return process(ScalaDocElementTypes.SCALA_DOC_COMMENT);
          }
        case 152: break;
        case 36: 
          { return process(tVIEW);
          }
        case 153: break;
        case 42: 
          { if (yycharat(1) != '$') {
      haveIdInMultilineString = true;
      yybegin(COMMON_STATE);
      yypushback(yytext().length() - 1);
      return process(tINTERPOLATED_STRING_INJECTION);
    } else {
      yypushback(yytext().length() - 2);
      return process(tINTERPOLATED_STRING_ESCAPE);
    }
          }
        case 154: break;
        case 90: 
          { return process(kIMPLICIT);
          }
        case 155: break;
        case 17: 
          { return process(tLPARENTHESIS);
          }
        case 156: break;
        case 78: 
          { return process(tMULTILINE_STRING);
          }
        case 157: break;
        case 67: 
          { return process(kFINAL);
          }
        case 158: break;
        case 50: 
          { return process(kTRY);
          }
        case 159: break;
        case 62: 
          { return process(kTYPE);
          }
        case 160: break;
        case 7: 
          { return process(tINNER_CLASS);
          }
        case 161: break;
        case 56: 
          { return process(kLAZY);
          }
        case 162: break;
        case 38: 
          { if (yycharat(1) != '$') {
      haveIdInString = true;
      yybegin(COMMON_STATE);
      yypushback(yytext().length() - 1);
      return process(tINTERPOLATED_STRING_INJECTION);
    } else {
      yypushback(yytext().length() - 2);
      return process(tINTERPOLATED_STRING_ESCAPE);
    }
          }
        case 163: break;
        case 69: 
          { return process(kSUPER);
          }
        case 164: break;
        case 1: 
          { return process(tINTERPOLATED_STRING);
          }
        case 165: break;
        case 92: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return process(kCASE);
          }
        case 166: break;
        case 63: 
          { return process(kCASE);
          }
        case 167: break;
        case 10: 
          { return process(tUNDER);
          }
        case 168: break;
        case 32: 
          { return process(tSYMBOL);
          }
        case 169: break;
        case 19: 
          { return process(tASSIGN);
          }
        case 170: break;
        case 2: 
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 171: break;
        case 41: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 172: break;
        case 82: 
          { return process(kIMPORT);
          }
        case 173: break;
        case 88: 
          { return process(kABSTRACT);
          }
        case 174: break;
        case 28: 
          { return process(tFLOAT);
          }
        case 175: break;
        case 25: 
          { yybegin(COMMON_STATE);
    return process(tWRONG_STRING);
          }
        case 176: break;
        case 54: 
          { yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
    return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 177: break;
        case 37: 
          { return process(kIF);
          }
        case 178: break;
        case 47: 
          { return process(tCHAR);
          }
        case 179: break;
        case 20: 
          { return process(tFUNTYPE);
          }
        case 180: break;
        case 15: 
          { return process(tRSQBRACKET);
          }
        case 181: break;
        case 77: 
          { return process(kWHILE);
          }
        case 182: break;
        case 46: 
          { return process(kDEF);
          }
        case 183: break;
        case 57: 
          { return process(kELSE);
          }
        case 184: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
