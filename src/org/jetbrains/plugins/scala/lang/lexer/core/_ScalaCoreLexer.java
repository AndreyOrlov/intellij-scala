/* The following code was generated by JFlex 1.4.3 on 12.01.11 17:39 */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12.01.11 17:39 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMMON_STATE = 6;
  public static final int YYINITIAL = 0;
  public static final int NEW_LINE_ALLOWED = 4;
  public static final int NEW_LINE_DEPRECATED = 2;
  public static final int PROCESS_NEW_LINE = 8;
  public static final int WAIT_FOR_XML = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  1,  1,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\33\1\101\1\35\1\0\1\101\1\76\16\33\4\0\1\101\1\22"+
    "\1\41\1\23\1\32\1\63\1\24\1\40\1\110\1\65\1\24\1\13"+
    "\1\57\1\14\1\10\1\30\1\3\1\71\1\70\5\6\1\5\1\72"+
    "\1\25\1\60\1\31\1\61\1\62\1\102\1\26\1\37\1\7\1\103"+
    "\1\17\1\11\1\15\5\32\1\1\6\32\1\52\1\104\6\32\1\64"+
    "\1\27\1\66\1\24\1\34\1\21\1\43\1\105\1\42\1\20\1\12"+
    "\1\16\1\115\1\45\1\54\1\106\1\114\1\2\1\53\1\47\1\50"+
    "\1\111\1\75\1\51\1\46\1\44\1\36\1\113\1\56\1\4\1\55"+
    "\1\112\1\107\1\24\1\67\1\24\6\33\1\77\32\33\2\0\4\32"+
    "\2\24\1\0\1\24\1\32\1\0\1\24\1\33\1\24\1\0\1\24"+
    "\1\24\3\0\1\32\1\24\3\0\1\32\5\0\27\32\1\24\37\32"+
    "\1\24\u013f\32\31\0\162\32\4\0\14\32\16\0\5\32\11\0\1\32"+
    "\21\0\130\33\5\0\23\33\12\0\1\32\13\0\1\32\1\0\3\32"+
    "\1\0\1\32\1\0\24\32\1\0\54\32\1\0\46\32\1\24\5\32"+
    "\4\0\202\32\1\24\4\33\3\0\105\32\1\0\46\32\2\0\2\32"+
    "\6\0\20\32\41\0\46\32\2\0\1\32\7\0\47\32\11\0\21\33"+
    "\1\0\27\33\1\0\3\33\1\0\1\33\1\0\2\33\1\0\1\33"+
    "\13\0\33\32\5\0\3\32\15\0\4\33\12\0\2\24\6\33\13\0"+
    "\32\32\5\0\13\32\16\33\7\0\12\33\4\0\2\32\1\33\143\32"+
    "\1\0\1\32\10\33\1\0\6\33\2\32\2\33\1\24\4\33\2\32"+
    "\12\33\3\32\2\24\1\32\17\0\1\33\1\32\1\33\36\32\33\33"+
    "\2\0\3\32\60\0\46\32\13\33\1\32\u014f\0\3\33\66\32\2\0"+
    "\1\33\1\32\20\33\2\0\1\32\4\33\3\0\12\32\2\33\2\0"+
    "\12\33\21\0\3\33\1\0\10\32\2\0\2\32\2\0\26\32\1\0"+
    "\7\32\1\0\1\32\3\0\4\32\2\0\1\33\1\32\7\33\2\0"+
    "\2\33\2\0\3\33\11\0\1\33\4\0\2\32\1\0\3\32\2\33"+
    "\2\0\12\33\4\32\6\0\1\24\6\0\3\33\1\0\6\32\4\0"+
    "\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0\2\32\1\0"+
    "\2\32\2\0\1\33\1\0\5\33\4\0\2\33\2\0\3\33\13\0"+
    "\4\32\1\0\1\32\7\0\14\33\3\32\14\0\3\33\1\0\11\32"+
    "\1\0\3\32\1\0\26\32\1\0\7\32\1\0\2\32\1\0\5\32"+
    "\2\0\1\33\1\32\10\33\1\0\3\33\1\0\3\33\2\0\1\32"+
    "\17\0\2\32\2\33\2\0\12\33\1\0\1\32\17\0\3\33\1\0"+
    "\10\32\2\0\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0"+
    "\5\32\2\0\1\33\1\32\6\33\3\0\2\33\2\0\3\33\10\0"+
    "\2\33\4\0\2\32\1\0\3\32\4\0\12\33\1\24\1\32\20\0"+
    "\1\33\1\32\1\0\6\32\3\0\3\32\1\0\4\32\3\0\2\32"+
    "\1\0\1\32\1\0\2\32\3\0\2\32\3\0\3\32\3\0\10\32"+
    "\1\0\3\32\4\0\5\33\3\0\3\33\1\0\4\33\11\0\1\33"+
    "\17\0\11\33\3\0\6\24\1\32\1\24\6\0\3\33\1\0\10\32"+
    "\1\0\3\32\1\0\27\32\1\0\12\32\1\0\5\32\4\0\7\33"+
    "\1\0\3\33\1\0\4\33\7\0\2\33\11\0\2\32\4\0\12\33"+
    "\22\0\2\33\1\0\10\32\1\0\3\32\1\0\27\32\1\0\12\32"+
    "\1\0\5\32\2\0\1\33\1\32\7\33\1\0\3\33\1\0\4\33"+
    "\7\0\2\33\7\0\1\32\1\0\2\32\4\0\12\33\22\0\2\33"+
    "\1\0\10\32\1\0\3\32\1\0\27\32\1\0\20\32\4\0\6\33"+
    "\2\0\3\33\1\0\4\33\11\0\1\33\10\0\2\32\4\0\12\33"+
    "\22\0\2\33\1\0\22\32\3\0\30\32\1\0\11\32\1\0\1\32"+
    "\2\0\7\32\3\0\1\33\4\0\6\33\1\0\1\33\1\0\10\33"+
    "\22\0\2\33\15\0\60\32\1\33\2\32\7\33\4\0\10\32\10\33"+
    "\1\0\12\33\47\0\2\32\1\0\1\32\2\0\2\32\1\0\1\32"+
    "\2\0\1\32\6\0\4\32\1\0\7\32\1\0\3\32\1\0\1\32"+
    "\1\0\1\32\2\0\2\32\1\0\4\32\1\33\2\32\6\33\1\0"+
    "\2\33\1\32\2\0\5\32\1\0\1\32\1\0\6\33\2\0\12\33"+
    "\2\0\2\32\42\0\1\32\3\24\17\0\5\24\2\33\6\24\12\33"+
    "\12\0\1\24\1\33\1\24\1\33\1\24\1\33\4\0\2\33\10\32"+
    "\1\0\42\32\6\0\24\33\1\0\2\33\4\32\4\0\10\33\1\0"+
    "\44\33\1\0\10\24\1\33\6\24\2\0\1\24\60\0\42\32\1\0"+
    "\5\32\1\0\2\32\1\0\7\33\3\0\4\33\6\0\12\33\6\0"+
    "\6\32\4\33\106\0\46\32\12\0\51\32\7\0\132\32\5\0\104\32"+
    "\5\0\122\32\6\0\7\32\1\0\77\32\1\0\1\32\1\0\4\32"+
    "\2\0\7\32\1\0\1\32\1\0\4\32\2\0\47\32\1\0\1\32"+
    "\1\0\4\32\2\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32"+
    "\1\0\1\32\1\0\4\32\2\0\7\32\1\0\7\32\1\0\27\32"+
    "\1\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32\1\0\47\32"+
    "\1\0\23\32\16\0\11\33\56\0\125\32\14\0\u026c\32\2\0\10\32"+
    "\12\0\32\32\5\0\113\32\3\0\3\32\17\0\15\32\1\0\4\32"+
    "\3\33\13\0\22\32\3\33\13\0\22\32\2\33\14\0\15\32\1\0"+
    "\3\32\1\0\2\33\14\0\64\32\40\33\3\0\1\32\3\0\2\32"+
    "\1\33\2\0\12\33\41\0\3\33\2\0\12\33\6\0\130\32\10\0"+
    "\51\32\1\33\126\0\35\32\3\0\14\33\4\0\14\33\4\0\1\24"+
    "\5\0\12\33\36\32\2\0\5\32\153\0\40\24\u0300\0\154\32\224\0"+
    "\234\32\4\0\132\32\6\0\26\32\2\0\6\32\2\0\46\32\2\0"+
    "\6\32\2\0\10\32\1\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\37\32\2\0\65\32\1\0\7\32\1\0\1\32\3\0\3\32\1\0"+
    "\7\32\3\0\4\32\2\0\6\32\4\0\15\32\5\0\3\32\1\0"+
    "\7\32\17\0\4\33\30\0\1\100\1\100\5\33\20\0\2\32\3\0"+
    "\1\24\15\0\1\24\1\0\1\32\13\0\4\33\6\0\6\33\1\0"+
    "\1\32\10\0\3\24\2\0\1\32\12\0\3\24\23\0\22\32\36\0"+
    "\15\33\4\0\1\33\3\0\6\33\25\0\2\24\1\32\4\24\1\32"+
    "\2\24\12\32\1\24\1\32\3\24\5\32\6\24\1\32\1\24\1\32"+
    "\1\24\1\32\1\24\4\32\1\24\3\32\1\24\7\32\2\24\1\0"+
    "\3\32\5\24\5\32\1\24\1\24\24\0\44\32\14\0\1\73\4\24"+
    "\5\24\2\24\4\24\1\24\2\24\1\24\2\24\1\24\7\24\1\24"+
    "\37\24\2\24\2\24\1\74\1\24\1\24\37\24\u010c\24\10\24\4\24"+
    "\24\24\2\24\7\24\2\0\121\24\1\24\36\24\31\24\3\0\32\24"+
    "\57\0\47\24\31\0\13\24\121\0\116\24\26\0\267\24\1\24\11\24"+
    "\1\24\66\24\10\24\30\24\1\0\126\24\1\24\16\24\2\0\22\24"+
    "\16\0\2\24\137\0\4\24\1\0\4\24\2\0\34\24\1\0\43\24"+
    "\1\0\1\24\1\0\4\24\3\0\1\24\1\0\7\24\2\0\7\24"+
    "\54\0\1\24\3\0\30\24\1\0\16\24\21\0\26\24\12\0\20\24"+
    "\u0100\24\203\24\26\0\77\24\4\0\40\24\2\0\u0102\24\16\24\u0372\0"+
    "\32\24\1\0\131\24\14\0\326\24\32\0\14\24\10\0\1\24\3\32"+
    "\12\0\2\24\14\0\1\24\11\32\6\33\1\0\5\32\2\24\5\32"+
    "\1\0\2\24\1\0\126\32\2\0\2\33\2\0\3\32\1\0\137\32"+
    "\5\0\50\32\4\0\136\32\1\0\2\24\4\0\12\24\30\32\70\0"+
    "\20\32\37\24\13\0\32\24\14\0\1\24\17\0\36\24\1\0\1\24"+
    "\12\0\47\24\17\0\77\24\1\0\u0100\24\u19b6\32\12\0\100\24\u51a6\32"+
    "\132\0\u048d\32\3\0\67\24\u0739\0\u2ba4\32\u215c\0\u012e\32\2\0\73\32"+
    "\225\0\7\32\14\0\5\32\5\0\1\32\1\33\12\32\1\24\15\32"+
    "\1\0\5\32\1\0\1\32\1\0\2\32\1\0\2\32\1\0\154\32"+
    "\41\0\u016b\32\22\0\100\32\2\0\66\32\50\0\15\32\1\24\2\0"+
    "\20\33\20\0\4\33\17\0\2\32\30\0\3\32\22\0\1\24\1\0"+
    "\3\24\2\0\1\32\6\0\5\32\1\0\207\32\2\0\1\33\4\0"+
    "\1\32\6\0\1\24\4\0\12\33\2\0\3\24\2\0\32\32\4\0"+
    "\1\32\1\0\32\32\1\0\1\24\1\0\1\24\6\0\132\32\3\0"+
    "\6\32\2\0\6\32\2\0\6\32\2\0\3\32\3\0\2\32\1\24"+
    "\1\0\1\24\2\32\1\0\1\24\4\24\2\24\12\0\3\33\2\24"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\2\2\2\3\1\4\4\2\1\1\1\5"+
    "\1\6\1\7\3\2\1\10\1\11\1\1\1\12\13\2"+
    "\1\13\1\14\1\15\1\2\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\11\1\24\1\25\2\2\1\15\1\26"+
    "\1\27\1\30\20\31\1\32\23\31\4\33\1\34\1\35"+
    "\2\36\16\0\2\2\2\3\2\0\1\37\1\0\2\37"+
    "\6\2\1\40\1\0\1\2\1\0\2\2\1\0\1\41"+
    "\1\42\1\43\1\0\3\44\1\12\1\0\1\45\16\2"+
    "\1\46\4\2\1\47\1\50\2\0\3\2\2\0\2\51"+
    "\1\52\2\51\1\52\11\51\1\52\2\51\1\0\1\53"+
    "\24\0\1\2\1\0\1\3\3\54\1\0\1\37\1\0"+
    "\3\2\1\55\1\2\1\56\3\2\1\0\1\57\3\44"+
    "\2\0\1\45\1\0\10\2\1\60\3\2\1\61\12\2"+
    "\1\62\2\0\1\63\2\0\3\2\1\64\1\65\3\0"+
    "\1\66\1\0\1\66\5\0\1\67\1\70\1\71\2\0"+
    "\1\72\5\0\1\73\17\0\1\74\2\54\1\0\1\75"+
    "\4\2\1\76\1\2\5\0\2\2\1\77\2\2\1\100"+
    "\1\101\1\2\1\102\2\2\1\103\11\2\1\104\4\0"+
    "\3\2\1\76\1\0\1\66\32\0\1\54\1\2\1\105"+
    "\1\2\1\106\1\2\5\0\1\107\1\110\1\0\2\2"+
    "\1\111\1\112\1\2\1\113\4\2\1\114\2\2\1\115"+
    "\1\116\2\0\3\2\1\0\1\117\6\0\1\120\13\0"+
    "\4\2\1\23\1\22\2\0\1\121\2\0\3\2\1\122"+
    "\1\123\1\2\1\124\2\2\1\125\2\0\3\2\7\0"+
    "\1\126\1\0\1\72\7\0\1\127\1\130\1\131\1\2"+
    "\3\0\6\2\2\0\1\132\1\2\1\133\4\0\1\134"+
    "\11\0\1\76\2\0\2\2\1\135\1\136\1\137\1\140"+
    "\2\0\1\2\1\76\2\141\12\0\2\2\2\0\1\142"+
    "\5\0\1\143\1\0\1\143\1\2\2\0\1\144\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4\0\u0702"+
    "\0\u0750\0\u05ca\0\u079e\0\u07ec\0\u083a\0\u03f6\0\u0888\0\u08d6"+
    "\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46"+
    "\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u03a8\0\u03a8\0\u0ccc\0\u0d1a"+
    "\0\u03a8\0\u03a8\0\u03a8\0\u03a8\0\u05ca\0\u05ca\0\u03a8\0\u0d68"+
    "\0\u0db6\0\u0e04\0\u0e52\0\u0ea0\0\u03a8\0\u03a8\0\u03a8\0\u03a8"+
    "\0\u03f6\0\u0444\0\u0492\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618"+
    "\0\u0666\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0eee"+
    "\0\u08d6\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8"+
    "\0\u0b46\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ea0\0\u0d1a\0\u0d68"+
    "\0\u0db6\0\u0e04\0\u0e52\0\u03a8\0\u0f3c\0\u0f8a\0\u0fd8\0\u1026"+
    "\0\u1074\0\u03a8\0\u10c2\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248"+
    "\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8"+
    "\0\u1506\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728"+
    "\0\u1776\0\u03a8\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a"+
    "\0\u1998\0\u03f6\0\u06b4\0\u03a8\0\u19e6\0\u1a34\0\u1a82\0\u1ad0"+
    "\0\u1b1e\0\u05ca\0\u05ca\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4"+
    "\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14"+
    "\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184"+
    "\0\u03f6\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u05ca\0\u05ca\0\u230a"+
    "\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490\0\u24de\0\u03a8\0\u252c"+
    "\0\u257a\0\u25c8\0\u2616\0\u03a8\0\u2664\0\u26b2\0\u2700\0\u274e"+
    "\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4\0\u2922\0\u2970\0\u1026"+
    "\0\u29be\0\u03a8\0\u2a0c\0\u2a5a\0\u115e\0\u2aa8\0\u2af6\0\u2b44"+
    "\0\u2b92\0\u03a8\0\u2be0\0\u2c2e\0\u2c7c\0\u12e4\0\u2cca\0\u2d18"+
    "\0\u2d66\0\u03a8\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a"+
    "\0\u2f88\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa"+
    "\0\u31f8\0\u3246\0\u3294\0\u32e2\0\u03f6\0\u06b4\0\u3330\0\u337e"+
    "\0\u33cc\0\u03a8\0\u341a\0\u3468\0\u34b6\0\u3504\0\u3552\0\u03a8"+
    "\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u3726\0\u3774\0\u37c2"+
    "\0\u3810\0\u03f6\0\u385e\0\u38ac\0\u38fa\0\u03f6\0\u3948\0\u3996"+
    "\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06"+
    "\0\u03a8\0\u3c54\0\u3ca2\0\u03a8\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda"+
    "\0\u3e28\0\u03f6\0\u03f6\0\u3e76\0\u3ec4\0\u252c\0\u3f12\0\u3f60"+
    "\0\u03a8\0\u3fae\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u4134\0\u03a8"+
    "\0\u03a8\0\u4182\0\u41d0\0\u03a8\0\u421e\0\u426c\0\u42ba\0\u4308"+
    "\0\u4356\0\u03a8\0\u43a4\0\u43f2\0\u4440\0\u448e\0\u44dc\0\u452a"+
    "\0\u4578\0\u45c6\0\u4614\0\u4662\0\u46b0\0\u46fe\0\u474c\0\u479a"+
    "\0\u47e8\0\u03f6\0\u4836\0\u03a8\0\u4884\0\u03f6\0\u48d2\0\u4920"+
    "\0\u496e\0\u49bc\0\u1a34\0\u4a0a\0\u4a58\0\u4aa6\0\u4af4\0\u4b42"+
    "\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a\0\u4cc8\0\u4d16\0\u03f6\0\u03f6"+
    "\0\u4d64\0\u03f6\0\u4db2\0\u4e00\0\u03f6\0\u4e4e\0\u4e9c\0\u4eea"+
    "\0\u4f38\0\u4f86\0\u4fd4\0\u5022\0\u5070\0\u50be\0\u03f6\0\u510c"+
    "\0\u515a\0\u51a8\0\u51f6\0\u5244\0\u5292\0\u52e0\0\u2490\0\u532e"+
    "\0\u537c\0\u53ca\0\u5418\0\u5466\0\u54b4\0\u5502\0\u5550\0\u559e"+
    "\0\u55ec\0\u563a\0\u5688\0\u56d6\0\u5724\0\u5772\0\u57c0\0\u580e"+
    "\0\u585c\0\u58aa\0\u58f8\0\u5946\0\u5994\0\u59e2\0\u5a30\0\u5a7e"+
    "\0\u5acc\0\u5b1a\0\u5b68\0\u30c0\0\u5bb6\0\u03f6\0\u5c04\0\u5c52"+
    "\0\u5ca0\0\u5cee\0\u5d3c\0\u5d8a\0\u5dd8\0\u5e26\0\u03f6\0\u03f6"+
    "\0\u5e74\0\u5ec2\0\u5f10\0\u03f6\0\u03f6\0\u5f5e\0\u03f6\0\u5fac"+
    "\0\u5ffa\0\u6048\0\u6096\0\u03f6\0\u60e4\0\u6132\0\u03f6\0\u03f6"+
    "\0\u6180\0\u61ce\0\u621c\0\u626a\0\u62b8\0\u6306\0\u274e\0\u6354"+
    "\0\u63a2\0\u63f0\0\u643e\0\u648c\0\u64da\0\u6528\0\u6576\0\u65c4"+
    "\0\u6612\0\u6660\0\u66ae\0\u66fc\0\u674a\0\u6798\0\u67e6\0\u6834"+
    "\0\u6882\0\u68d0\0\u691e\0\u696c\0\u69ba\0\u03a8\0\u03a8\0\u6a08"+
    "\0\u6a56\0\u6aa4\0\u6af2\0\u6b40\0\u6b8e\0\u6bdc\0\u6c2a\0\u03f6"+
    "\0\u03f6\0\u6c78\0\u03f6\0\u6cc6\0\u6d14\0\u03f6\0\u6d62\0\u6db0"+
    "\0\u6dfe\0\u6e4c\0\u6e9a\0\u6ee8\0\u6f36\0\u6f84\0\u6fd2\0\u7020"+
    "\0\u706e\0\u70bc\0\u274e\0\u710a\0\u710a\0\u7158\0\u71a6\0\u71f4"+
    "\0\u7242\0\u7290\0\u72de\0\u732c\0\u03f6\0\u03f6\0\u03f6\0\u737a"+
    "\0\u73c8\0\u7416\0\u7464\0\u74b2\0\u7500\0\u754e\0\u759c\0\u75ea"+
    "\0\u7638\0\u7686\0\u76d4\0\u03f6\0\u7722\0\u03f6\0\u7770\0\u77be"+
    "\0\u780c\0\u785a\0\u03a8\0\u78a8\0\u78f6\0\u7944\0\u7992\0\u79e0"+
    "\0\u7a2e\0\u7a7c\0\u7aca\0\u7b18\0\u4a0a\0\u7b66\0\u7bb4\0\u7c02"+
    "\0\u7c50\0\u03f6\0\u03f6\0\u03f6\0\u03f6\0\u7c9e\0\u7cec\0\u7d3a"+
    "\0\u532e\0\u274e\0\u03a8\0\u7d88\0\u7dd6\0\u7e24\0\u7e72\0\u7ec0"+
    "\0\u7f0e\0\u7f5c\0\u7faa\0\u7ff8\0\u8046\0\u8094\0\u80e2\0\u8130"+
    "\0\u817e\0\u03f6\0\u81cc\0\u821a\0\u8268\0\u274e\0\u82b6\0\u03a8"+
    "\0\u8304\0\u03f6\0\u8352\0\u83a0\0\u83ee\0\u03a8\0\u843c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\1\16\2\21\1\16\1\22"+
    "\1\16\1\23\2\24\1\16\1\25\1\16\1\26\1\27"+
    "\1\24\1\30\1\24\1\31\1\32\1\33\1\34\1\35"+
    "\1\16\1\15\1\36\1\37\2\16\1\40\1\41\1\42"+
    "\1\43\1\44\1\16\1\45\1\46\1\47\1\50\1\16"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\24\1\61\1\62\1\63\1\64\3\21\1\65\1\66"+
    "\1\16\3\37\1\67\1\24\4\16\1\70\1\71\1\72"+
    "\1\16\1\73\2\16\1\15\1\16\1\17\1\20\1\16"+
    "\2\21\1\16\1\22\1\16\1\23\2\24\1\16\1\25"+
    "\1\16\1\26\1\27\1\24\1\30\1\24\1\31\1\32"+
    "\1\33\1\34\1\35\1\16\1\15\1\36\1\37\2\16"+
    "\1\40\1\41\1\42\1\43\1\44\1\16\1\45\1\46"+
    "\1\47\1\50\1\16\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\74\1\60\1\24\1\61\1\75\1\76\1\77"+
    "\3\21\1\65\1\66\1\16\3\37\1\67\1\24\4\16"+
    "\1\70\1\71\1\72\1\16\1\73\2\16\1\100\1\101"+
    "\1\102\1\103\1\101\2\104\1\101\1\105\1\101\1\106"+
    "\2\107\1\101\1\110\1\101\1\111\1\112\1\107\1\113"+
    "\1\107\1\114\1\107\1\115\1\116\1\117\1\101\1\100"+
    "\1\101\1\120\2\101\1\121\1\122\1\123\1\124\1\125"+
    "\1\101\1\126\1\127\1\130\1\131\1\101\1\132\1\133"+
    "\1\134\1\135\2\100\1\136\1\137\1\107\4\100\3\104"+
    "\2\107\1\101\3\120\1\100\1\107\4\101\1\140\1\141"+
    "\1\142\1\101\1\143\2\101\23\144\1\145\1\144\1\146"+
    "\2\144\1\147\4\144\1\150\40\144\3\150\1\151\14\144"+
    "\31\152\1\153\64\152\35\0\1\154\40\0\3\154\15\0"+
    "\30\7\1\155\4\7\1\0\40\7\1\0\17\7\44\0"+
    "\1\156\1\0\1\157\50\0\7\160\1\0\2\160\2\0"+
    "\4\160\11\0\3\160\1\0\2\160\2\0\15\160\11\0"+
    "\3\160\2\0\1\160\1\0\1\160\3\0\4\160\2\0"+
    "\5\160\3\0\1\161\1\0\2\161\1\0\1\162\4\0"+
    "\4\163\47\0\3\161\26\0\1\164\1\0\2\165\61\0"+
    "\3\165\24\0\2\166\1\167\1\166\2\167\1\166\1\0"+
    "\2\166\2\170\4\166\1\171\10\170\1\166\1\167\1\166"+
    "\1\0\2\166\2\0\15\166\2\0\3\170\4\0\3\167"+
    "\2\170\1\166\1\0\1\167\2\0\1\170\4\166\2\0"+
    "\5\166\117\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\15\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\1\16\1\173\13\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\2\174\1\175\1\176\1\177\1\175\1\0"+
    "\1\200\2\201\2\0\4\202\47\0\2\175\1\177\24\0"+
    "\2\174\1\21\1\0\2\21\1\0\1\200\2\201\2\0"+
    "\4\202\47\0\3\21\26\0\1\203\1\0\2\203\61\0"+
    "\3\203\24\0\1\16\1\204\1\16\1\205\3\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\15\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\13\0\2\24\5\0\10\24"+
    "\27\0\3\24\7\0\2\24\5\0\1\24\14\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\1\16\1\206\4\16\1\207\3\16\1\210"+
    "\2\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\7\16\1\0\1\16\1\211"+
    "\2\0\4\16\11\0\2\16\1\172\1\0\2\16\2\0"+
    "\6\16\1\212\6\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\21\213\1\214\5\213"+
    "\1\215\5\213\1\0\3\213\1\0\34\213\3\0\15\213"+
    "\13\0\2\24\5\0\1\216\7\24\27\0\3\24\7\0"+
    "\2\24\5\0\1\24\26\0\2\24\5\0\3\24\1\217"+
    "\4\24\27\0\3\24\7\0\2\24\5\0\1\24\26\0"+
    "\2\24\5\0\10\24\4\0\1\220\22\0\3\24\7\0"+
    "\2\24\5\0\1\24\26\0\2\24\5\0\6\24\1\221"+
    "\1\24\27\0\3\24\7\0\2\24\5\0\1\24\26\0"+
    "\1\24\1\65\5\0\3\24\1\222\4\24\27\0\2\24"+
    "\1\223\7\0\2\24\5\0\1\24\50\0\1\37\40\0"+
    "\4\37\14\0\1\224\2\225\1\224\1\225\2\224\1\225"+
    "\1\224\2\225\2\226\4\225\1\224\5\226\1\227\2\226"+
    "\1\225\1\224\1\225\1\0\2\225\1\0\1\224\15\225"+
    "\2\224\3\226\7\224\2\226\1\225\1\0\3\224\1\226"+
    "\4\225\2\224\5\225\27\230\1\231\5\230\1\0\3\230"+
    "\1\232\34\230\1\0\17\230\1\0\1\16\1\233\5\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\1\16\1\234\13\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\2\16\1\235\1\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\3\16\1\236\3\16\1\237"+
    "\3\16\1\240\1\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\1\16\1\241\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\1\242\1\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\1\16\1\243\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\1\244\1\16\2\0\15\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\2\16\1\245\1\16\2\0\2\16"+
    "\1\246\2\16\1\0\7\16\1\0\1\16\1\247\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\15\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\1\16\1\250"+
    "\13\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\7\16\1\0\2\16\2\0"+
    "\1\16\1\251\2\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\11\16\1\252\3\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\12\16\1\253\2\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\3\16\1\254\6\16\1\255\2\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\13\0\2\24\5\0\10\24\27\0\1\24"+
    "\1\256\1\24\7\0\2\24\5\0\1\24\26\0\2\24"+
    "\5\0\3\24\1\257\4\24\27\0\3\24\7\0\2\24"+
    "\5\0\1\24\44\0\1\260\115\0\1\261\65\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\1\16\1\262\5\16\1\263\5\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\1\16\1\264\13\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\13\0\2\24\5\0\10\24\27\0\1\24"+
    "\1\66\1\24\7\0\2\24\5\0\1\24\50\0\1\120"+
    "\40\0\4\120\36\0\1\265\120\0\1\266\120\0\1\221"+
    "\65\0\3\267\1\270\1\267\2\270\1\267\1\271\1\267"+
    "\1\272\3\267\1\273\4\267\1\274\1\267\1\274\1\267"+
    "\1\275\1\276\1\277\2\267\1\300\1\150\4\267\1\301"+
    "\6\267\1\302\1\267\1\303\1\267\1\304\1\305\2\274"+
    "\1\306\1\307\1\267\4\274\3\270\2\274\1\267\4\310"+
    "\14\267\31\0\1\311\65\0\2\312\1\0\1\312\2\0"+
    "\1\312\1\0\2\312\2\0\4\312\1\0\1\313\7\0"+
    "\1\312\1\0\1\312\1\0\2\312\2\0\15\312\16\0"+
    "\1\312\4\0\1\314\4\312\2\0\5\312\35\0\1\154"+
    "\40\0\4\154\14\0\30\7\1\315\4\7\1\0\40\7"+
    "\1\0\17\7\42\0\1\316\121\0\1\317\61\0\1\320"+
    "\5\0\1\321\13\0\1\322\10\0\1\323\1\324\6\0"+
    "\1\325\43\0\1\161\1\0\2\161\1\0\1\326\2\327"+
    "\2\330\53\0\3\161\26\0\1\326\1\0\2\326\61\0"+
    "\3\326\26\0\1\331\1\0\2\331\1\0\1\162\57\0"+
    "\3\331\24\0\2\332\1\333\1\334\1\0\1\333\61\0"+
    "\2\333\25\0\2\332\1\165\1\0\2\165\61\0\3\165"+
    "\24\0\2\166\1\167\1\166\2\167\1\166\1\322\2\166"+
    "\2\0\4\166\11\0\1\166\1\167\1\166\1\0\2\166"+
    "\2\0\15\166\11\0\3\167\2\0\1\166\1\0\1\167"+
    "\3\0\4\166\2\0\5\166\1\0\2\166\1\167\1\166"+
    "\2\167\1\166\1\0\2\166\2\0\4\166\11\0\1\166"+
    "\1\167\1\166\1\0\2\166\2\0\15\166\11\0\3\167"+
    "\2\0\1\166\1\0\1\167\3\0\4\166\2\0\5\166"+
    "\10\0\1\322\2\0\2\170\5\0\10\170\2\0\1\167"+
    "\24\0\3\170\7\0\2\170\5\0\1\170\13\0\21\171"+
    "\1\335\13\171\1\0\3\171\1\336\34\171\1\0\2\336"+
    "\15\171\1\0\7\16\1\0\2\16\2\24\4\16\1\0"+
    "\10\24\2\16\1\172\1\0\2\16\2\0\15\16\2\0"+
    "\3\24\4\0\3\16\2\24\1\16\1\0\1\16\2\0"+
    "\1\24\4\16\2\0\5\16\1\0\7\16\1\0\2\16"+
    "\2\0\4\16\11\0\2\16\1\172\1\0\2\16\2\0"+
    "\15\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\1\16\1\337\3\16\10\0\1\340\106\0"+
    "\2\174\1\175\1\0\1\177\1\175\1\0\1\200\2\201"+
    "\2\0\4\202\47\0\2\175\1\177\26\0\1\341\1\0"+
    "\3\341\1\0\2\341\2\0\4\341\16\0\1\341\2\0"+
    "\2\341\24\0\3\341\10\0\1\341\1\0\1\341\13\0"+
    "\1\177\1\0\2\177\1\0\1\203\2\201\2\0\4\202"+
    "\47\0\3\177\24\0\2\342\1\203\1\342\2\203\1\342"+
    "\1\0\2\343\2\344\4\342\1\345\10\344\1\342\1\0"+
    "\1\342\1\0\2\342\2\0\15\342\2\0\3\344\4\0"+
    "\3\203\2\344\1\342\4\0\1\344\4\342\2\0\5\342"+
    "\3\0\1\346\1\0\2\346\4\0\2\347\53\0\3\346"+
    "\26\0\1\203\1\0\2\203\2\0\2\201\2\0\4\202"+
    "\47\0\3\203\24\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\4\16\1\350"+
    "\10\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\7\16\1\0\2\16\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\2\16"+
    "\1\351\12\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\1\16\1\352\5\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\15\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\7\16\1\353\5\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\5\16\1\354\7\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\2\16\2\0\1\16\1\355\2\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\15\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\21\213\1\356\5\213\1\215\5\213\1\0\40\213\1\0"+
    "\17\213\13\265\2\216\5\265\1\357\7\216\27\265\3\216"+
    "\7\265\2\216\5\265\1\216\13\265\13\0\2\24\5\0"+
    "\1\24\1\360\6\24\27\0\3\24\7\0\2\24\5\0"+
    "\1\24\103\0\1\361\25\0\35\221\1\0\40\221\1\0"+
    "\17\221\27\0\1\362\10\0\1\362\56\0\7\363\1\0"+
    "\2\363\2\0\4\363\6\0\1\362\2\0\2\363\1\364"+
    "\1\0\2\363\1\362\1\0\15\363\11\0\3\363\2\0"+
    "\1\363\1\0\1\363\3\0\4\363\2\0\5\363\13\0"+
    "\2\365\5\0\10\365\6\0\1\362\20\0\3\365\7\0"+
    "\2\365\5\0\1\365\13\0\3\224\1\366\2\224\1\366"+
    "\4\224\2\226\5\224\10\226\3\224\1\0\1\367\22\224"+
    "\3\226\4\224\2\366\1\224\2\226\1\224\1\0\3\224"+
    "\1\226\13\224\27\230\1\231\5\230\1\0\3\230\1\370"+
    "\34\230\1\0\54\230\1\0\40\230\1\0\17\230\41\0"+
    "\1\371\55\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\1\16\1\372\13\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\2\16\1\373"+
    "\1\16\1\374\10\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\4\16\1\375\10\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\7\16\1\376\2\16\1\377\2\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\1\u0100\1\16\2\0\1\16\1\u0101"+
    "\11\16\1\u0102\1\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\15\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\1\u0103\4\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\1\16\1\u0104\13\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\15\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\1\u0105\4\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\14\16\1\u0106\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\1\16"+
    "\1\u0107\5\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\15\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\3\16\1\u0108\2\0\5\16\1\0"+
    "\7\16\1\0\1\16\1\u0109\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\15\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\2\16\1\u010a\12\16\11\0\3\16"+
    "\2\0\1\u010b\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\2\16\1\u010c\12\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\15\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\1\u010d"+
    "\4\16\1\0\7\16\1\0\1\16\1\u010e\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\15\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\12\16\1\u010f\2\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\2\16\1\u0110"+
    "\12\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\2\u0111\1\0\1\u0111\2\0"+
    "\1\u0111\1\0\2\u0111\2\0\4\u0111\1\0\1\u0112\7\0"+
    "\1\u0111\1\0\1\u0111\1\0\2\u0111\2\0\15\u0111\16\0"+
    "\1\u0111\4\0\1\u0113\4\u0111\2\0\5\u0111\1\0\2\u0114"+
    "\1\0\1\u0114\2\0\1\u0114\1\0\2\u0114\2\0\4\u0114"+
    "\1\0\1\u0115\7\0\1\u0114\1\0\1\u0114\1\0\2\u0114"+
    "\2\0\15\u0114\16\0\1\u0114\4\0\1\u0116\4\u0114\2\0"+
    "\5\u0114\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\1\u0117\14\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\6\16\1\u0118\3\16"+
    "\1\u0119\2\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\1\16\1\u011a\5\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\7\16\1\u011b\5\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\22\265"+
    "\1\u011c\73\265\23\0\1\u011d\75\0\1\u011e\1\0\2\u011e"+
    "\1\0\1\u011f\2\u0120\2\0\4\u0121\47\0\3\u011e\26\0"+
    "\1\u011f\1\0\2\u011f\61\0\3\u011f\25\0\1\u0122\1\0"+
    "\1\u0123\161\0\1\u0124\3\0\1\u0125\77\0\1\u0126\107\0"+
    "\1\u0127\66\0\2\u0128\1\0\1\u0128\2\0\1\u0128\1\0"+
    "\2\u0128\1\0\1\u0129\4\u0128\1\0\1\u012a\2\0\1\u0129"+
    "\4\0\1\u0128\1\0\1\u0128\1\0\2\u0128\2\0\15\u0128"+
    "\4\0\1\u0129\11\0\1\u0128\4\0\1\u012b\4\u0128\2\0"+
    "\5\u0128\1\0\7\u012c\1\0\2\u012c\2\0\4\u012c\11\0"+
    "\3\u012c\1\0\2\u012c\2\0\15\u012c\11\0\3\u012c\2\0"+
    "\1\u012c\1\0\1\u012c\3\0\4\u012c\2\0\5\u012c\43\0"+
    "\1\u012d\64\0\1\u012e\146\0\1\u012f\126\0\1\u0130\115\0"+
    "\1\u0131\123\0\1\u0129\60\0\1\u0129\71\0\2\u0132\1\0"+
    "\1\u0132\2\0\1\u0132\1\0\2\u0132\2\0\4\u0132\1\0"+
    "\1\u0133\7\0\1\u0132\1\0\1\u0132\1\0\2\u0132\2\0"+
    "\15\u0132\16\0\1\u0132\4\0\1\u0134\4\u0132\2\0\5\u0132"+
    "\14\0\1\u0135\47\0\1\u0136\32\0\2\312\1\0\1\312"+
    "\2\0\1\312\1\0\2\312\2\0\4\312\11\0\1\312"+
    "\1\0\1\312\1\0\2\312\2\0\15\312\16\0\1\312"+
    "\5\0\4\312\2\0\5\312\12\0\1\u0137\146\0\1\u0138"+
    "\120\0\1\u0139\51\0\1\u013a\155\0\1\u013b\1\0\1\u013c"+
    "\63\0\1\u013d\5\0\1\u013e\77\0\1\u013f\116\0\1\u0140"+
    "\1\0\2\u0140\1\0\1\162\57\0\3\u0140\34\0\2\327"+
    "\106\0\1\331\1\0\2\331\1\0\1\326\2\327\2\330"+
    "\53\0\3\331\24\0\2\332\1\333\2\0\1\333\61\0"+
    "\2\333\27\0\1\u0141\1\0\3\u0141\1\0\2\u0141\2\0"+
    "\4\u0141\16\0\1\u0141\2\0\2\u0141\24\0\3\u0141\10\0"+
    "\1\u0141\1\0\1\u0141\20\0\1\322\16\0\1\171\115\0"+
    "\1\171\67\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\13\16\1\u0142\1\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\2\342\1\0\1\342\2\0\1\342"+
    "\1\0\2\342\2\344\4\342\1\345\10\344\1\342\1\0"+
    "\1\342\1\0\2\342\2\0\15\342\2\0\3\344\7\0"+
    "\2\344\1\342\4\0\1\344\4\342\2\0\5\342\1\0"+
    "\2\174\1\341\1\0\3\341\1\340\2\341\2\0\4\341"+
    "\16\0\1\341\2\0\2\341\24\0\3\341\10\0\1\341"+
    "\1\0\1\341\11\0\7\342\1\0\2\342\2\0\4\342"+
    "\11\0\2\342\1\u0143\1\0\2\342\2\0\15\342\11\0"+
    "\3\342\2\0\1\342\1\0\1\342\3\0\4\342\2\0"+
    "\5\342\1\0\7\342\1\0\2\342\2\347\4\342\11\0"+
    "\2\342\1\u0143\1\0\2\342\2\0\15\342\11\0\3\342"+
    "\2\0\1\342\1\0\1\342\3\0\4\342\2\0\5\342"+
    "\13\0\2\344\5\0\10\344\27\0\3\344\7\0\2\344"+
    "\5\0\1\344\13\0\21\345\1\u0144\5\345\1\u0145\5\345"+
    "\1\0\3\345\1\0\34\345\3\0\15\345\3\0\1\346"+
    "\1\0\2\346\6\0\4\202\47\0\3\346\26\0\1\346"+
    "\1\0\2\346\61\0\3\346\24\0\7\16\1\0\1\16"+
    "\1\u0146\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\15\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\7\16\1\0\1\16"+
    "\1\u0147\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\15\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\7\16\1\0\2\16"+
    "\2\0\4\16\11\0\2\16\1\172\1\0\2\16\2\0"+
    "\4\16\1\u0148\10\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\10\16\1\u0149\4\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\1\16\1\u014a\13\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\13\265"+
    "\2\216\5\265\1\357\1\u014b\6\216\27\265\3\216\7\265"+
    "\2\216\5\265\1\216\13\265\13\0\2\24\5\0\1\u014c"+
    "\7\24\27\0\3\24\7\0\2\24\5\0\1\24\104\0"+
    "\1\u014d\25\0\7\363\1\0\2\363\2\0\4\363\11\0"+
    "\2\363\1\364\1\0\2\363\2\0\15\363\11\0\3\363"+
    "\2\0\1\363\1\0\1\363\3\0\4\363\2\0\5\363"+
    "\1\0\7\363\1\0\2\363\2\365\4\363\1\0\10\365"+
    "\2\363\1\364\1\0\2\363\2\0\15\363\2\0\3\365"+
    "\4\0\3\363\2\365\1\363\1\0\1\363\2\0\1\365"+
    "\4\363\2\0\5\363\13\0\2\365\5\0\10\365\27\0"+
    "\3\365\7\0\2\365\5\0\1\365\16\0\1\u014e\2\0"+
    "\1\u014e\20\0\1\362\10\0\1\362\27\0\2\u014e\27\0"+
    "\1\u014f\1\0\3\u0150\1\0\2\u0150\2\0\4\u0150\6\0"+
    "\1\362\7\0\1\u0150\1\362\1\0\2\u0150\24\0\3\u0150"+
    "\10\0\1\u0150\1\0\1\u0150\10\0\41\371\1\u0151\54\371"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\4\16\1\u0152\10\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\1\u0153\14\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\1\16\1\u0154\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\15\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\2\16\1\u0155\12\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\6\16\1\u0156"+
    "\6\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\7\16\1\0\2\16\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\4\16"+
    "\1\u0157\10\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\7\16\1\0\1\16"+
    "\1\u0158\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\15\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\7\16\1\0\2\16"+
    "\2\0\4\16\11\0\2\16\1\172\1\0\2\16\2\0"+
    "\12\16\1\u0159\2\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\1\16\1\u015a\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\15\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\1\16\1\u015b"+
    "\5\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\1\16\1\u015c\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\1\16"+
    "\1\u015d\5\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\15\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\1\16\1\u015e\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\15\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\7\16\1\u015f\5\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\1\u0160\1\16\2\0\15\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\1\u0161\1\16\2\0\15\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\1\u0162\14\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\1\0\1\16\1\u0163\5\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\6\16\1\u0164"+
    "\6\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\1\16\1\u0165\5\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\15\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\1\16\1\u0166\5\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\15\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\3\16\1\u0167\11\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\14\0\1\u0168"+
    "\47\0\1\u0169\32\0\2\u0111\1\0\1\u0111\2\0\1\u0111"+
    "\1\0\2\u0111\2\0\4\u0111\11\0\1\u0111\1\0\1\u0111"+
    "\1\0\2\u0111\2\0\15\u0111\16\0\1\u0111\5\0\4\u0111"+
    "\2\0\5\u0111\14\0\1\u016a\47\0\1\u016b\32\0\2\u0114"+
    "\1\0\1\u0114\2\0\1\u0114\1\0\2\u0114\2\0\4\u0114"+
    "\11\0\1\u0114\1\0\1\u0114\1\0\2\u0114\2\0\15\u0114"+
    "\16\0\1\u0114\5\0\4\u0114\2\0\5\u0114\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\15\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\3\16\1\u016c\1\16\1\0"+
    "\7\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\2\16\1\u016d\12\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\15\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\2\16\1\u016e"+
    "\2\16\22\265\1\u011c\1\u016f\72\265\22\0\1\u0170\76\0"+
    "\1\u011f\1\0\2\u011f\2\0\2\u0120\2\0\4\u0121\47\0"+
    "\3\u011f\26\0\1\u0171\1\0\2\u0171\4\0\2\u0172\53\0"+
    "\3\u0171\71\0\1\u0173\113\0\1\u0174\122\0\1\u0175\113\0"+
    "\1\u0176\136\0\1\u0177\25\0\35\u0127\1\0\40\u0127\1\0"+
    "\17\u0127\14\0\1\u0178\47\0\1\u0179\32\0\2\u0128\1\0"+
    "\1\u0128\2\0\1\u0128\1\0\2\u0128\2\0\4\u0128\11\0"+
    "\1\u0128\1\0\1\u0128\1\0\2\u0128\2\0\15\u0128\16\0"+
    "\1\u0128\5\0\4\u0128\2\0\5\u0128\44\0\1\u017a\1\0"+
    "\1\u017b\144\0\1\u017c\64\0\1\u017a\63\0\1\u017d\147\0"+
    "\1\u017e\65\0\1\u017f\47\0\1\u0180\32\0\2\u0132\1\0"+
    "\1\u0132\2\0\1\u0132\1\0\2\u0132\2\0\4\u0132\11\0"+
    "\1\u0132\1\0\1\u0132\1\0\2\u0132\2\0\15\u0132\16\0"+
    "\1\u0132\5\0\4\u0132\2\0\5\u0132\14\0\1\312\204\0"+
    "\1\u0181\120\0\1\u0182\11\0\1\u0183\115\0\1\u0184\40\0"+
    "\1\u0185\64\0\1\u0186\147\0\1\u0187\125\0\1\u0188\112\0"+
    "\1\u0189\113\0\1\u018a\50\0\1\u018b\116\0\1\u0140\1\0"+
    "\2\u0140\1\0\1\326\57\0\3\u0140\24\0\2\332\1\u0141"+
    "\1\0\3\u0141\1\0\2\u0141\2\0\4\u0141\16\0\1\u0141"+
    "\2\0\2\u0141\24\0\3\u0141\10\0\1\u0141\1\0\1\u0141"+
    "\11\0\7\342\1\0\2\342\2\344\4\342\1\0\10\344"+
    "\2\342\1\u0143\1\0\2\342\2\0\15\342\2\0\3\344"+
    "\4\0\3\342\2\344\1\342\1\0\1\342\2\0\1\344"+
    "\4\342\2\0\5\342\21\345\1\u018c\5\345\1\u0145\5\345"+
    "\1\0\40\345\1\0\17\345\1\0\7\16\1\0\2\16"+
    "\2\0\4\16\11\0\2\16\1\172\1\0\2\16\2\0"+
    "\5\16\1\u018d\7\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\1\16\1\u018e\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\15\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\6\16\1\u018f\6\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\1\16"+
    "\1\u0190\5\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\15\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\13\u0170"+
    "\2\u014c\5\u0170\3\u014c\1\u0191\4\u014c\27\u0170\3\u014c\7\u0170"+
    "\2\u014c\5\u0170\1\u014c\13\u0170\17\0\1\u0192\52\0\1\u0193"+
    "\26\0\1\224\2\0\1\224\20\0\1\362\10\0\1\362"+
    "\27\0\2\224\27\0\1\u0194\1\0\3\u0195\1\0\2\u0195"+
    "\2\0\4\u0195\16\0\1\u0195\2\0\2\u0195\24\0\3\u0195"+
    "\10\0\1\u0195\1\0\1\u0195\13\0\1\u0195\1\0\3\u0195"+
    "\1\0\2\u0195\2\0\4\u0195\16\0\1\u0195\2\0\2\u0195"+
    "\24\0\3\u0195\10\0\1\u0195\1\0\1\u0195\10\0\41\371"+
    "\1\u0196\54\371\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\4\16\1\u0197"+
    "\10\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\7\16\1\0\2\16\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\3\16"+
    "\1\u0198\11\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\7\16\1\0\2\16"+
    "\2\0\4\16\11\0\2\16\1\172\1\u0199\2\16\2\0"+
    "\15\16\11\0\3\16\2\0\1\16\1\u0199\1\u019a\2\u0199"+
    "\1\0\4\16\2\0\5\16\1\0\7\16\1\0\2\16"+
    "\2\0\4\16\11\0\2\16\1\172\1\0\2\16\2\0"+
    "\7\16\1\u019b\5\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\14\16\1\u019c\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\2\16\1\u019d\12\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\1\16\1\u019e\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\7\16\1\u019f\5\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\1\u01a0\14\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\2\16\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\7\16\1\u01a1\5\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\7\16\1\u01a2\5\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\12\16\1\u01a3\2\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\3\16\1\u01a4"+
    "\11\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\7\16\1\0\2\16\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\12\16"+
    "\1\u01a5\2\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\7\16\1\0\2\16"+
    "\2\0\4\16\11\0\2\16\1\172\1\0\2\16\2\0"+
    "\7\16\1\u01a6\5\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\3\16\1\u01a7\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\15\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\1\16\1\u01a8\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\15\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\14\0\1\u0111\204\0"+
    "\1\u01a9\26\0\1\u0114\204\0\1\u01aa\13\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\1\16\1\u01ab\13\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\1\16\1\u01ac\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\1\16\1\u01ad\13\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\25\u0170"+
    "\1\u01ae\70\u0170\3\0\1\u0171\1\0\2\u0171\6\0\4\u0121"+
    "\47\0\3\u0171\26\0\1\u0171\1\0\2\u0171\61\0\3\u0171"+
    "\35\0\1\u01af\115\0\1\u01b0\155\0\1\u01b1\106\0\1\u01b2"+
    "\143\0\1\u01b3\40\0\1\u0128\204\0\1\u01b4\54\0\1\u01b5"+
    "\65\0\1\u01b6\141\0\1\u01b7\61\0\1\u01b8\160\0\1\u01af"+
    "\64\0\1\u0132\204\0\1\u01b9\31\0\1\u01ba\203\0\1\u01bb"+
    "\52\0\1\u01bc\65\0\1\322\145\0\1\322\127\0\1\u01bd"+
    "\104\0\1\u01be\130\0\1\322\113\0\1\u01bf\53\0\1\u01c0"+
    "\146\0\1\u01c1\53\0\7\16\1\0\2\16\2\0\3\16"+
    "\1\u01c2\11\0\2\16\1\172\1\0\2\16\2\0\15\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\11\16\1\u01c3"+
    "\3\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\1\16\1\u01c4\5\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\15\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\13\u0170\2\u014c\5\u0170\3\u014c"+
    "\1\u01c5\4\u014c\27\u0170\3\u014c\7\u0170\2\u014c\5\u0170\1\u014c"+
    "\13\u0170\70\0\1\u01c6\30\0\1\u01c7\115\0\1\u01c8\1\0"+
    "\3\u01c9\1\0\2\u01c9\2\0\4\u01c9\16\0\1\u01c9\2\0"+
    "\2\u01c9\24\0\3\u01c9\10\0\1\u01c9\1\0\1\u01c9\13\0"+
    "\1\u01c9\1\0\3\u01c9\1\0\2\u01c9\2\0\4\u01c9\16\0"+
    "\1\u01c9\2\0\2\u01c9\24\0\3\u01c9\10\0\1\u01c9\1\0"+
    "\1\u01c9\10\0\41\371\1\u01ca\54\371\35\0\1\u0199\4\0"+
    "\1\u01cb\5\0\1\u01cc\25\0\4\u0199\15\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\u0199\2\16"+
    "\2\0\1\u01cd\5\16\1\u01ce\6\16\11\0\3\16\2\0"+
    "\1\16\1\u0199\1\u019a\2\u0199\1\0\4\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\1\16\1\u01cf\13\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\3\16\1\u01d0"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\15\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\2\16\1\u01d1\12\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\12\16\1\u01d2"+
    "\2\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\7\16\1\0\2\16\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\5\16"+
    "\1\u01d3\7\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\1\0\7\16\1\0\2\16"+
    "\2\0\4\16\11\0\2\16\1\172\1\0\2\16\2\0"+
    "\7\16\1\u01d4\5\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\1\u01d5\14\16\11\0\3\16\2\0\1\16\1\0"+
    "\1\16\3\0\4\16\2\0\5\16\1\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\2\16\1\u01d6\12\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\17\0\1\u01d7"+
    "\115\0\1\u01d8\77\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\15\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\4\16\1\u01d9\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\1\u01da\14\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\2\16\1\u01db"+
    "\12\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\25\u0170\1\u01dc\70\u0170\47\0\1\u01dd"+
    "\116\0\1\u01de\47\0\1\u01df\132\0\1\u01e0\52\0\1\u01e1"+
    "\42\0\1\u01e2\143\0\1\u01e3\51\0\7\u012c\1\0\2\u012c"+
    "\2\0\4\u012c\11\0\3\u012c\1\u01e4\2\u012c\2\0\15\u012c"+
    "\11\0\3\u012c\2\0\1\u012c\1\u01e4\1\u01e5\2\u01e4\1\0"+
    "\4\u012c\2\0\5\u012c\54\0\1\u01e6\61\0\1\u01e3\114\0"+
    "\1\u01e7\135\0\1\u01e8\126\0\1\u01bc\102\0\1\u01e9\40\0"+
    "\4\u01e9\71\0\1\322\102\0\1\322\10\0\1\322\100\0"+
    "\1\u01ea\123\0\1\u01eb\120\0\1\u01ec\47\0\7\16\1\0"+
    "\2\16\2\0\4\16\11\0\2\16\1\172\1\0\2\16"+
    "\2\0\4\16\1\u01ed\10\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\1\16\1\u01ee\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\13\16\1\u01ef\1\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\13\u0170"+
    "\2\u014c\5\u0170\1\u01f0\2\u014c\1\u01c5\4\u014c\27\u0170\3\u014c"+
    "\7\u0170\2\u014c\5\u0170\1\u014c\13\u0170\3\0\1\224\1\0"+
    "\3\224\1\0\2\224\2\0\4\224\16\0\1\u01f1\2\0"+
    "\2\224\24\0\3\224\10\0\1\224\1\0\1\224\13\0"+
    "\1\224\1\0\3\224\1\0\2\224\2\0\4\224\16\0"+
    "\1\224\2\0\2\224\24\0\3\224\10\0\1\224\1\0"+
    "\1\224\51\0\1\u01ca\56\0\1\u01f2\220\0\1\u01f3\11\0"+
    "\1\16\1\u01f4\5\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\15\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\1\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\15\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\2\16\1\u01f5\1\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\1\u01f6\14\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\3\16\1\u01f7"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\15\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\1\16\1\u01f8\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\15\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\12\16\1\u01f9\2\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\37\0\1\u01fa\115\0\1\u01fb\57\0\7\16"+
    "\1\0\1\16\1\u01fc\2\0\4\16\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\1\0\7\16"+
    "\1\0\2\16\2\0\4\16\11\0\2\16\1\172\1\0"+
    "\2\16\2\0\2\16\1\u01fd\12\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\1\0"+
    "\7\16\1\0\1\16\1\u01fe\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\15\16\11\0\3\16\2\0"+
    "\1\16\1\0\1\16\3\0\4\16\2\0\5\16\22\u0170"+
    "\1\u01ff\2\u0170\1\u01dc\70\u0170\20\0\1\u0200\150\0\1\u0201"+
    "\44\0\1\u0202\203\0\1\u0203\30\0\1\u0203\151\0\1\u0204"+
    "\113\0\1\u01e4\4\0\1\u0205\5\0\1\u0206\25\0\4\u01e4"+
    "\65\0\1\u0207\103\0\1\u0208\162\0\1\u0209\23\0\1\u020a"+
    "\22\0\1\u01e9\40\0\4\u01e9\111\0\1\u020b\24\0\1\u0184"+
    "\165\0\1\u020c\41\0\13\u0170\2\u014c\5\u0170\1\u014c\1\u020d"+
    "\1\u014c\1\u0191\4\u014c\27\u0170\3\u014c\7\u0170\2\u014c\5\u0170"+
    "\1\u014c\13\u0170\40\0\1\362\120\0\1\u020e\160\0\1\u020f"+
    "\10\0\7\16\1\0\2\16\2\0\4\16\11\0\2\16"+
    "\1\172\1\0\2\16\2\0\1\16\1\u0210\13\16\11\0"+
    "\3\16\2\0\1\16\1\0\1\16\3\0\4\16\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\15\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\3\16\1\u0211\2\0"+
    "\5\16\1\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\2\16\1\u0212\12\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\1\16\1\u0213\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\15\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\4\16\1\u0214"+
    "\10\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\7\16\1\0\2\16\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\2\16"+
    "\1\u0215\12\16\11\0\3\16\2\0\1\16\1\0\1\16"+
    "\3\0\4\16\2\0\5\16\104\0\1\u0216\115\0\1\u0217"+
    "\12\0\7\16\1\0\1\16\1\u0218\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\15\16\11\0\3\16"+
    "\2\0\1\16\1\0\1\16\3\0\4\16\2\0\5\16"+
    "\23\u0170\1\u0219\1\u0170\1\u01ae\70\u0170\46\0\1\u021a\61\0"+
    "\1\u021b\160\0\1\u021a\144\0\1\u021c\13\0\1\u021d\220\0"+
    "\1\u021e\22\0\1\u021f\207\0\1\u0220\50\0\1\u0221\124\0"+
    "\1\u0222\61\0\1\u0223\121\0\1\322\145\0\1\u0224\61\0"+
    "\1\u0225\104\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\4\16\1\u0226\10\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\1\0\7\16\1\0\1\16\1\u0227\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\15\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\37\0\1\u0228\115\0\1\u0229\57\0\7\16"+
    "\1\0\2\16\2\0\3\16\1\u022a\11\0\2\16\1\172"+
    "\1\0\2\16\2\0\15\16\11\0\3\16\2\0\1\16"+
    "\1\0\1\16\3\0\4\16\2\0\5\16\37\0\1\u022b"+
    "\121\0\1\u022c\160\0\1\u022d\55\0\1\u022e\106\0\1\u022f"+
    "\142\0\1\312\74\0\1\u0185\123\0\1\322\112\0\1\u0230"+
    "\111\0\1\u0231\54\0\7\16\1\0\2\16\2\0\4\16"+
    "\11\0\2\16\1\172\1\0\2\16\2\0\4\16\1\u0232"+
    "\10\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\1\0\7\16\1\0\2\16\2\0"+
    "\4\16\11\0\2\16\1\172\1\0\2\16\2\0\1\u0233"+
    "\14\16\11\0\3\16\2\0\1\16\1\0\1\16\3\0"+
    "\4\16\2\0\5\16\64\0\1\u0111\115\0\1\u0114\115\0"+
    "\1\u0128\77\0\1\u0234\61\0\1\u0235\167\0\1\u0132\75\0"+
    "\1\u0230\52\0\7\16\1\0\2\16\2\0\4\16\11\0"+
    "\2\16\1\172\1\0\2\16\2\0\2\16\1\u0232\12\16"+
    "\11\0\3\16\2\0\1\16\1\0\1\16\3\0\4\16"+
    "\2\0\5\16\46\0\1\u0236\111\0\1\u0237\117\0\1\u0236"+
    "\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33930];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\37\1\2\11\2\1\4\11\2\1\1\11"+
    "\5\1\4\11\43\1\1\11\5\1\1\11\2\1\7\0"+
    "\2\1\4\0\4\1\2\0\1\1\1\0\1\11\10\1"+
    "\1\0\1\11\1\0\2\1\1\0\3\1\1\0\4\1"+
    "\1\0\26\1\2\0\3\1\2\0\1\11\4\1\1\11"+
    "\14\1\1\0\1\11\2\0\1\1\4\0\1\11\3\0"+
    "\1\1\2\0\1\1\1\11\1\1\3\0\1\1\1\0"+
    "\4\1\1\0\1\1\1\0\11\1\1\0\1\11\3\1"+
    "\2\0\1\11\1\0\27\1\1\11\2\0\1\11\2\0"+
    "\5\1\3\0\1\1\1\0\1\11\5\0\1\1\2\11"+
    "\2\0\1\11\5\0\1\11\15\0\4\1\1\11\1\0"+
    "\7\1\5\0\26\1\4\0\4\1\1\0\1\1\32\0"+
    "\6\1\5\0\2\1\1\0\17\1\2\0\3\1\1\0"+
    "\1\1\6\0\1\1\13\0\4\1\2\11\2\0\1\1"+
    "\2\0\12\1\2\0\3\1\7\0\1\1\1\0\1\1"+
    "\7\0\4\1\3\0\6\1\2\0\3\1\4\0\1\11"+
    "\11\0\1\1\2\0\6\1\2\0\3\1\1\11\12\0"+
    "\2\1\2\0\1\1\5\0\1\11\1\0\2\1\2\0"+
    "\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Stack for braces
    private Stack <IElementType> braceStack = new Stack<IElementType>();

    /* Defines, is in this section new line is whitespace or not? */
    public boolean newLineAllowed(){
      if (braceStack.isEmpty()){
        return true;
      } else {
        return ScalaTokenTypes.tLBRACE.equals(braceStack.peek());
      }
    }

    /* Changes state depending on brace stack */
    private void changeState(){
      if (braceStack.isEmpty()) {
        yybegin(YYINITIAL);
      } else if ( tLPARENTHESIS.equals(braceStack.peek()) || tLSQBRACKET.equals(braceStack.peek()) ){
        yybegin(NEW_LINE_DEPRECATED);
      } else {
        yybegin(COMMON_STATE);
      }
    }

    /* removes brace from stack */
    private IElementType popBraceStack(IElementType elem){
     if (
          !braceStack.isEmpty() &&
          (
            (elem.equals(tRSQBRACKET) && tLSQBRACKET.equals(braceStack.peek())) ||
            (elem.equals(tRBRACE) && tLBRACE.equals(braceStack.peek())) ||
            (elem.equals(tRPARENTHESIS) && tLPARENTHESIS.equals(braceStack.peek()))
          )
        ) {
          braceStack.pop();
          return process(elem);
        } else if (elem.equals(tFUNTYPE)) {
          if (!braceStack.isEmpty() && kCASE.equals(braceStack.peek())) {
            braceStack.pop();
          }
          return process(elem);
        } else {
          return process(elem);
        }
    }

    private IElementType process(IElementType type){
        return type;
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { return process(kTRAIT);
          }
        case 101: break;
        case 72: 
          { return process(kCATCH);
          }
        case 102: break;
        case 43: 
          { changeState();
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 103: break;
        case 36: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSYMBOL);
          }
        case 104: break;
        case 98: 
          { return process(kPROTECTED);
          }
        case 105: break;
        case 40: 
          { return process(tLOWER_BOUND);
          }
        case 106: break;
        case 33: 
          { return process(tLINE_COMMENT);
          }
        case 107: break;
        case 62: 
          { return process(tSH_COMMENT);
          }
        case 108: break;
        case 6: 
          { return process(tCOLON);
          }
        case 109: break;
        case 87: 
          { return process(kEXTENDS);
          }
        case 110: break;
        case 53: 
          { return process(kVAR);
          }
        case 111: break;
        case 2: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tIDENTIFIER);
          }
        case 112: break;
        case 27: 
          { yypushback(yylength());
                                                    changeState();
          }
        case 113: break;
        case 12: 
          { return process(tSEMICOLON);
          }
        case 114: break;
        case 59: 
          { yybegin(WAIT_FOR_XML);
                                                   yypushback(2);
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 115: break;
        case 15: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRPARENTHESIS);
          }
        case 116: break;
        case 83: 
          { return process(kOBJECT);
          }
        case 117: break;
        case 55: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return process(tWHITE_SPACE_IN_LINE); /* hack */
          }
        case 118: break;
        case 26: 
          { yybegin(WAIT_FOR_XML); return process(tLINE_TERMINATOR);
          }
        case 119: break;
        case 19: 
          { return popBraceStack(tFUNTYPE);
          }
        case 120: break;
        case 1: 
          { return process(tSTUB);
          }
        case 121: break;
        case 68: 
          { return process(kWITH);
          }
        case 122: break;
        case 34: 
          { return process(tUPPER_BOUND);
          }
        case 123: break;
        case 4: 
          { return process(tDOT);
          }
        case 124: break;
        case 81: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tMULTILINE_STRING);
          }
        case 125: break;
        case 76: 
          { return process(kMATCH);
          }
        case 126: break;
        case 11: 
          { return process(tCOMMA);
          }
        case 127: break;
        case 22: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRPARENTHESIS);
          }
        case 128: break;
        case 24: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRBRACE);
          }
        case 129: break;
        case 41: 
          { yypushback(1);
                                                    changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 130: break;
        case 97: 
          // lookahead expression with fixed lookahead length
          yypushback(7);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 131: break;
        case 92: 
          // lookahead expression with fixed lookahead length
          yypushback(6);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 132: break;
        case 86: 
          // lookahead expression with fixed lookahead length
          yypushback(5);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 133: break;
        case 79: 
          // lookahead expression with fixed lookahead length
          yypushback(4);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 134: break;
        case 73: 
          { return process(kTHROW);
          }
        case 135: break;
        case 42: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 136: break;
        case 57: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 137: break;
        case 52: 
          { return process(kVAL);
          }
        case 138: break;
        case 91: 
          { return process(kPRIVATE);
          }
        case 139: break;
        case 69: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kFALSE);
          }
        case 140: break;
        case 89: 
          { return process(kFINALLY);
          }
        case 141: break;
        case 88: 
          { return process(kFOR_SOME);
          }
        case 142: break;
        case 66: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTYPE);
          }
        case 143: break;
        case 29: 
          { return process(tWHITE_SPACE_IN_LINE);
          }
        case 144: break;
        case 30: 
          { changeState();
                                            yypushback(yytext().length());
          }
        case 145: break;
        case 82: 
          { return process(kSEALED);
          }
        case 146: break;
        case 71: 
          { return process(kCLASS);
          }
        case 147: break;
        case 84: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kRETURN);
          }
        case 148: break;
        case 94: 
          { return process(kOVERRIDE);
          }
        case 149: break;
        case 90: 
          { return process(kPACKAGE);
          }
        case 150: break;
        case 51: 
          { braceStack.push(tLPARENTHESIS);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLPARENTHESIS);
          }
        case 151: break;
        case 32: 
          { return process(kDO);
          }
        case 152: break;
        case 28: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 153: break;
        case 45: 
          { return process(kFOR);
          }
        case 154: break;
        case 37: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSTRING);
          }
        case 155: break;
        case 17: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRBRACE);
          }
        case 156: break;
        case 18: 
          { return process(tCHOOSE);
          }
        case 157: break;
        case 16: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRSQBRACKET);
          }
        case 158: break;
        case 77: 
          { return process(kYIELD);
          }
        case 159: break;
        case 7: 
          { return process(tAT);
          }
        case 160: break;
        case 47: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tCHAR);
          }
        case 161: break;
        case 8: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tUNDER);
          }
        case 162: break;
        case 49: 
          { return process(kNEW);
          }
        case 163: break;
        case 95: 
          { return process(kREQUIRES);
          }
        case 164: break;
        case 14: 
          { braceStack.push(tLSQBRACKET);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLSQBRACKET);
          }
        case 165: break;
        case 25: 
          { yypushback(1);  yybegin(YYINITIAL);
          }
        case 166: break;
        case 3: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tINTEGER);
          }
        case 167: break;
        case 44: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 10;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 11;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tINTEGER);
          }
        case 168: break;
        case 35: 
          { return process(tVIEW);
          }
        case 169: break;
        case 31: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tFLOAT);
          }
        case 170: break;
        case 96: 
          { return process(kIMPLICIT);
          }
        case 171: break;
        case 21: 
          { braceStack.push(tLPARENTHESIS);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLPARENTHESIS);
          }
        case 172: break;
        case 70: 
          { return process(kFINAL);
          }
        case 173: break;
        case 48: 
          { return process(kTRY);
          }
        case 174: break;
        case 5: 
          { return process(tINNER_CLASS);
          }
        case 175: break;
        case 60: 
          { return process(kLAZY);
          }
        case 176: break;
        case 75: 
          { return process(kSUPER);
          }
        case 177: break;
        case 99: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return process(kCASE);
          }
        case 178: break;
        case 100: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 179: break;
        case 10: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tWRONG_STRING);
          }
        case 180: break;
        case 54: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 181: break;
        case 58: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 182: break;
        case 80: 
          { yypushback(4);
                                                   changeState();
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 183: break;
        case 13: 
          { return process(tASSIGN);
          }
        case 184: break;
        case 65: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTRUE);
          }
        case 185: break;
        case 85: 
          { return process(kIMPORT);
          }
        case 186: break;
        case 20: 
          { braceStack.push(tLBRACE);
                                            return process(tLBRACE);
          }
        case 187: break;
        case 93: 
          { return process(kABSTRACT);
          }
        case 188: break;
        case 50: 
          { braceStack.push(tLBRACE);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLBRACE);
          }
        case 189: break;
        case 38: 
          { return process(kIF);
          }
        case 190: break;
        case 63: 
          { braceStack.push(kCASE);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(kCASE);
          }
        case 191: break;
        case 64: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTHIS);
          }
        case 192: break;
        case 9: 
          { yybegin(WAIT_FOR_XML);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 193: break;
        case 23: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRSQBRACKET);
          }
        case 194: break;
        case 67: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kNULL);
          }
        case 195: break;
        case 39: 
          { return process(tFUNTYPE);
          }
        case 196: break;
        case 78: 
          { return process(kWHILE);
          }
        case 197: break;
        case 46: 
          { return process(kDEF);
          }
        case 198: break;
        case 56: 
          { yybegin(WAIT_FOR_XML);
                                                    yypushback(2);
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 199: break;
        case 61: 
          { return process(kELSE);
          }
        case 200: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
