/* The following code was generated by JFlex 1.4.3 on 06.04.12 13:28 */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06.04.12 13:28 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INSIDE_MULTI_LINE_INTERPOLATED_STRING = 8;
  public static final int WAIT_FOR_INTERPOLATED_STRING = 4;
  public static final int INSIDE_INTERPOLATED_STRING = 6;
  public static final int COMMON_STATE = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\33\1\47\1\35\1\0\1\47\1\35\16\33\4\0\1\47\1\22"+
    "\1\41\1\23\1\44\1\113\1\24\1\40\1\60\1\61\1\24\1\13"+
    "\1\115\1\14\1\10\1\30\1\3\1\107\1\106\5\6\1\5\1\111"+
    "\1\25\1\114\1\50\1\105\1\31\1\51\1\26\1\37\1\7\1\53"+
    "\1\17\1\11\1\15\5\32\1\1\6\32\1\74\1\54\6\32\1\52"+
    "\1\27\1\56\1\24\1\34\1\21\1\62\1\63\1\66\1\20\1\12"+
    "\1\16\1\103\1\71\1\43\1\70\1\102\1\2\1\75\1\72\1\67"+
    "\1\76\1\104\1\65\1\42\1\64\1\36\1\101\1\100\1\4\1\73"+
    "\1\77\1\55\1\24\1\57\1\24\6\33\1\45\32\33\2\0\4\32"+
    "\2\24\1\0\1\24\1\32\1\0\1\24\1\33\1\24\1\0\1\24"+
    "\1\24\3\0\1\32\1\24\3\0\1\32\5\0\27\32\1\24\37\32"+
    "\1\24\u013f\32\31\0\162\32\4\0\14\32\16\0\5\32\11\0\1\32"+
    "\21\0\130\33\5\0\23\33\12\0\1\32\13\0\1\32\1\0\3\32"+
    "\1\0\1\32\1\0\24\32\1\0\54\32\1\0\46\32\1\24\5\32"+
    "\4\0\202\32\1\24\4\33\3\0\105\32\1\0\46\32\2\0\2\32"+
    "\6\0\20\32\41\0\46\32\2\0\1\32\7\0\47\32\11\0\21\33"+
    "\1\0\27\33\1\0\3\33\1\0\1\33\1\0\2\33\1\0\1\33"+
    "\13\0\33\32\5\0\3\32\15\0\4\33\12\0\2\24\6\33\13\0"+
    "\32\32\5\0\13\32\16\33\7\0\12\33\4\0\2\32\1\33\143\32"+
    "\1\0\1\32\10\33\1\0\6\33\2\32\2\33\1\24\4\33\2\32"+
    "\12\33\3\32\2\24\1\32\17\0\1\33\1\32\1\33\36\32\33\33"+
    "\2\0\3\32\60\0\46\32\13\33\1\32\u014f\0\3\33\66\32\2\0"+
    "\1\33\1\32\20\33\2\0\1\32\4\33\3\0\12\32\2\33\2\0"+
    "\12\33\21\0\3\33\1\0\10\32\2\0\2\32\2\0\26\32\1\0"+
    "\7\32\1\0\1\32\3\0\4\32\2\0\1\33\1\32\7\33\2\0"+
    "\2\33\2\0\3\33\11\0\1\33\4\0\2\32\1\0\3\32\2\33"+
    "\2\0\12\33\4\32\6\0\1\24\6\0\3\33\1\0\6\32\4\0"+
    "\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0\2\32\1\0"+
    "\2\32\2\0\1\33\1\0\5\33\4\0\2\33\2\0\3\33\13\0"+
    "\4\32\1\0\1\32\7\0\14\33\3\32\14\0\3\33\1\0\11\32"+
    "\1\0\3\32\1\0\26\32\1\0\7\32\1\0\2\32\1\0\5\32"+
    "\2\0\1\33\1\32\10\33\1\0\3\33\1\0\3\33\2\0\1\32"+
    "\17\0\2\32\2\33\2\0\12\33\1\0\1\32\17\0\3\33\1\0"+
    "\10\32\2\0\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0"+
    "\5\32\2\0\1\33\1\32\6\33\3\0\2\33\2\0\3\33\10\0"+
    "\2\33\4\0\2\32\1\0\3\32\4\0\12\33\1\24\1\32\20\0"+
    "\1\33\1\32\1\0\6\32\3\0\3\32\1\0\4\32\3\0\2\32"+
    "\1\0\1\32\1\0\2\32\3\0\2\32\3\0\3\32\3\0\10\32"+
    "\1\0\3\32\4\0\5\33\3\0\3\33\1\0\4\33\11\0\1\33"+
    "\17\0\11\33\3\0\6\24\1\32\1\24\6\0\3\33\1\0\10\32"+
    "\1\0\3\32\1\0\27\32\1\0\12\32\1\0\5\32\4\0\7\33"+
    "\1\0\3\33\1\0\4\33\7\0\2\33\11\0\2\32\4\0\12\33"+
    "\22\0\2\33\1\0\10\32\1\0\3\32\1\0\27\32\1\0\12\32"+
    "\1\0\5\32\2\0\1\33\1\32\7\33\1\0\3\33\1\0\4\33"+
    "\7\0\2\33\7\0\1\32\1\0\2\32\4\0\12\33\22\0\2\33"+
    "\1\0\10\32\1\0\3\32\1\0\27\32\1\0\20\32\4\0\6\33"+
    "\2\0\3\33\1\0\4\33\11\0\1\33\10\0\2\32\4\0\12\33"+
    "\22\0\2\33\1\0\22\32\3\0\30\32\1\0\11\32\1\0\1\32"+
    "\2\0\7\32\3\0\1\33\4\0\6\33\1\0\1\33\1\0\10\33"+
    "\22\0\2\33\15\0\60\32\1\33\2\32\7\33\4\0\10\32\10\33"+
    "\1\0\12\33\47\0\2\32\1\0\1\32\2\0\2\32\1\0\1\32"+
    "\2\0\1\32\6\0\4\32\1\0\7\32\1\0\3\32\1\0\1\32"+
    "\1\0\1\32\2\0\2\32\1\0\4\32\1\33\2\32\6\33\1\0"+
    "\2\33\1\32\2\0\5\32\1\0\1\32\1\0\6\33\2\0\12\33"+
    "\2\0\2\32\42\0\1\32\3\24\17\0\5\24\2\33\6\24\12\33"+
    "\12\0\1\24\1\33\1\24\1\33\1\24\1\33\4\0\2\33\10\32"+
    "\1\0\42\32\6\0\24\33\1\0\2\33\4\32\4\0\10\33\1\0"+
    "\44\33\1\0\10\24\1\33\6\24\2\0\1\24\60\0\42\32\1\0"+
    "\5\32\1\0\2\32\1\0\7\33\3\0\4\33\6\0\12\33\6\0"+
    "\6\32\4\33\106\0\46\32\12\0\51\32\7\0\132\32\5\0\104\32"+
    "\5\0\122\32\6\0\7\32\1\0\77\32\1\0\1\32\1\0\4\32"+
    "\2\0\7\32\1\0\1\32\1\0\4\32\2\0\47\32\1\0\1\32"+
    "\1\0\4\32\2\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32"+
    "\1\0\1\32\1\0\4\32\2\0\7\32\1\0\7\32\1\0\27\32"+
    "\1\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32\1\0\47\32"+
    "\1\0\23\32\16\0\11\33\56\0\125\32\14\0\u026c\32\2\0\10\32"+
    "\12\0\32\32\5\0\113\32\3\0\3\32\17\0\15\32\1\0\4\32"+
    "\3\33\13\0\22\32\3\33\13\0\22\32\2\33\14\0\15\32\1\0"+
    "\3\32\1\0\2\33\14\0\64\32\40\33\3\0\1\32\3\0\2\32"+
    "\1\33\2\0\12\33\41\0\3\33\2\0\12\33\6\0\130\32\10\0"+
    "\51\32\1\33\126\0\35\32\3\0\14\33\4\0\14\33\4\0\1\24"+
    "\5\0\12\33\36\32\2\0\5\32\153\0\40\24\u0300\0\154\32\224\0"+
    "\234\32\4\0\132\32\6\0\26\32\2\0\6\32\2\0\46\32\2\0"+
    "\6\32\2\0\10\32\1\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\37\32\2\0\65\32\1\0\7\32\1\0\1\32\3\0\3\32\1\0"+
    "\7\32\3\0\4\32\2\0\6\32\4\0\15\32\5\0\3\32\1\0"+
    "\7\32\17\0\4\33\30\0\1\46\1\46\5\33\20\0\2\32\3\0"+
    "\1\24\15\0\1\24\1\0\1\32\13\0\4\33\6\0\6\33\1\0"+
    "\1\32\10\0\3\24\2\0\1\32\12\0\3\24\23\0\22\32\36\0"+
    "\15\33\4\0\1\33\3\0\6\33\25\0\2\24\1\32\4\24\1\32"+
    "\2\24\12\32\1\24\1\32\3\24\5\32\6\24\1\32\1\24\1\32"+
    "\1\24\1\32\1\24\4\32\1\24\3\32\1\24\7\32\2\24\1\0"+
    "\3\32\5\24\5\32\1\24\1\24\24\0\44\32\14\0\1\112\4\24"+
    "\5\24\2\24\4\24\1\24\2\24\1\24\2\24\1\24\7\24\1\24"+
    "\37\24\2\24\2\24\1\110\1\24\1\24\37\24\u010c\24\10\24\4\24"+
    "\24\24\2\24\7\24\2\0\121\24\1\24\36\24\31\24\3\0\32\24"+
    "\57\0\47\24\31\0\13\24\121\0\116\24\26\0\267\24\1\24\11\24"+
    "\1\24\66\24\10\24\30\24\1\0\126\24\1\24\16\24\2\0\22\24"+
    "\16\0\2\24\137\0\4\24\1\0\4\24\2\0\34\24\1\0\43\24"+
    "\1\0\1\24\1\0\4\24\3\0\1\24\1\0\7\24\2\0\7\24"+
    "\54\0\1\24\3\0\30\24\1\0\16\24\21\0\26\24\12\0\20\24"+
    "\u0100\24\203\24\26\0\77\24\4\0\40\24\2\0\u0102\24\16\24\u0372\0"+
    "\32\24\1\0\131\24\14\0\326\24\32\0\14\24\10\0\1\24\3\32"+
    "\12\0\2\24\14\0\1\24\11\32\6\33\1\0\5\32\2\24\5\32"+
    "\1\0\2\24\1\0\126\32\2\0\2\33\2\0\3\32\1\0\137\32"+
    "\5\0\50\32\4\0\136\32\1\0\2\24\4\0\12\24\30\32\70\0"+
    "\20\32\37\24\13\0\32\24\14\0\1\24\17\0\36\24\1\0\1\24"+
    "\12\0\47\24\17\0\77\24\1\0\u0100\24\u19b6\32\12\0\100\24\u51a6\32"+
    "\132\0\u048d\32\3\0\67\24\u0739\0\u2ba4\32\u215c\0\u012e\32\2\0\73\32"+
    "\225\0\7\32\14\0\5\32\5\0\1\32\1\33\12\32\1\24\15\32"+
    "\1\0\5\32\1\0\1\32\1\0\2\32\1\0\2\32\1\0\154\32"+
    "\41\0\u016b\32\22\0\100\32\2\0\66\32\50\0\15\32\1\24\2\0"+
    "\20\33\20\0\4\33\17\0\2\32\30\0\3\32\22\0\1\24\1\0"+
    "\3\24\2\0\1\32\6\0\5\32\1\0\207\32\2\0\1\33\4\0"+
    "\1\32\6\0\1\24\4\0\12\33\2\0\3\24\2\0\32\32\4\0"+
    "\1\32\1\0\32\32\1\0\1\24\1\0\1\24\6\0\132\32\3\0"+
    "\6\32\2\0\6\32\2\0\6\32\2\0\3\32\3\0\2\32\1\24"+
    "\1\0\1\24\2\32\1\0\1\24\4\24\2\24\12\0\3\33\2\24"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\4\0\1\3\2\4\2\5\1\6"+
    "\4\4\1\3\1\7\1\10\1\11\3\4\1\12\1\13"+
    "\1\3\1\14\2\4\1\13\1\4\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\13\4\1\23\1\24\1\25\1\26"+
    "\1\27\1\4\1\30\1\1\2\31\1\32\1\31\1\2"+
    "\2\33\15\0\2\4\2\5\2\0\1\34\1\0\2\34"+
    "\2\4\1\35\4\4\1\36\1\0\1\4\1\0\2\4"+
    "\1\0\1\37\1\40\1\0\3\41\1\14\1\0\1\42"+
    "\2\4\1\43\2\4\1\44\1\4\1\45\1\4\1\46"+
    "\2\0\22\4\1\30\3\0\2\47\1\0\1\50\1\51"+
    "\2\0\2\52\1\0\1\50\1\53\12\0\1\4\1\0"+
    "\1\5\3\54\1\0\1\34\1\0\2\4\1\35\2\0"+
    "\2\4\1\55\1\56\1\4\1\0\2\4\1\0\1\57"+
    "\3\41\2\0\1\42\1\0\4\4\1\0\1\60\2\0"+
    "\1\61\2\0\3\4\1\62\12\4\1\63\11\4\1\64"+
    "\1\65\1\66\2\47\2\0\1\67\2\52\5\0\1\70"+
    "\2\54\1\0\1\71\1\4\1\35\3\4\1\0\1\72"+
    "\1\4\5\0\4\4\1\44\5\0\1\4\1\73\1\4"+
    "\1\74\1\4\1\75\3\4\1\76\3\4\1\77\6\4"+
    "\1\100\1\4\1\0\1\47\1\52\1\0\1\54\1\4"+
    "\1\0\1\101\1\102\1\4\1\72\1\0\1\4\5\0"+
    "\1\4\1\103\2\4\3\0\1\4\1\104\1\105\2\4"+
    "\1\106\1\0\1\4\1\107\2\4\1\110\1\111\1\112"+
    "\3\4\1\113\2\0\1\4\1\0\2\4\1\0\1\4"+
    "\1\24\1\25\2\0\1\114\1\115\1\4\1\116\3\0"+
    "\1\4\1\117\1\4\2\0\2\4\1\120\4\4\1\121"+
    "\1\122\1\123\1\0\1\4\1\0\1\4\3\0\2\4"+
    "\2\0\3\4\1\124\1\125\1\4\1\0\1\72\1\126"+
    "\3\0\1\127\1\130\2\0\2\4\1\131\1\4\1\72"+
    "\4\0\2\4\1\132\1\133\1\0\1\133\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u04e0\0\u06b4"+
    "\0\u0702\0\u0750\0\u030c\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6"+
    "\0\u02be\0\u0924\0\u02be\0\u0972\0\u02be\0\u02be\0\u09c0\0\u02be"+
    "\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30"+
    "\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u04e0\0\u04e0\0\u02be\0\u02be"+
    "\0\u0db6\0\u0e04\0\u0e52\0\u0ea0\0\u02be\0\u02be\0\u0eee\0\u0f3c"+
    "\0\u0f8a\0\u0fd8\0\u02be\0\u1026\0\u1074\0\u10c2\0\u1110\0\u115e"+
    "\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u12e4\0\u1332\0\u1380\0\u13ce"+
    "\0\u141c\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u15f0\0\u02be"+
    "\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860"+
    "\0\u030c\0\u05ca\0\u02be\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6"+
    "\0\u04e0\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08"+
    "\0\u1c56\0\u1ca4\0\u030c\0\u1cf2\0\u1d40\0\u02be\0\u1d8e\0\u04e0"+
    "\0\u1ddc\0\u04e0\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0"+
    "\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184\0\u21d2\0\u2220"+
    "\0\u226e\0\u22bc\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490"+
    "\0\u24de\0\u0ea0\0\u252c\0\u257a\0\u25c8\0\u252c\0\u02be\0\u2616"+
    "\0\u2664\0\u26b2\0\u2700\0\u274e\0\u26b2\0\u02be\0\u279c\0\u27ea"+
    "\0\u2838\0\u2886\0\u28d4\0\u2922\0\u2970\0\u02be\0\u29be\0\u2a0c"+
    "\0\u2a5a\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c"+
    "\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u2eec"+
    "\0\u2f3a\0\u030c\0\u05ca\0\u2f88\0\u2fd6\0\u3024\0\u3072\0\u02be"+
    "\0\u30c0\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u02be\0\u3246\0\u3294"+
    "\0\u32e2\0\u3330\0\u337e\0\u33cc\0\u02be\0\u341a\0\u3468\0\u02be"+
    "\0\u34b6\0\u3504\0\u3552\0\u35a0\0\u35ee\0\u030c\0\u363c\0\u368a"+
    "\0\u36d8\0\u3726\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa"+
    "\0\u030c\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c"+
    "\0\u3b6a\0\u3bb8\0\u030c\0\u030c\0\u3c06\0\u3c54\0\u02be\0\u3ca2"+
    "\0\u3cf0\0\u02be\0\u3d3e\0\u02be\0\u3d8c\0\u3dda\0\u3e28\0\u11ac"+
    "\0\u3e76\0\u030c\0\u3ec4\0\u02be\0\u3f12\0\u030c\0\u3f60\0\u3fae"+
    "\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u18fc\0\u4134\0\u4182\0\u41d0"+
    "\0\u421e\0\u426c\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u04e0"+
    "\0\u4440\0\u448e\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u030c\0\u4614"+
    "\0\u030c\0\u4662\0\u030c\0\u46b0\0\u46fe\0\u474c\0\u479a\0\u47e8"+
    "\0\u4836\0\u4884\0\u030c\0\u48d2\0\u4920\0\u496e\0\u49bc\0\u4a0a"+
    "\0\u4a58\0\u030c\0\u4aa6\0\u4af4\0\u25c8\0\u274e\0\u4b42\0\u2c2e"+
    "\0\u4b90\0\u4bde\0\u4c2c\0\u030c\0\u4c7a\0\u2f88\0\u4cc8\0\u4d16"+
    "\0\u4d64\0\u4db2\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea\0\u030c\0\u4f38"+
    "\0\u4f86\0\u4fd4\0\u5022\0\u5070\0\u50be\0\u030c\0\u030c\0\u510c"+
    "\0\u515a\0\u030c\0\u51a8\0\u51f6\0\u030c\0\u5244\0\u5292\0\u030c"+
    "\0\u030c\0\u030c\0\u52e0\0\u532e\0\u537c\0\u030c\0\u53ca\0\u28d4"+
    "\0\u5418\0\u5466\0\u54b4\0\u5502\0\u5550\0\u559e\0\u02be\0\u02be"+
    "\0\u55ec\0\u563a\0\u5688\0\u030c\0\u56d6\0\u030c\0\u5724\0\u5772"+
    "\0\u57c0\0\u580e\0\u030c\0\u585c\0\u58aa\0\u58f8\0\u5946\0\u5994"+
    "\0\u030c\0\u59e2\0\u5a30\0\u5a7e\0\u5acc\0\u030c\0\u030c\0\u030c"+
    "\0\u5b1a\0\u5b68\0\u5bb6\0\u5c04\0\u5c52\0\u5ca0\0\u5cee\0\u5d3c"+
    "\0\u5d8a\0\u5dd8\0\u5e26\0\u5e74\0\u5ec2\0\u5f10\0\u030c\0\u030c"+
    "\0\u5f5e\0\u5fac\0\u4134\0\u030c\0\u5ffa\0\u6048\0\u6096\0\u030c"+
    "\0\u030c\0\u60e4\0\u6132\0\u6180\0\u61ce\0\u030c\0\u621c\0\u4cc8"+
    "\0\u626a\0\u62b8\0\u6306\0\u6354\0\u63a2\0\u63f0\0\u030c\0\u02be"+
    "\0\u643e\0\u030c\0\u648c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\1\13\1\14\1\15\1\13\2\16\1\13\1\17"+
    "\1\13\1\20\2\21\1\13\1\22\1\13\1\23\1\24"+
    "\1\21\1\25\1\21\1\26\1\27\1\30\1\31\1\32"+
    "\1\13\1\12\1\33\1\34\2\13\1\35\1\36\1\37"+
    "\1\40\1\13\2\34\1\41\1\42\1\21\1\43\2\13"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\13\1\52"+
    "\1\53\1\54\1\55\2\13\1\56\1\57\1\13\1\60"+
    "\1\61\1\13\1\62\1\63\3\13\1\64\2\16\1\65"+
    "\1\16\1\66\1\21\1\67\1\70\1\12\1\13\1\14"+
    "\1\15\1\13\2\16\1\13\1\17\1\13\1\20\2\21"+
    "\1\13\1\22\1\13\1\23\1\24\1\21\1\25\1\21"+
    "\1\26\1\27\1\30\1\31\1\32\1\13\1\12\1\33"+
    "\1\34\2\13\1\35\1\36\1\37\1\40\1\13\2\34"+
    "\1\41\1\71\1\21\1\43\2\13\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\13\1\52\1\53\1\54\1\55"+
    "\2\13\1\56\1\57\1\13\1\60\1\61\1\13\1\62"+
    "\1\63\3\13\1\64\2\16\1\65\1\16\1\66\1\21"+
    "\1\67\1\70\41\0\1\72\54\0\27\73\1\74\5\73"+
    "\1\75\3\73\1\76\2\73\1\77\51\73\41\100\1\101"+
    "\2\100\1\102\51\100\16\0\1\103\23\0\1\103\1\104"+
    "\52\0\27\105\1\106\5\105\1\107\3\105\1\110\2\105"+
    "\1\111\51\105\3\0\1\112\1\0\2\113\77\0\2\113"+
    "\1\0\1\113\5\0\2\114\1\115\1\114\2\115\1\114"+
    "\1\0\2\114\2\116\4\114\1\117\10\116\1\114\1\115"+
    "\1\114\1\0\2\114\2\0\3\114\1\115\2\0\2\116"+
    "\1\0\2\114\5\0\23\114\1\116\2\115\1\116\1\115"+
    "\2\116\121\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\23\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\1\121\22\13"+
    "\1\0\2\13\1\0\1\13\5\0\2\122\1\123\1\124"+
    "\1\125\1\123\1\0\1\126\2\127\2\0\4\130\65\0"+
    "\2\123\1\0\1\125\5\0\2\122\1\16\1\0\2\16"+
    "\1\0\1\126\2\127\2\0\4\130\65\0\2\16\1\0"+
    "\1\16\7\0\1\131\1\0\2\131\77\0\2\131\1\0"+
    "\1\131\5\0\1\13\1\132\1\13\1\133\3\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\23\13\1\0\2\13"+
    "\1\0\1\13\17\0\2\21\5\0\10\21\16\0\2\21"+
    "\33\0\1\21\2\0\1\21\1\0\2\21\3\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\1\0\1\134\1\13\1\135\2\13\5\0\2\13"+
    "\5\0\1\136\4\13\1\137\15\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\1\13\1\140\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\5\13\1\141\15\13\1\0\2\13\1\0"+
    "\1\13\4\0\21\142\1\143\5\142\1\144\5\142\1\0"+
    "\3\142\1\0\3\142\2\0\47\142\13\0\2\21\5\0"+
    "\1\145\7\21\16\0\2\21\33\0\1\21\2\0\1\21"+
    "\1\0\2\21\15\0\2\21\5\0\3\21\1\146\4\21"+
    "\16\0\2\21\33\0\1\21\2\0\1\21\1\0\2\21"+
    "\15\0\2\21\5\0\10\21\4\0\1\147\11\0\2\21"+
    "\33\0\1\21\2\0\1\21\1\0\2\21\15\0\2\21"+
    "\5\0\6\21\1\150\1\21\16\0\2\21\33\0\1\21"+
    "\2\0\1\21\1\0\2\21\15\0\2\21\5\0\3\21"+
    "\1\151\4\21\16\0\2\21\33\0\1\21\2\0\1\21"+
    "\1\0\2\21\37\0\1\34\7\0\3\34\46\0\1\152"+
    "\2\153\1\152\1\153\2\152\1\153\1\152\2\153\2\154"+
    "\4\153\1\152\5\154\1\155\2\154\1\153\1\152\1\153"+
    "\1\0\2\153\1\0\1\152\3\153\3\152\2\154\1\152"+
    "\2\153\5\152\23\153\1\154\2\152\1\154\1\152\2\154"+
    "\2\152\27\156\1\157\5\156\1\0\3\156\1\160\54\156"+
    "\1\0\7\13\1\0\1\13\1\161\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\1\162\1\13\1\0\1\134\4\13"+
    "\5\0\2\13\5\0\23\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\1\13\1\163\1\13"+
    "\1\164\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\13\13\1\165\7\13\1\0\2\13"+
    "\1\0\1\13\5\0\2\166\1\0\1\166\2\0\1\166"+
    "\1\0\2\166\1\21\1\66\4\166\1\0\1\167\2\21"+
    "\1\170\4\21\1\166\1\0\1\166\1\0\2\166\2\0"+
    "\3\166\3\0\1\21\1\171\1\0\2\166\5\0\23\166"+
    "\1\21\2\0\1\21\1\0\1\21\1\172\52\0\1\173"+
    "\115\0\1\174\46\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\1\13\1\175\21\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\3\13\1\176\3\13\1\177\1\13\1\200\11\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\1\13"+
    "\1\201\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\23\13\1\0\2\13"+
    "\1\0\1\13\5\0\1\13\1\202\5\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\1\203\22\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\1\13\1\204\15\13\1\205\3\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\1\13\1\206"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\1\207\1\13"+
    "\2\0\4\13\5\0\2\13\5\0\23\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\1\13\1\210"+
    "\2\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\1\211\22\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\1\212"+
    "\2\13\1\213\17\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\1\13\1\214\2\13\5\0\2\13"+
    "\5\0\7\13\1\215\13\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\1\216\22\13\1\0\2\13\1\0\1\13\17\0\2\21"+
    "\5\0\7\21\1\65\16\0\2\21\33\0\1\21\2\0"+
    "\1\21\1\0\2\21\15\0\1\21\1\66\5\0\3\21"+
    "\1\170\4\21\16\0\2\21\33\0\1\21\2\0\1\21"+
    "\1\0\1\21\1\172\2\0\27\217\1\220\5\217\1\0"+
    "\3\217\1\221\2\217\1\0\51\217\27\73\1\222\5\73"+
    "\1\0\3\73\1\0\2\73\1\0\106\73\1\0\60\73"+
    "\1\0\2\223\1\0\1\223\2\0\1\223\1\0\2\223"+
    "\2\224\4\223\1\225\10\224\1\223\1\0\1\223\1\0"+
    "\2\223\2\0\2\223\1\226\3\0\2\224\1\0\2\223"+
    "\1\227\4\0\23\223\1\224\2\0\1\224\1\0\2\224"+
    "\2\0\41\100\1\230\2\100\1\0\112\100\1\231\2\100"+
    "\1\0\51\100\1\0\2\232\1\0\1\232\2\0\1\232"+
    "\1\0\2\232\2\233\4\232\1\234\10\233\1\232\1\0"+
    "\1\232\1\0\2\232\2\0\2\232\1\235\3\0\2\233"+
    "\1\0\2\232\1\236\4\0\23\232\1\233\2\0\1\233"+
    "\1\0\2\233\22\0\1\103\75\0\35\105\1\107\3\105"+
    "\1\237\2\105\1\111\51\105\27\107\1\240\11\107\1\241"+
    "\2\107\1\0\112\107\1\241\2\107\1\0\51\107\27\0"+
    "\1\242\11\0\1\243\103\0\1\242\67\0\2\103\1\244"+
    "\1\245\1\0\1\244\77\0\2\244\7\0\2\103\1\113"+
    "\1\0\2\113\77\0\2\113\1\0\1\113\5\0\2\114"+
    "\1\115\1\114\2\115\1\114\1\246\2\114\2\0\4\114"+
    "\11\0\1\114\1\115\1\114\1\0\2\114\2\0\3\114"+
    "\1\115\5\0\2\114\5\0\23\114\1\0\2\115\1\0"+
    "\1\115\5\0\2\114\1\115\1\114\2\115\1\114\1\0"+
    "\2\114\2\0\4\114\11\0\1\114\1\115\1\114\1\0"+
    "\2\114\2\0\3\114\1\115\5\0\2\114\5\0\23\114"+
    "\1\0\2\115\1\0\1\115\14\0\1\246\2\0\2\116"+
    "\5\0\10\116\2\0\1\115\13\0\2\116\33\0\1\116"+
    "\2\0\1\116\1\0\2\116\2\0\21\117\1\247\13\117"+
    "\1\0\3\117\1\250\3\117\2\250\47\117\1\0\7\13"+
    "\1\0\2\13\2\21\4\13\1\0\10\21\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\2\0\2\21\1\0\2\13"+
    "\5\0\23\13\1\21\2\13\1\21\1\13\2\21\3\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\15\13"+
    "\1\251\5\13\1\0\2\13\1\0\1\13\14\0\1\252"+
    "\106\0\2\122\1\123\1\0\1\125\1\123\1\0\1\126"+
    "\2\127\2\0\4\130\65\0\2\123\1\0\1\125\7\0"+
    "\1\253\1\0\3\253\1\0\2\253\2\0\4\253\16\0"+
    "\1\253\13\0\1\253\6\0\2\253\2\0\1\253\17\0"+
    "\2\253\1\0\1\253\7\0\1\125\1\0\2\125\1\0"+
    "\1\131\2\127\2\0\4\130\65\0\2\125\1\0\1\125"+
    "\5\0\2\254\1\131\1\254\2\131\1\254\1\0\2\255"+
    "\2\256\4\254\1\257\10\256\1\254\1\0\1\254\1\0"+
    "\2\254\2\0\3\254\3\0\2\256\1\0\2\254\5\0"+
    "\23\254\1\256\2\131\1\256\1\131\2\256\5\0\1\260"+
    "\1\0\2\260\4\0\2\261\71\0\2\260\1\0\1\260"+
    "\7\0\1\131\1\0\2\131\2\0\2\127\2\0\4\130"+
    "\65\0\2\131\1\0\1\131\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\1\262\3\13\5\0\2\13\5\0\23\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\2\13\1\263\20\13\1\0\2\13\1\0"+
    "\1\13\4\0\27\264\1\265\5\264\1\0\3\264\1\266"+
    "\2\264\1\0\51\264\1\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\10\13\1\267\12\13\1\0\2\13"+
    "\1\0\1\13\5\0\1\13\1\270\5\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\3\13\1\271\17\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\1\13\1\272\2\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\4\0"+
    "\21\142\1\273\5\142\1\144\5\142\1\0\60\142\13\274"+
    "\2\145\5\274\1\275\7\145\16\274\2\145\33\274\1\145"+
    "\2\274\1\145\1\274\2\145\2\274\13\0\2\21\5\0"+
    "\1\21\1\276\6\21\16\0\2\21\33\0\1\21\2\0"+
    "\1\21\1\0\2\21\110\0\1\277\7\0\35\150\1\0"+
    "\60\150\27\0\1\300\10\0\1\300\56\0\7\301\1\0"+
    "\2\301\2\0\4\301\6\0\1\300\2\0\2\301\1\302"+
    "\1\0\2\301\1\300\1\0\4\301\5\0\2\301\5\0"+
    "\23\301\1\0\2\301\1\0\1\301\17\0\2\303\5\0"+
    "\10\303\6\0\1\300\7\0\2\303\33\0\1\303\2\0"+
    "\1\303\1\0\2\303\2\0\3\152\1\304\2\152\1\304"+
    "\4\152\2\154\5\152\10\154\3\152\1\0\1\305\11\152"+
    "\2\154\33\152\1\154\2\304\1\154\1\152\2\154\2\152"+
    "\27\156\1\157\5\156\1\0\3\156\1\306\111\156\1\0"+
    "\60\156\41\0\1\307\55\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\1\310\22\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\14\13\1\311\6\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\1\0\1\134\4\13\5\0\2\13"+
    "\5\0\23\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\14\13\1\312"+
    "\6\13\1\0\2\13\1\0\1\13\17\0\1\21\1\313"+
    "\5\0\10\21\16\0\2\21\1\314\32\0\1\21\2\0"+
    "\1\21\1\0\2\21\3\0\2\166\1\0\1\166\2\0"+
    "\1\166\1\0\2\166\2\21\4\166\1\0\10\21\1\166"+
    "\1\0\1\166\1\0\2\166\2\0\3\166\3\0\2\21"+
    "\1\0\2\166\5\0\23\166\1\21\2\0\1\21\1\0"+
    "\2\21\3\0\2\315\1\0\1\315\2\0\1\315\1\0"+
    "\2\315\2\0\4\315\1\0\1\316\7\0\1\315\1\0"+
    "\1\315\1\0\2\315\2\0\3\315\4\0\1\317\1\0"+
    "\2\315\5\0\23\315\12\0\2\320\1\0\1\320\2\0"+
    "\1\320\1\0\2\320\2\0\4\320\1\0\1\321\7\0"+
    "\1\320\1\0\1\320\1\0\2\320\2\0\3\320\4\0"+
    "\1\322\1\0\2\320\5\0\23\320\12\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\1\323\3\13\5\0\2\13\5\0\23\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\1\324\1\13\2\0"+
    "\4\13\5\0\2\13\5\0\1\325\10\13\1\326\11\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\1\13\1\327\2\13\5\0\2\13\5\0\3\13\1\330"+
    "\17\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\14\13\1\331\6\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\2\13\1\332\17\13\1\333"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\1\334\22\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\1\335\3\13"+
    "\5\0\2\13\5\0\2\13\1\336\20\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\6\13\1\337\14\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\1\13\1\340\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\16\13"+
    "\1\341\4\13\1\0\2\13\1\0\1\13\5\0\1\13"+
    "\1\342\5\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\23\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\1\13\1\343\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\23\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\2\13\1\344\1\13\1\345\16\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\4\13\1\346\16\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\1\13"+
    "\1\347\2\13\5\0\2\13\5\0\5\13\1\350\15\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\2\13\1\351\20\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\1\13"+
    "\1\352\2\13\5\0\2\13\5\0\23\13\1\0\2\13"+
    "\1\0\1\13\5\0\1\13\1\353\5\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\3\13\1\354\17\13\1\0"+
    "\2\13\1\0\1\13\4\0\27\217\1\220\5\217\1\0"+
    "\3\217\1\0\2\217\1\0\106\217\1\0\60\217\41\0"+
    "\1\355\55\0\7\223\1\0\2\223\2\0\4\223\11\0"+
    "\2\223\1\356\1\0\2\223\2\0\4\223\5\0\2\223"+
    "\5\0\23\223\1\0\2\223\1\0\1\223\17\0\2\224"+
    "\5\0\10\224\16\0\2\224\33\0\1\224\2\0\1\224"+
    "\1\0\2\224\2\0\21\225\1\357\5\225\1\360\5\225"+
    "\1\0\3\225\1\0\3\225\2\0\47\225\41\100\1\361"+
    "\2\100\1\0\112\100\1\362\2\100\1\0\51\100\1\0"+
    "\7\232\1\0\2\232\2\0\4\232\11\0\2\232\1\363"+
    "\1\0\2\232\2\0\4\232\5\0\2\232\5\0\23\232"+
    "\1\0\2\232\1\0\1\232\17\0\2\233\5\0\10\233"+
    "\16\0\2\233\33\0\1\233\2\0\1\233\1\0\2\233"+
    "\2\0\21\234\1\364\5\234\1\365\5\234\1\0\3\234"+
    "\1\0\3\234\2\0\47\234\27\107\1\240\11\107\1\366"+
    "\2\107\1\0\51\107\27\105\1\106\5\105\1\107\3\105"+
    "\1\237\2\105\1\111\51\105\41\107\1\366\2\107\1\0"+
    "\51\107\27\367\1\111\5\367\1\0\3\367\1\370\2\367"+
    "\1\111\51\367\41\0\1\246\55\0\2\103\1\244\2\0"+
    "\1\244\77\0\2\244\11\0\1\371\1\0\3\371\1\0"+
    "\2\371\2\0\4\371\16\0\1\371\13\0\1\371\6\0"+
    "\2\371\2\0\1\371\17\0\2\371\1\0\1\371\14\0"+
    "\1\246\16\0\1\117\115\0\1\117\67\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\11\13\1\372\11\13"+
    "\1\0\2\13\1\0\1\13\5\0\2\254\1\0\1\254"+
    "\2\0\1\254\1\0\2\254\2\256\4\254\1\257\10\256"+
    "\1\254\1\0\1\254\1\0\2\254\2\0\3\254\3\0"+
    "\2\256\1\0\2\254\5\0\23\254\1\256\2\0\1\256"+
    "\1\0\2\256\3\0\2\122\1\253\1\0\3\253\1\252"+
    "\2\253\2\0\4\253\16\0\1\253\13\0\1\253\6\0"+
    "\2\253\2\0\1\253\17\0\2\253\1\0\1\253\5\0"+
    "\7\254\1\0\2\254\2\0\4\254\11\0\2\254\1\373"+
    "\1\0\2\254\2\0\4\254\5\0\2\254\5\0\23\254"+
    "\1\0\2\254\1\0\1\254\5\0\7\254\1\0\2\254"+
    "\2\261\4\254\11\0\2\254\1\373\1\0\2\254\2\0"+
    "\4\254\5\0\2\254\5\0\23\254\1\0\2\254\1\0"+
    "\1\254\17\0\2\256\5\0\10\256\16\0\2\256\33\0"+
    "\1\256\2\0\1\256\1\0\2\256\2\0\21\257\1\374"+
    "\5\257\1\375\5\257\1\0\3\257\1\0\3\257\2\0"+
    "\47\257\3\0\1\260\1\0\2\260\6\0\4\130\65\0"+
    "\2\260\1\0\1\260\7\0\1\260\1\0\2\260\77\0"+
    "\2\260\1\0\1\260\5\0\7\13\1\0\1\13\1\376"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\1\13\1\377\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\4\0"+
    "\27\264\1\265\5\264\1\0\3\264\1\0\2\264\1\0"+
    "\106\264\1\0\60\264\41\0\1\u0100\55\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\1\u0101\22\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\1\u0102"+
    "\3\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\12\13\1\u0103\10\13\1\0\2\13\1\0\1\13"+
    "\4\0\22\274\1\u0104\106\274\2\145\5\274\1\275\1\u0105"+
    "\6\145\16\274\2\145\33\274\1\145\2\274\1\145\1\274"+
    "\2\145\2\274\13\0\2\21\5\0\1\u0106\7\21\16\0"+
    "\2\21\33\0\1\21\2\0\1\21\1\0\2\21\111\0"+
    "\1\u0107\7\0\7\301\1\0\2\301\2\0\4\301\11\0"+
    "\2\301\1\302\1\0\2\301\2\0\4\301\5\0\2\301"+
    "\5\0\23\301\1\0\2\301\1\0\1\301\5\0\7\301"+
    "\1\0\2\301\2\303\4\301\1\0\10\303\2\301\1\302"+
    "\1\0\2\301\2\0\4\301\2\0\2\303\1\0\2\301"+
    "\5\0\23\301\1\303\2\301\1\303\1\301\2\303\15\0"+
    "\2\303\5\0\10\303\16\0\2\303\33\0\1\303\2\0"+
    "\1\303\1\0\2\303\5\0\1\u0108\2\0\1\u0108\20\0"+
    "\1\300\10\0\1\300\45\0\2\u0108\11\0\1\u0109\1\0"+
    "\3\u010a\1\0\2\u010a\2\0\4\u010a\6\0\1\300\7\0"+
    "\1\u010a\1\300\12\0\1\u010a\6\0\2\u010a\2\0\1\u010a"+
    "\17\0\2\u010a\1\0\1\u010a\4\0\41\307\1\u010b\54\307"+
    "\1\0\1\13\1\u010c\5\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\1\13\1\u010d\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\23\13\1\0\2\13\1\0\1\13\5\0\1\13\1\u010e"+
    "\5\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\5\13"+
    "\1\u010f\15\13\1\0\2\13\1\0\1\13\17\0\1\21"+
    "\1\u0110\5\0\10\21\16\0\2\21\33\0\1\21\2\0"+
    "\1\21\1\0\2\21\55\0\1\u0111\56\0\1\u0112\35\0"+
    "\1\u0113\44\0\2\315\1\0\1\315\2\0\1\315\1\0"+
    "\2\315\2\0\4\315\11\0\1\315\1\0\1\315\1\0"+
    "\2\315\2\0\3\315\6\0\2\315\5\0\23\315\25\0"+
    "\1\u0114\35\0\1\u0115\44\0\2\320\1\0\1\320\2\0"+
    "\1\320\1\0\2\320\2\0\4\320\11\0\1\320\1\0"+
    "\1\320\1\0\2\320\2\0\3\320\6\0\2\320\5\0"+
    "\23\320\12\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\2\13\1\u0116\20\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\1\13\1\u0117\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\23\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\1\13\1\u0118\2\13\5\0\2\13\5\0"+
    "\23\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\1\u0119\3\13\5\0\2\13\5\0\23\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\5\13\1\u011a\15\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\1\13\1\u011b\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\23\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\1\u011c\1\13\2\0\4\13\5\0\2\13"+
    "\5\0\23\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\1\u011d\1\13\2\0\4\13\5\0\2\13\5\0\23\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\1\u011e\3\13\5\0\2\13\5\0\23\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\1\13\1\u011f\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\23\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\4\13\1\u0120\16\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\1\13\1\u0121\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\23\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\3\13\1\u0122\17\13"+
    "\1\0\2\13\1\0\1\13\5\0\1\13\1\u0123\5\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\23\13\1\0"+
    "\2\13\1\0\1\13\5\0\1\13\1\u0124\5\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\23\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\4\13\1\u0125\16\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\3\13\1\u0126\17\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\20\13\1\u0127\2\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\17\13"+
    "\1\u0128\3\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\2\13\1\u0129"+
    "\20\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\7\13\1\u012a\13\13"+
    "\1\0\2\13\1\0\1\13\5\0\1\13\1\u012b\5\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\23\13\1\0"+
    "\2\13\1\0\1\13\4\0\41\355\1\u012c\2\355\1\0"+
    "\51\355\1\0\7\223\1\0\2\223\2\224\4\223\1\0"+
    "\10\224\2\223\1\356\1\0\2\223\2\0\4\223\2\0"+
    "\2\224\1\0\2\223\5\0\23\223\1\224\2\223\1\224"+
    "\1\223\2\224\2\0\21\225\1\u012d\5\225\1\360\5\225"+
    "\1\0\60\225\41\100\1\0\2\100\1\0\51\100\1\0"+
    "\7\232\1\0\2\232\2\233\4\232\1\0\10\233\2\232"+
    "\1\363\1\0\2\232\2\0\4\232\2\0\2\233\1\0"+
    "\2\232\5\0\23\232\1\233\2\232\1\233\1\232\2\233"+
    "\2\0\21\234\1\u012e\5\234\1\365\5\234\1\0\60\234"+
    "\41\107\1\u012f\2\107\1\0\51\107\35\367\1\0\3\367"+
    "\1\370\2\367\1\111\51\367\1\0\2\103\1\371\1\0"+
    "\3\371\1\0\2\371\2\0\4\371\16\0\1\371\13\0"+
    "\1\371\6\0\2\371\2\0\1\371\17\0\2\371\1\0"+
    "\1\371\5\0\7\254\1\0\2\254\2\256\4\254\1\0"+
    "\10\256\2\254\1\373\1\0\2\254\2\0\4\254\2\0"+
    "\2\256\1\0\2\254\5\0\23\254\1\256\2\254\1\256"+
    "\1\254\2\256\2\0\21\257\1\u0130\5\257\1\375\5\257"+
    "\1\0\60\257\1\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\10\13\1\u0131\12\13\1\0\2\13\1\0"+
    "\1\13\4\0\41\u0100\1\u0132\2\u0100\1\0\51\u0100\1\0"+
    "\1\13\1\u0133\5\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\23\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\1\13\1\u0134\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\23\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\5\13\1\u0135\15\13\1\0"+
    "\2\13\1\0\1\13\4\0\22\274\1\u0104\1\u0136\72\274"+
    "\13\u0137\2\u0106\5\u0137\3\u0106\1\u0138\4\u0106\16\u0137\2\u0106"+
    "\33\u0137\1\u0106\2\u0137\1\u0106\1\u0137\2\u0106\2\u0137\17\0"+
    "\1\u0139\71\0\1\u013a\7\0\1\152\2\0\1\152\20\0"+
    "\1\300\10\0\1\300\45\0\2\152\11\0\1\u013b\1\0"+
    "\3\u013c\1\0\2\u013c\2\0\4\u013c\16\0\1\u013c\13\0"+
    "\1\u013c\6\0\2\u013c\2\0\1\u013c\17\0\2\u013c\1\0"+
    "\1\u013c\7\0\1\u013c\1\0\3\u013c\1\0\2\u013c\2\0"+
    "\4\u013c\16\0\1\u013c\13\0\1\u013c\6\0\2\u013c\2\0"+
    "\1\u013c\17\0\2\u013c\1\0\1\u013c\4\0\41\307\1\u013d"+
    "\54\307\1\0\7\13\1\0\1\13\1\u013e\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\3\13"+
    "\1\u013f\17\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\1\13\1\u0140\2\13\5\0\2\13\5\0"+
    "\23\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\3\13\1\u0141\17\13"+
    "\1\0\2\13\1\0\1\13\23\0\1\u0142\112\0\1\315"+
    "\154\0\1\u0143\56\0\1\320\154\0\1\u0144\43\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\3\13\1\u0145"+
    "\17\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\2\13\1\u0146\20\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\16\13\1\u0147\4\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\3\13\1\u0148\17\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\1\13\1\u0149"+
    "\2\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\1\u014a\3\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\u014b\2\13\2\0\3\13\1\u014c\2\u014b\3\0\2\13"+
    "\5\0\23\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\7\13\1\u014d"+
    "\13\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\4\13\1\u014e\16\13"+
    "\1\0\2\13\1\0\1\13\5\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\3\13\1\u014f\17\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\3\13\1\u0150\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\7\13\1\u0151\13\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\5\13\1\u0152\15\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\1\u0153"+
    "\22\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\1\u0154\22\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\1\13\1\u0155"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\1\13\1\u0156\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\4\0"+
    "\41\355\1\u0157\2\355\1\0\51\355\41\0\1\u0158\55\0"+
    "\7\13\1\0\2\13\2\0\3\13\1\u0159\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\23\13\1\0\2\13\1\0\1\13\4\0\41\u0100\1\u015a"+
    "\2\u0100\1\0\51\u0100\1\0\1\13\1\u015b\5\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\23\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\13\13\1\u015c\7\13\1\0\2\13\1\0"+
    "\1\13\4\0\25\u0137\1\u015d\103\u0137\2\u0106\5\u0137\3\u0106"+
    "\1\u015e\4\u0106\16\u0137\2\u0106\33\u0137\1\u0106\2\u0137\1\u0106"+
    "\1\u0137\2\u0106\2\u0137\106\0\1\u015f\12\0\1\u0160\115\0"+
    "\1\u0161\1\0\3\u0162\1\0\2\u0162\2\0\4\u0162\16\0"+
    "\1\u0162\13\0\1\u0162\6\0\2\u0162\2\0\1\u0162\17\0"+
    "\2\u0162\1\0\1\u0162\7\0\1\u0162\1\0\3\u0162\1\0"+
    "\2\u0162\2\0\4\u0162\16\0\1\u0162\13\0\1\u0162\6\0"+
    "\2\u0162\2\0\1\u0162\17\0\2\u0162\1\0\1\u0162\4\0"+
    "\41\307\1\u0163\54\307\1\0\7\13\1\0\2\13\2\0"+
    "\3\13\1\u0164\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\4\13\1\u0165\16\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\2\13\1\u0166\20\13\1\0\2\13\1\0\1\13\43\0"+
    "\1\u0167\75\0\1\u0168\115\0\1\u0169\77\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\1\u016a\22\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\10\13\1\u016b\12\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\3\13\1\u016c\17\13\1\0\2\13\1\0"+
    "\1\13\41\0\1\u014b\7\0\3\u014b\16\0\1\u016d\1\u016e"+
    "\27\0\7\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\u014b\2\13\2\0\3\13\1\u014c\2\u014b\3\0"+
    "\2\13\5\0\4\13\1\u016f\1\u0170\15\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\2\13\1\u0171\20\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\1\13\1\u0172\2\13"+
    "\5\0\2\13\5\0\23\13\1\0\2\13\1\0\1\13"+
    "\5\0\7\13\1\0\2\13\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\21\13\1\u0173\1\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\2\13"+
    "\1\u0174\20\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\4\13\1\u0175"+
    "\16\13\1\0\2\13\1\0\1\13\4\0\41\355\1\0"+
    "\2\355\1\0\51\355\1\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\1\u0176"+
    "\3\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\4\0\41\u0100\1\0\2\u0100\1\0\51\u0100\1\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\11\13"+
    "\1\u0177\11\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\1\13\1\u0178\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\23\13"+
    "\1\0\2\13\1\0\1\13\4\0\25\u0137\1\u0179\103\u0137"+
    "\2\u0106\5\u0137\1\u017a\2\u0106\1\u015e\4\u0106\16\u0137\2\u0106"+
    "\33\u0137\1\u0106\2\u0137\1\u0106\1\u0137\2\u0106\2\u0137\3\0"+
    "\1\152\1\0\3\152\1\0\2\152\2\0\4\152\16\0"+
    "\1\u017b\13\0\1\152\6\0\2\152\2\0\1\152\17\0"+
    "\2\152\1\0\1\152\7\0\1\152\1\0\3\152\1\0"+
    "\2\152\2\0\4\152\16\0\1\152\13\0\1\152\6\0"+
    "\2\152\2\0\1\152\17\0\2\152\1\0\1\152\45\0"+
    "\1\u0163\55\0\7\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\1\13\1\u017c\2\13"+
    "\5\0\2\13\5\0\23\13\1\0\2\13\1\0\1\13"+
    "\60\0\1\u017d\100\0\1\u017e\115\0\1\u017f\57\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\4\13\1\u0180"+
    "\16\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\1\13\1\u0181\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\23\13\1\0"+
    "\2\13\1\0\1\13\6\0\1\u0182\176\0\1\u0183\33\0"+
    "\1\13\1\u0184\5\13\1\0\2\13\2\0\4\13\11\0"+
    "\2\13\1\120\1\0\2\13\2\0\4\13\5\0\2\13"+
    "\5\0\23\13\1\0\2\13\1\0\1\13\5\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\1\13\1\u0185"+
    "\21\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\3\13\1\u0186\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\23\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\1\13\1\u0187"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\1\13\1\u0188\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\4\13\5\0\2\13\5\0\2\13"+
    "\1\u0189\20\13\1\0\2\13\1\0\1\13\4\0\22\u0137"+
    "\1\u018a\2\u0137\1\u0179\103\u0137\2\u0106\5\u0137\1\u0106\1\u018b"+
    "\1\u0106\1\u0138\4\u0106\16\u0137\2\u0106\33\u0137\1\u0106\2\u0137"+
    "\1\u0106\1\u0137\2\u0106\2\u0137\40\0\1\300\56\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\2\13\1\u018c"+
    "\20\13\1\0\2\13\1\0\1\13\43\0\1\u018d\132\0"+
    "\1\u018e\115\0\1\u018f\42\0\7\13\1\0\2\13\2\0"+
    "\4\13\11\0\2\13\1\120\1\0\2\13\2\0\4\13"+
    "\5\0\2\13\5\0\2\13\1\u0190\20\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\1\u0191\3\13"+
    "\5\0\2\13\5\0\23\13\1\0\2\13\1\0\1\13"+
    "\66\0\1\u0192\123\0\1\u0193\26\0\7\13\1\0\2\13"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\1\u0194\22\13\1\0\2\13"+
    "\1\0\1\13\5\0\7\13\1\0\2\13\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\6\13\1\u0195\14\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\1\13\1\u0196\2\0\4\13"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\5\0"+
    "\7\13\1\0\1\13\1\u0197\2\0\4\13\11\0\2\13"+
    "\1\120\1\0\2\13\2\0\4\13\5\0\2\13\5\0"+
    "\23\13\1\0\2\13\1\0\1\13\4\0\23\u0137\1\u0198"+
    "\1\u0137\1\u015d\70\u0137\52\0\1\166\102\0\1\u0199\115\0"+
    "\1\u019a\120\0\1\u019b\65\0\1\u019c\104\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\1\u019d\3\13\5\0\2\13\5\0\23\13\1\0"+
    "\2\13\1\0\1\13\5\0\7\13\1\0\1\13\1\u019e"+
    "\2\0\4\13\11\0\2\13\1\120\1\0\2\13\2\0"+
    "\4\13\5\0\2\13\5\0\23\13\1\0\2\13\1\0"+
    "\1\13\5\0\7\13\1\0\2\13\2\0\3\13\1\u019f"+
    "\11\0\2\13\1\120\1\0\2\13\2\0\4\13\5\0"+
    "\2\13\5\0\23\13\1\0\2\13\1\0\1\13\56\0"+
    "\1\315\115\0\1\320\105\0\1\u01a0\141\0\1\u01a1\30\0"+
    "\7\13\1\0\2\13\2\0\4\13\11\0\2\13\1\120"+
    "\1\0\2\13\2\0\1\u01a2\3\13\5\0\2\13\5\0"+
    "\23\13\1\0\2\13\1\0\1\13\5\0\7\13\1\0"+
    "\2\13\2\0\4\13\11\0\2\13\1\120\1\0\2\13"+
    "\2\0\4\13\5\0\2\13\5\0\4\13\1\u01a3\16\13"+
    "\1\0\2\13\1\0\1\13\70\0\1\u01a0\32\0\7\13"+
    "\1\0\2\13\2\0\4\13\11\0\2\13\1\120\1\0"+
    "\2\13\2\0\4\13\5\0\2\13\5\0\2\13\1\u01a2"+
    "\20\13\1\0\2\13\1\0\1\13\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25818];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\1\4\0\1\11\26\1\1\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\16\1\2\11\4\1\2\11"+
    "\4\1\1\11\4\0\1\1\1\0\2\1\4\0\4\1"+
    "\2\0\1\1\1\0\1\11\11\1\1\0\1\11\1\0"+
    "\2\1\1\0\2\1\1\0\4\1\1\0\6\1\1\11"+
    "\4\1\2\0\23\1\3\0\2\1\1\0\1\1\1\11"+
    "\2\0\2\1\1\0\1\1\1\11\1\1\4\0\1\1"+
    "\1\0\1\11\2\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\3\1\2\0\5\1\1\0\2\1\1\0\1\11"+
    "\3\1\2\0\1\11\1\0\4\1\1\0\1\11\2\0"+
    "\1\11\2\0\34\1\1\11\2\0\1\11\1\1\1\11"+
    "\3\0\4\1\1\11\1\0\6\1\1\0\2\1\5\0"+
    "\5\1\5\0\26\1\1\0\5\1\1\0\4\1\1\0"+
    "\1\1\5\0\4\1\3\0\6\1\1\0\13\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\2\11\2\0\4\1"+
    "\3\0\3\1\2\0\12\1\1\0\1\1\1\0\1\1"+
    "\3\0\2\1\2\0\6\1\1\0\2\1\3\0\2\1"+
    "\2\0\5\1\4\0\3\1\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //do we need to close interpolated String ${}
    private boolean insideInterpolatedStringBracers = false;
    private boolean insideInterpolatedMultilineStringBracers = false;
    //to get id after $ in interpolated String
    private boolean haveIdInString = false;
    private boolean haveIdInMultilineString = false;
    //bracers count inside injection
    private int structuralBracers = 0;

    public boolean isInsideInterpolatedStringInjection() {
      return structuralBracers > 0;
    }

    private IElementType process(IElementType type){
      if (type == tIDENTIFIER && (haveIdInString || haveIdInMultilineString)) {

        if (haveIdInString) {
          haveIdInString = false;
          yybegin(INSIDE_INTERPOLATED_STRING);
        } else {
          haveIdInMultilineString = false;
          yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
        }
      }

      return type;
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 71: 
          { return process(kCATCH);
          }
        case 92: break;
        case 68: 
          { return process(kTRAIT);
          }
        case 93: break;
        case 36: 
          { yybegin(COMMON_STATE);
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 94: break;
        case 90: 
          { return process(kPROTECTED);
          }
        case 95: break;
        case 32: 
          { return process(tLOWER_BOUND);
          }
        case 96: break;
        case 31: 
          { return process(tLINE_COMMENT);
          }
        case 97: break;
        case 26: 
          { yybegin(COMMON_STATE);
    return process(tINTERPOLATED_STRING_END);
          }
        case 98: break;
        case 58: 
          { return process(tSH_COMMENT);
          }
        case 99: break;
        case 8: 
          { return process(tCOLON);
          }
        case 100: break;
        case 81: 
          { return process(kEXTENDS);
          }
        case 101: break;
        case 53: 
          { return process(kVAR);
          }
        case 102: break;
        case 14: 
          { if (insideInterpolatedStringBracers || insideInterpolatedMultilineStringBracers) {
                                              ++structuralBracers;
                                            }

                                            return process(tLBRACE);
          }
        case 103: break;
        case 79: 
          { return process(kRETURN);
          }
        case 104: break;
        case 41: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
    insideInterpolatedStringBracers = true;
    return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 105: break;
        case 22: 
          { return process(tSEMICOLON);
          }
        case 106: break;
        case 59: 
          { return process(kTRUE);
          }
        case 107: break;
        case 80: 
          { return process(kOBJECT);
          }
        case 108: break;
        case 12: 
          { return process(tWRONG_STRING);
          }
        case 109: break;
        case 16: 
          { if (insideInterpolatedStringBracers || insideInterpolatedMultilineStringBracers) {
                                              --structuralBracers;
                                              if (structuralBracers == 0) {
                                                 if (insideInterpolatedMultilineStringBracers) {
                                                    yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
                                                    insideInterpolatedMultilineStringBracers = false;
                                                 } else {
                                                    yybegin(INSIDE_INTERPOLATED_STRING);
                                                    insideInterpolatedStringBracers = false;
                                                 }
                                              }

                                            }
                                            return process(tRBRACE);
          }
        case 110: break;
        case 3: 
          { return process(tSTUB);
          }
        case 111: break;
        case 64: 
          { return process(kWITH);
          }
        case 112: break;
        case 37: 
          { return process(tUPPER_BOUND);
          }
        case 113: break;
        case 6: 
          { return process(tDOT);
          }
        case 114: break;
        case 73: 
          { return process(kMATCH);
          }
        case 115: break;
        case 24: 
          { yybegin(INSIDE_INTERPOLATED_STRING);
    return process(tINTERPOLATED_STRING);
          }
        case 116: break;
        case 23: 
          { return process(tCOMMA);
          }
        case 117: break;
        case 34: 
          { return process(tSTRING);
          }
        case 118: break;
        case 60: 
          { return process(kTHIS);
          }
        case 119: break;
        case 69: 
          { return process(kTHROW);
          }
        case 120: break;
        case 52: 
          { return process(kVAL);
          }
        case 121: break;
        case 85: 
          { return process(kPRIVATE);
          }
        case 122: break;
        case 63: 
          { return process(kNULL);
          }
        case 123: break;
        case 40: 
          { return process(tINTERPOLATED_STRING_ESCAPE);
          }
        case 124: break;
        case 82: 
          { return process(kFINALLY);
          }
        case 125: break;
        case 83: 
          { return process(kFOR_SOME);
          }
        case 126: break;
        case 27: 
          { yybegin(COMMON_STATE);
    yypushback(yytext().length());
          }
        case 127: break;
        case 77: 
          { return process(kSEALED);
          }
        case 128: break;
        case 5: 
          { return process(tINTEGER);
          }
        case 129: break;
        case 44: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return process(tINTEGER);
          }
        case 130: break;
        case 70: 
          { return process(kCLASS);
          }
        case 131: break;
        case 89: 
          { return process(kOVERRIDE);
          }
        case 132: break;
        case 84: 
          { return process(kPACKAGE);
          }
        case 133: break;
        case 13: 
          { return process(tLSQBRACKET);
          }
        case 134: break;
        case 30: 
          { return process(kDO);
          }
        case 135: break;
        case 45: 
          { return process(kFOR);
          }
        case 136: break;
        case 11: 
          { yybegin(YYINITIAL);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 137: break;
        case 66: 
          { return process(kFALSE);
          }
        case 138: break;
        case 21: 
          { return process(tCHOOSE);
          }
        case 139: break;
        case 72: 
          { return process(kYIELD);
          }
        case 140: break;
        case 9: 
          { return process(tAT);
          }
        case 141: break;
        case 43: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(COMMON_STATE);
      insideInterpolatedMultilineStringBracers = true;
      return process(tINTERPOLATED_STRING_INJECTION);
          }
        case 142: break;
        case 4: 
          { return process(tIDENTIFIER);
          }
        case 143: break;
        case 51: 
          { return process(kNEW);
          }
        case 144: break;
        case 18: 
          { return process(tRPARENTHESIS);
          }
        case 145: break;
        case 88: 
          { return process(kREQUIRES);
          }
        case 146: break;
        case 48: 
          { if (insideInterpolatedStringBracers || insideInterpolatedMultilineStringBracers) {
                                              ++structuralBracers;
                                            }
                                            yypushback(yytext().length() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLBRACE);
          }
        case 147: break;
        case 49: 
          { yypushback(yytext().length() - 1);
                                            yybegin(YYINITIAL);
                                            return process(tLPARENTHESIS);
          }
        case 148: break;
        case 74: 
          { return process(kMACRO);
          }
        case 149: break;
        case 29: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(WAIT_FOR_INTERPOLATED_STRING);
  return process(tINTERPOLATED_STRING_ID);
          }
        case 150: break;
        case 55: 
          { yybegin(COMMON_STATE);
      return process(tINTERPOLATED_STRING_END);
          }
        case 151: break;
        case 38: 
          { return process(tVIEW);
          }
        case 152: break;
        case 42: 
          { if (yycharat(1) != '$') {
      haveIdInMultilineString = true;
      yybegin(COMMON_STATE);
      yypushback(yytext().length() - 1);
      return process(tINTERPOLATED_STRING_INJECTION);
    } else {
      yypushback(yytext().length() - 2);
      return process(tINTERPOLATED_STRING_ESCAPE);
    }
          }
        case 153: break;
        case 86: 
          { return process(kIMPLICIT);
          }
        case 154: break;
        case 17: 
          { return process(tLPARENTHESIS);
          }
        case 155: break;
        case 76: 
          { return process(tMULTILINE_STRING);
          }
        case 156: break;
        case 65: 
          { return process(kFINAL);
          }
        case 157: break;
        case 50: 
          { return process(kTRY);
          }
        case 158: break;
        case 61: 
          { return process(kTYPE);
          }
        case 159: break;
        case 7: 
          { return process(tINNER_CLASS);
          }
        case 160: break;
        case 56: 
          { return process(kLAZY);
          }
        case 161: break;
        case 39: 
          { if (yycharat(1) != '$') {
      haveIdInString = true;
      yybegin(COMMON_STATE);
      yypushback(yytext().length() - 1);
      return process(tINTERPOLATED_STRING_INJECTION);
    } else {
      yypushback(yytext().length() - 2);
      return process(tINTERPOLATED_STRING_ESCAPE);
    }
          }
        case 162: break;
        case 67: 
          { return process(kSUPER);
          }
        case 163: break;
        case 1: 
          { return process(tINTERPOLATED_STRING);
          }
        case 164: break;
        case 91: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return process(kCASE);
          }
        case 165: break;
        case 62: 
          { return process(kCASE);
          }
        case 166: break;
        case 10: 
          { return process(tUNDER);
          }
        case 167: break;
        case 33: 
          { return process(tSYMBOL);
          }
        case 168: break;
        case 19: 
          { return process(tASSIGN);
          }
        case 169: break;
        case 2: 
          { return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 170: break;
        case 78: 
          { return process(kIMPORT);
          }
        case 171: break;
        case 87: 
          { return process(kABSTRACT);
          }
        case 172: break;
        case 28: 
          { return process(tFLOAT);
          }
        case 173: break;
        case 25: 
          { yybegin(COMMON_STATE);
    return process(tWRONG_STRING);
          }
        case 174: break;
        case 54: 
          { yybegin(INSIDE_MULTI_LINE_INTERPOLATED_STRING);
    return process(tINTERPOLATED_MULTILINE_STRING);
          }
        case 175: break;
        case 35: 
          { return process(kIF);
          }
        case 176: break;
        case 47: 
          { return process(tCHAR);
          }
        case 177: break;
        case 20: 
          { return process(tFUNTYPE);
          }
        case 178: break;
        case 15: 
          { return process(tRSQBRACKET);
          }
        case 179: break;
        case 75: 
          { return process(kWHILE);
          }
        case 180: break;
        case 46: 
          { return process(kDEF);
          }
        case 181: break;
        case 57: 
          { return process(kELSE);
          }
        case 182: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
