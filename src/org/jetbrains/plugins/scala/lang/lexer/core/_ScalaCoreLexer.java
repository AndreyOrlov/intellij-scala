/* The following code was generated by JFlex 1.4.3 on 16.12.10 14:31 */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16.12.10 14:31 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMMON_STATE = 6;
  public static final int YYINITIAL = 0;
  public static final int NEW_LINE_ALLOWED = 4;
  public static final int NEW_LINE_DEPRECATED = 2;
  public static final int PROCESS_NEW_LINE = 8;
  public static final int WAIT_FOR_XML = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  1,  1,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\33\1\77\1\35\1\0\1\77\1\74\16\33\4\0\1\77\1\22"+
    "\1\41\1\23\1\32\1\63\1\24\1\40\1\106\1\65\1\24\1\13"+
    "\1\57\1\14\1\10\1\30\1\3\1\71\1\70\5\6\1\5\1\72"+
    "\1\25\1\60\1\31\1\61\1\62\1\100\1\26\1\37\1\7\1\101"+
    "\1\17\1\11\1\15\5\32\1\1\6\32\1\52\1\102\6\32\1\64"+
    "\1\27\1\66\1\24\1\34\1\21\1\43\1\103\1\42\1\20\1\12"+
    "\1\16\1\113\1\45\1\54\1\104\1\112\1\2\1\53\1\47\1\50"+
    "\1\107\1\73\1\51\1\46\1\44\1\36\1\111\1\56\1\4\1\55"+
    "\1\110\1\105\1\24\1\67\1\24\6\33\1\75\32\33\2\0\4\32"+
    "\2\24\1\0\1\24\1\32\1\0\1\24\1\33\1\24\1\0\1\24"+
    "\1\24\3\0\1\32\1\24\3\0\1\32\5\0\27\32\1\24\37\32"+
    "\1\24\u013f\32\31\0\162\32\4\0\14\32\16\0\5\32\11\0\1\32"+
    "\21\0\130\33\5\0\23\33\12\0\1\32\13\0\1\32\1\0\3\32"+
    "\1\0\1\32\1\0\24\32\1\0\54\32\1\0\46\32\1\24\5\32"+
    "\4\0\202\32\1\24\4\33\3\0\105\32\1\0\46\32\2\0\2\32"+
    "\6\0\20\32\41\0\46\32\2\0\1\32\7\0\47\32\11\0\21\33"+
    "\1\0\27\33\1\0\3\33\1\0\1\33\1\0\2\33\1\0\1\33"+
    "\13\0\33\32\5\0\3\32\15\0\4\33\12\0\2\24\6\33\13\0"+
    "\32\32\5\0\13\32\16\33\7\0\12\33\4\0\2\32\1\33\143\32"+
    "\1\0\1\32\10\33\1\0\6\33\2\32\2\33\1\24\4\33\2\32"+
    "\12\33\3\32\2\24\1\32\17\0\1\33\1\32\1\33\36\32\33\33"+
    "\2\0\3\32\60\0\46\32\13\33\1\32\u014f\0\3\33\66\32\2\0"+
    "\1\33\1\32\20\33\2\0\1\32\4\33\3\0\12\32\2\33\2\0"+
    "\12\33\21\0\3\33\1\0\10\32\2\0\2\32\2\0\26\32\1\0"+
    "\7\32\1\0\1\32\3\0\4\32\2\0\1\33\1\32\7\33\2\0"+
    "\2\33\2\0\3\33\11\0\1\33\4\0\2\32\1\0\3\32\2\33"+
    "\2\0\12\33\4\32\6\0\1\24\6\0\3\33\1\0\6\32\4\0"+
    "\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0\2\32\1\0"+
    "\2\32\2\0\1\33\1\0\5\33\4\0\2\33\2\0\3\33\13\0"+
    "\4\32\1\0\1\32\7\0\14\33\3\32\14\0\3\33\1\0\11\32"+
    "\1\0\3\32\1\0\26\32\1\0\7\32\1\0\2\32\1\0\5\32"+
    "\2\0\1\33\1\32\10\33\1\0\3\33\1\0\3\33\2\0\1\32"+
    "\17\0\2\32\2\33\2\0\12\33\1\0\1\32\17\0\3\33\1\0"+
    "\10\32\2\0\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0"+
    "\5\32\2\0\1\33\1\32\6\33\3\0\2\33\2\0\3\33\10\0"+
    "\2\33\4\0\2\32\1\0\3\32\4\0\12\33\1\24\1\32\20\0"+
    "\1\33\1\32\1\0\6\32\3\0\3\32\1\0\4\32\3\0\2\32"+
    "\1\0\1\32\1\0\2\32\3\0\2\32\3\0\3\32\3\0\10\32"+
    "\1\0\3\32\4\0\5\33\3\0\3\33\1\0\4\33\11\0\1\33"+
    "\17\0\11\33\3\0\6\24\1\32\1\24\6\0\3\33\1\0\10\32"+
    "\1\0\3\32\1\0\27\32\1\0\12\32\1\0\5\32\4\0\7\33"+
    "\1\0\3\33\1\0\4\33\7\0\2\33\11\0\2\32\4\0\12\33"+
    "\22\0\2\33\1\0\10\32\1\0\3\32\1\0\27\32\1\0\12\32"+
    "\1\0\5\32\2\0\1\33\1\32\7\33\1\0\3\33\1\0\4\33"+
    "\7\0\2\33\7\0\1\32\1\0\2\32\4\0\12\33\22\0\2\33"+
    "\1\0\10\32\1\0\3\32\1\0\27\32\1\0\20\32\4\0\6\33"+
    "\2\0\3\33\1\0\4\33\11\0\1\33\10\0\2\32\4\0\12\33"+
    "\22\0\2\33\1\0\22\32\3\0\30\32\1\0\11\32\1\0\1\32"+
    "\2\0\7\32\3\0\1\33\4\0\6\33\1\0\1\33\1\0\10\33"+
    "\22\0\2\33\15\0\60\32\1\33\2\32\7\33\4\0\10\32\10\33"+
    "\1\0\12\33\47\0\2\32\1\0\1\32\2\0\2\32\1\0\1\32"+
    "\2\0\1\32\6\0\4\32\1\0\7\32\1\0\3\32\1\0\1\32"+
    "\1\0\1\32\2\0\2\32\1\0\4\32\1\33\2\32\6\33\1\0"+
    "\2\33\1\32\2\0\5\32\1\0\1\32\1\0\6\33\2\0\12\33"+
    "\2\0\2\32\42\0\1\32\3\24\17\0\5\24\2\33\6\24\12\33"+
    "\12\0\1\24\1\33\1\24\1\33\1\24\1\33\4\0\2\33\10\32"+
    "\1\0\42\32\6\0\24\33\1\0\2\33\4\32\4\0\10\33\1\0"+
    "\44\33\1\0\10\24\1\33\6\24\2\0\1\24\60\0\42\32\1\0"+
    "\5\32\1\0\2\32\1\0\7\33\3\0\4\33\6\0\12\33\6\0"+
    "\6\32\4\33\106\0\46\32\12\0\51\32\7\0\132\32\5\0\104\32"+
    "\5\0\122\32\6\0\7\32\1\0\77\32\1\0\1\32\1\0\4\32"+
    "\2\0\7\32\1\0\1\32\1\0\4\32\2\0\47\32\1\0\1\32"+
    "\1\0\4\32\2\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32"+
    "\1\0\1\32\1\0\4\32\2\0\7\32\1\0\7\32\1\0\27\32"+
    "\1\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32\1\0\47\32"+
    "\1\0\23\32\16\0\11\33\56\0\125\32\14\0\u026c\32\2\0\10\32"+
    "\12\0\32\32\5\0\113\32\3\0\3\32\17\0\15\32\1\0\4\32"+
    "\3\33\13\0\22\32\3\33\13\0\22\32\2\33\14\0\15\32\1\0"+
    "\3\32\1\0\2\33\14\0\64\32\40\33\3\0\1\32\3\0\2\32"+
    "\1\33\2\0\12\33\41\0\3\33\2\0\12\33\6\0\130\32\10\0"+
    "\51\32\1\33\126\0\35\32\3\0\14\33\4\0\14\33\4\0\1\24"+
    "\5\0\12\33\36\32\2\0\5\32\153\0\40\24\u0300\0\154\32\224\0"+
    "\234\32\4\0\132\32\6\0\26\32\2\0\6\32\2\0\46\32\2\0"+
    "\6\32\2\0\10\32\1\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\37\32\2\0\65\32\1\0\7\32\1\0\1\32\3\0\3\32\1\0"+
    "\7\32\3\0\4\32\2\0\6\32\4\0\15\32\5\0\3\32\1\0"+
    "\7\32\17\0\4\33\30\0\1\76\1\76\5\33\20\0\2\32\3\0"+
    "\1\24\15\0\1\24\1\0\1\32\13\0\4\33\6\0\6\33\1\0"+
    "\1\32\10\0\3\24\2\0\1\32\12\0\3\24\23\0\22\32\36\0"+
    "\15\33\4\0\1\33\3\0\6\33\25\0\2\24\1\32\4\24\1\32"+
    "\2\24\12\32\1\24\1\32\3\24\5\32\6\24\1\32\1\24\1\32"+
    "\1\24\1\32\1\24\4\32\1\24\3\32\1\24\7\32\2\24\1\0"+
    "\3\32\5\24\5\32\1\24\1\24\24\0\44\32\14\0\5\24\5\24"+
    "\2\24\4\24\1\24\2\24\1\24\2\24\1\24\7\24\1\24\37\24"+
    "\2\24\2\24\1\24\1\24\1\24\37\24\u010c\24\10\24\4\24\24\24"+
    "\2\24\7\24\2\0\121\24\1\24\36\24\31\24\3\0\32\24\57\0"+
    "\47\24\31\0\13\24\121\0\116\24\26\0\267\24\1\24\11\24\1\24"+
    "\66\24\10\24\30\24\1\0\126\24\1\24\16\24\2\0\22\24\16\0"+
    "\2\24\137\0\4\24\1\0\4\24\2\0\34\24\1\0\43\24\1\0"+
    "\1\24\1\0\4\24\3\0\1\24\1\0\7\24\2\0\7\24\54\0"+
    "\1\24\3\0\30\24\1\0\16\24\21\0\26\24\12\0\20\24\u0100\24"+
    "\203\24\26\0\77\24\4\0\40\24\2\0\u0102\24\16\24\u0372\0\32\24"+
    "\1\0\131\24\14\0\326\24\32\0\14\24\10\0\1\24\3\32\12\0"+
    "\2\24\14\0\1\24\11\32\6\33\1\0\5\32\2\24\5\32\1\0"+
    "\2\24\1\0\126\32\2\0\2\33\2\0\3\32\1\0\137\32\5\0"+
    "\50\32\4\0\136\32\1\0\2\24\4\0\12\24\30\32\70\0\20\32"+
    "\37\24\13\0\32\24\14\0\1\24\17\0\36\24\1\0\1\24\12\0"+
    "\47\24\17\0\77\24\1\0\u0100\24\u19b6\32\12\0\100\24\u51a6\32\132\0"+
    "\u048d\32\3\0\67\24\u0739\0\u2ba4\32\u215c\0\u012e\32\2\0\73\32\225\0"+
    "\7\32\14\0\5\32\5\0\1\32\1\33\12\32\1\24\15\32\1\0"+
    "\5\32\1\0\1\32\1\0\2\32\1\0\2\32\1\0\154\32\41\0"+
    "\u016b\32\22\0\100\32\2\0\66\32\50\0\15\32\1\24\2\0\20\33"+
    "\20\0\4\33\17\0\2\32\30\0\3\32\22\0\1\24\1\0\3\24"+
    "\2\0\1\32\6\0\5\32\1\0\207\32\2\0\1\33\4\0\1\32"+
    "\6\0\1\24\4\0\12\33\2\0\3\24\2\0\32\32\4\0\1\32"+
    "\1\0\32\32\1\0\1\24\1\0\1\24\6\0\132\32\3\0\6\32"+
    "\2\0\6\32\2\0\6\32\2\0\3\32\3\0\2\32\1\24\1\0"+
    "\1\24\2\32\1\0\1\24\4\24\2\24\12\0\3\33\2\24\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\2\2\2\3\1\4\4\2\1\1\1\5"+
    "\1\6\1\7\2\2\1\10\1\11\1\1\1\12\13\2"+
    "\1\13\1\14\1\15\1\2\1\16\1\17\1\20\1\21"+
    "\1\11\1\22\1\23\2\2\1\15\1\24\1\25\1\26"+
    "\17\27\1\30\23\27\4\31\1\32\1\33\2\34\15\0"+
    "\2\2\2\3\2\0\1\35\1\0\2\35\6\2\1\36"+
    "\1\0\1\2\1\0\2\2\1\37\1\40\1\41\1\42"+
    "\1\0\3\43\1\12\1\0\1\44\16\2\1\45\4\2"+
    "\1\46\1\47\2\0\3\2\1\50\2\0\2\51\1\52"+
    "\2\51\1\52\10\51\1\52\2\51\1\0\1\53\23\0"+
    "\1\2\1\0\1\3\3\54\1\0\1\35\1\0\3\2"+
    "\1\55\1\2\1\56\3\2\1\57\3\43\2\0\1\44"+
    "\1\0\10\2\1\60\3\2\1\61\12\2\1\62\2\0"+
    "\1\63\2\0\3\2\1\64\1\65\3\0\1\66\1\0"+
    "\1\66\5\0\1\67\1\70\2\0\1\71\5\0\1\72"+
    "\17\0\1\73\2\54\1\0\1\74\4\2\1\75\1\2"+
    "\4\0\2\2\1\76\2\2\1\77\1\100\1\2\1\101"+
    "\2\2\1\102\11\2\1\103\4\0\3\2\1\75\1\0"+
    "\1\66\32\0\1\54\1\2\1\104\1\2\1\105\1\2"+
    "\3\0\1\106\1\107\1\0\2\2\1\110\1\111\1\2"+
    "\1\112\4\2\1\113\2\2\1\114\1\115\2\0\3\2"+
    "\1\0\1\116\6\0\1\117\13\0\4\2\2\0\1\120"+
    "\2\0\3\2\1\121\1\122\1\2\1\123\2\2\1\124"+
    "\2\0\3\2\7\0\1\125\1\0\1\71\7\0\1\126"+
    "\1\127\1\130\1\2\3\0\6\2\2\0\1\131\1\2"+
    "\1\132\4\0\1\133\11\0\1\75\2\0\2\2\1\134"+
    "\1\135\1\136\1\137\2\0\1\2\1\75\2\140\12\0"+
    "\2\2\2\0\1\141\5\0\1\142\1\0\1\142\1\2"+
    "\2\0\1\143\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[553];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474"+
    "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4"+
    "\0\u0558\0\u0720\0\u076c\0\u0390\0\u07b8\0\u0804\0\u0850\0\u089c"+
    "\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc"+
    "\0\u0b48\0\u0b94\0\u0344\0\u0344\0\u0be0\0\u0c2c\0\u0344\0\u0344"+
    "\0\u0344\0\u0344\0\u0344\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8"+
    "\0\u0344\0\u0344\0\u0344\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474"+
    "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4"+
    "\0\u0720\0\u076c\0\u0df4\0\u0804\0\u0850\0\u089c\0\u08e8\0\u0934"+
    "\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48\0\u0b94"+
    "\0\u0da8\0\u0c2c\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0344\0\u0e40"+
    "\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70\0\u0344\0\u0fbc\0\u1008\0\u1054"+
    "\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4"+
    "\0\u1300\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514"+
    "\0\u1560\0\u15ac\0\u15f8\0\u0344\0\u1644\0\u1690\0\u16dc\0\u1728"+
    "\0\u1774\0\u17c0\0\u180c\0\u0390\0\u063c\0\u0344\0\u1858\0\u18a4"+
    "\0\u18f0\0\u193c\0\u0558\0\u0558\0\u0558\0\u1988\0\u19d4\0\u1a20"+
    "\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u1c34\0\u1c80"+
    "\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0"+
    "\0\u1f2c\0\u1f78\0\u0390\0\u1fc4\0\u2010\0\u205c\0\u20a8\0\u0558"+
    "\0\u0558\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\u0558\0\u2270"+
    "\0\u22bc\0\u0344\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u0344\0\u2438"+
    "\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698"+
    "\0\u26e4\0\u0f24\0\u2730\0\u0344\0\u277c\0\u27c8\0\u2814\0\u2860"+
    "\0\u28ac\0\u28f8\0\u0344\0\u2944\0\u2990\0\u29dc\0\u1184\0\u2a28"+
    "\0\u2a74\0\u2ac0\0\u0344\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c"+
    "\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c"+
    "\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u3018\0\u0390\0\u063c\0\u3064"+
    "\0\u30b0\0\u0344\0\u30fc\0\u3148\0\u3194\0\u31e0\0\u322c\0\u0344"+
    "\0\u3278\0\u32c4\0\u3310\0\u335c\0\u33a8\0\u33f4\0\u3440\0\u348c"+
    "\0\u34d8\0\u0390\0\u3524\0\u3570\0\u35bc\0\u0390\0\u3608\0\u3654"+
    "\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0\0\u381c\0\u3868\0\u38b4"+
    "\0\u0344\0\u3900\0\u394c\0\u0344\0\u3998\0\u39e4\0\u3a30\0\u3a7c"+
    "\0\u3ac8\0\u0390\0\u0390\0\u3b14\0\u3b60\0\u2308\0\u3bac\0\u3bf8"+
    "\0\u0344\0\u3c44\0\u3c90\0\u3cdc\0\u3d28\0\u3d74\0\u0344\0\u0344"+
    "\0\u3dc0\0\u3e0c\0\u0344\0\u3e58\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88"+
    "\0\u0344\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u4104\0\u4150\0\u419c"+
    "\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364\0\u43b0\0\u43fc"+
    "\0\u0390\0\u4448\0\u0344\0\u4494\0\u0390\0\u44e0\0\u452c\0\u4578"+
    "\0\u45c4\0\u18a4\0\u4610\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u478c"+
    "\0\u47d8\0\u4824\0\u4870\0\u48bc\0\u0390\0\u0390\0\u4908\0\u0390"+
    "\0\u4954\0\u49a0\0\u0390\0\u49ec\0\u4a38\0\u4a84\0\u4ad0\0\u4b1c"+
    "\0\u4b68\0\u4bb4\0\u4c00\0\u4c4c\0\u0390\0\u4c98\0\u4ce4\0\u4d30"+
    "\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60\0\u2270\0\u4eac\0\u4ef8\0\u4f44"+
    "\0\u4f90\0\u4fdc\0\u5028\0\u5074\0\u50c0\0\u510c\0\u5158\0\u51a4"+
    "\0\u51f0\0\u523c\0\u5288\0\u52d4\0\u5320\0\u536c\0\u53b8\0\u5404"+
    "\0\u5450\0\u549c\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u5618\0\u5664"+
    "\0\u56b0\0\u2e04\0\u56fc\0\u0390\0\u5748\0\u5794\0\u57e0\0\u582c"+
    "\0\u5878\0\u58c4\0\u0390\0\u0390\0\u5910\0\u595c\0\u59a8\0\u0390"+
    "\0\u0390\0\u59f4\0\u0390\0\u5a40\0\u5a8c\0\u5ad8\0\u5b24\0\u0390"+
    "\0\u5b70\0\u5bbc\0\u0390\0\u0390\0\u5c08\0\u5c54\0\u5ca0\0\u5cec"+
    "\0\u5d38\0\u5d84\0\u24d0\0\u5dd0\0\u5e1c\0\u5e68\0\u5eb4\0\u5f00"+
    "\0\u5f4c\0\u5f98\0\u5fe4\0\u6030\0\u607c\0\u60c8\0\u6114\0\u6160"+
    "\0\u61ac\0\u61f8\0\u6244\0\u6290\0\u62dc\0\u6328\0\u6374\0\u63c0"+
    "\0\u640c\0\u6458\0\u64a4\0\u64f0\0\u653c\0\u6588\0\u65d4\0\u6620"+
    "\0\u666c\0\u0390\0\u0390\0\u66b8\0\u0390\0\u6704\0\u6750\0\u0390"+
    "\0\u679c\0\u67e8\0\u6834\0\u6880\0\u68cc\0\u6918\0\u6964\0\u69b0"+
    "\0\u69fc\0\u6a48\0\u6a94\0\u6ae0\0\u24d0\0\u6b2c\0\u6b2c\0\u6b78"+
    "\0\u6bc4\0\u6c10\0\u6c5c\0\u6ca8\0\u6cf4\0\u6d40\0\u0390\0\u0390"+
    "\0\u0390\0\u6d8c\0\u6dd8\0\u6e24\0\u6e70\0\u6ebc\0\u6f08\0\u6f54"+
    "\0\u6fa0\0\u6fec\0\u7038\0\u7084\0\u70d0\0\u0390\0\u711c\0\u0390"+
    "\0\u7168\0\u71b4\0\u7200\0\u724c\0\u0344\0\u7298\0\u72e4\0\u7330"+
    "\0\u737c\0\u73c8\0\u7414\0\u7460\0\u74ac\0\u74f8\0\u4610\0\u7544"+
    "\0\u7590\0\u75dc\0\u7628\0\u0390\0\u0390\0\u0390\0\u0390\0\u7674"+
    "\0\u76c0\0\u770c\0\u4eac\0\u24d0\0\u0344\0\u7758\0\u77a4\0\u77f0"+
    "\0\u783c\0\u7888\0\u78d4\0\u7920\0\u796c\0\u79b8\0\u7a04\0\u7a50"+
    "\0\u7a9c\0\u7ae8\0\u7b34\0\u0390\0\u7b80\0\u7bcc\0\u7c18\0\u24d0"+
    "\0\u7c64\0\u0344\0\u7cb0\0\u0390\0\u7cfc\0\u7d48\0\u7d94\0\u0344"+
    "\0\u7de0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[553];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\16\1\17\1\15\2\20\1\15\1\21"+
    "\1\15\1\22\2\23\1\15\1\24\1\15\1\25\1\26"+
    "\1\23\1\27\1\23\1\30\1\31\1\23\1\32\1\33"+
    "\1\15\1\14\1\34\1\35\2\15\1\36\1\37\1\40"+
    "\1\41\1\42\1\15\1\43\1\44\1\45\1\46\1\15"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\23\1\57\1\60\1\61\1\62\3\20\1\15\3\35"+
    "\1\63\1\23\4\15\1\64\1\65\1\66\1\15\1\67"+
    "\2\15\1\14\1\15\1\16\1\17\1\15\2\20\1\15"+
    "\1\21\1\15\1\22\2\23\1\15\1\24\1\15\1\25"+
    "\1\26\1\23\1\27\1\23\1\30\1\31\1\23\1\32"+
    "\1\33\1\15\1\14\1\34\1\35\2\15\1\36\1\37"+
    "\1\40\1\41\1\42\1\15\1\43\1\44\1\45\1\46"+
    "\1\15\1\47\1\50\1\51\1\52\1\53\1\54\1\70"+
    "\1\56\1\23\1\57\1\71\1\72\1\73\3\20\1\15"+
    "\3\35\1\63\1\23\4\15\1\64\1\65\1\66\1\15"+
    "\1\67\2\15\1\74\1\75\1\76\1\77\1\75\2\100"+
    "\1\75\1\101\1\75\1\102\2\103\1\75\1\104\1\75"+
    "\1\105\1\106\1\103\1\107\1\103\1\110\2\103\1\111"+
    "\1\112\1\75\1\74\1\75\1\113\2\75\1\114\1\115"+
    "\1\116\1\117\1\120\1\75\1\121\1\122\1\123\1\124"+
    "\1\75\1\125\1\126\1\127\1\130\2\74\1\131\1\132"+
    "\1\103\4\74\3\100\1\75\3\113\1\74\1\103\4\75"+
    "\1\133\1\134\1\135\1\75\1\136\2\75\23\137\1\140"+
    "\1\137\1\141\2\137\1\142\4\137\1\143\36\137\3\143"+
    "\1\144\14\137\31\145\1\146\62\145\35\0\1\147\36\0"+
    "\3\147\61\0\1\150\1\0\1\151\46\0\7\152\1\0"+
    "\2\152\2\0\4\152\11\0\3\152\1\0\2\152\2\0"+
    "\15\152\11\0\4\152\1\0\1\152\3\0\4\152\2\0"+
    "\5\152\3\0\1\153\1\0\2\153\1\0\1\154\4\0"+
    "\4\155\47\0\3\153\24\0\1\156\1\0\2\157\61\0"+
    "\3\157\22\0\2\160\1\161\1\160\2\161\1\160\1\0"+
    "\2\160\2\162\4\160\1\163\10\162\1\160\1\161\1\160"+
    "\1\0\2\160\2\0\15\160\2\0\3\162\4\0\3\161"+
    "\1\160\1\0\1\161\2\0\1\162\4\160\2\0\5\160"+
    "\115\0\7\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\15\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\1\15\1\165\13\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\2\166\1\167\1\170"+
    "\1\171\1\167\1\0\1\172\2\173\2\0\4\174\47\0"+
    "\2\167\1\171\22\0\2\166\1\20\1\0\2\20\1\0"+
    "\1\172\2\173\2\0\4\174\47\0\3\20\24\0\1\175"+
    "\1\0\2\175\61\0\3\175\22\0\1\15\1\176\1\15"+
    "\1\177\3\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\15\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\13\0\2\23\5\0"+
    "\10\23\27\0\3\23\14\0\1\23\14\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\1\15\1\200\4\15\1\201\3\15\1\202\2\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\7\15\1\0\1\15\1\203\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\6\15\1\204\6\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\21\205\1\206\5\205\1\207\5\205\1\0\3\205\1\0"+
    "\32\205\3\0\15\205\13\0\2\23\5\0\1\210\7\23"+
    "\27\0\3\23\14\0\1\23\26\0\2\23\5\0\3\23"+
    "\1\211\4\23\27\0\3\23\14\0\1\23\26\0\2\23"+
    "\5\0\6\23\1\212\1\23\27\0\3\23\14\0\1\23"+
    "\26\0\1\23\1\213\5\0\3\23\1\214\4\23\27\0"+
    "\2\23\1\215\14\0\1\23\50\0\1\35\36\0\4\35"+
    "\14\0\1\216\2\217\1\216\1\217\2\216\1\217\1\216"+
    "\2\217\2\220\4\217\1\216\5\220\1\221\2\220\1\217"+
    "\1\216\1\217\1\0\2\217\1\0\1\216\15\217\2\216"+
    "\3\220\7\216\1\217\1\0\3\216\1\220\4\217\2\216"+
    "\5\217\27\222\1\223\5\222\1\0\3\222\1\224\32\222"+
    "\1\0\17\222\1\0\1\15\1\225\5\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\1\15\1\226\13\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\15\15"+
    "\11\0\4\15\1\0\1\15\3\0\2\15\1\227\1\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\3\15\1\230"+
    "\3\15\1\231\3\15\1\232\1\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\1\15\1\233\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\1\234\1\15\2\0\15\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\1\15"+
    "\1\235\2\0\4\15\11\0\2\15\1\164\1\0\1\236"+
    "\1\15\2\0\15\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\15\15"+
    "\11\0\4\15\1\0\1\15\3\0\2\15\1\237\1\15"+
    "\2\0\2\15\1\240\2\15\1\0\7\15\1\0\1\15"+
    "\1\241\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\1\15\1\242"+
    "\13\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\1\15\1\243"+
    "\2\15\11\0\2\15\1\164\1\0\2\15\2\0\11\15"+
    "\1\244\3\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\12\15\1\245"+
    "\2\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\3\15\1\246\6\15"+
    "\1\247\2\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\13\0\2\23\5\0\10\23\27\0\1\23"+
    "\1\250\1\23\14\0\1\23\26\0\2\23\5\0\3\23"+
    "\1\251\4\23\27\0\3\23\14\0\1\23\44\0\1\252"+
    "\113\0\1\253\63\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\1\15\1\254"+
    "\5\15\1\255\5\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\1\15"+
    "\1\256\13\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\13\0\2\23\5\0\10\23\27\0\1\23"+
    "\1\257\1\23\14\0\1\23\50\0\1\113\36\0\4\113"+
    "\36\0\1\260\116\0\1\261\116\0\1\212\63\0\3\262"+
    "\1\263\1\262\2\263\1\262\1\264\1\262\1\265\3\262"+
    "\1\266\4\262\1\267\1\262\1\267\1\262\1\270\1\262"+
    "\1\271\2\262\1\272\1\143\4\262\1\273\6\262\1\274"+
    "\1\262\1\275\1\262\1\276\1\277\2\267\1\300\1\301"+
    "\1\262\4\267\3\263\1\262\4\302\14\262\31\0\1\303"+
    "\63\0\2\304\1\0\1\304\2\0\1\304\1\0\2\304"+
    "\2\0\4\304\1\0\1\305\7\0\1\304\1\0\1\304"+
    "\1\0\2\304\2\0\15\304\14\0\1\304\4\0\1\306"+
    "\4\304\2\0\5\304\35\0\1\147\36\0\4\147\56\0"+
    "\1\307\117\0\1\310\57\0\1\311\5\0\1\312\13\0"+
    "\1\313\10\0\1\314\1\315\6\0\1\316\41\0\1\153"+
    "\1\0\2\153\1\0\1\317\2\320\2\321\53\0\3\153"+
    "\24\0\1\317\1\0\2\317\61\0\3\317\24\0\1\322"+
    "\1\0\2\322\1\0\1\154\57\0\3\322\22\0\2\323"+
    "\1\324\1\325\1\0\1\324\61\0\2\324\23\0\2\323"+
    "\1\157\1\0\2\157\61\0\3\157\22\0\2\160\1\161"+
    "\1\160\2\161\1\160\1\313\2\160\2\0\4\160\11\0"+
    "\1\160\1\161\1\160\1\0\2\160\2\0\15\160\11\0"+
    "\3\161\1\160\1\0\1\161\3\0\4\160\2\0\5\160"+
    "\1\0\2\160\1\161\1\160\2\161\1\160\1\0\2\160"+
    "\2\0\4\160\11\0\1\160\1\161\1\160\1\0\2\160"+
    "\2\0\15\160\11\0\3\161\1\160\1\0\1\161\3\0"+
    "\4\160\2\0\5\160\10\0\1\313\2\0\2\162\5\0"+
    "\10\162\2\0\1\161\24\0\3\162\14\0\1\162\13\0"+
    "\21\163\1\326\13\163\1\0\3\163\1\327\32\163\1\0"+
    "\2\327\15\163\1\0\7\15\1\0\2\15\2\23\4\15"+
    "\1\0\10\23\2\15\1\164\1\0\2\15\2\0\15\15"+
    "\2\0\3\23\4\0\4\15\1\0\1\15\2\0\1\23"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\15\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\1\15"+
    "\1\330\3\15\10\0\1\331\104\0\2\166\1\167\1\0"+
    "\1\171\1\167\1\0\1\172\2\173\2\0\4\174\47\0"+
    "\2\167\1\171\24\0\1\332\1\0\3\332\1\0\2\332"+
    "\2\0\4\332\16\0\1\332\2\0\2\332\24\0\3\332"+
    "\6\0\1\332\1\0\1\332\13\0\1\171\1\0\2\171"+
    "\1\0\1\175\2\173\2\0\4\174\47\0\3\171\22\0"+
    "\2\333\1\175\1\333\2\175\1\333\1\0\2\334\2\335"+
    "\4\333\1\336\10\335\1\333\1\0\1\333\1\0\2\333"+
    "\2\0\15\333\2\0\3\335\4\0\3\175\1\333\4\0"+
    "\1\335\4\333\2\0\5\333\3\0\1\337\1\0\2\337"+
    "\4\0\2\340\53\0\3\337\24\0\1\175\1\0\2\175"+
    "\2\0\2\173\2\0\4\174\47\0\3\175\22\0\7\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\4\15\1\341\10\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\2\15\1\342\12\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\1\15\1\343\5\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\15\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\7\15"+
    "\1\344\5\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\5\15\1\345"+
    "\7\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\1\15\1\346"+
    "\2\15\11\0\2\15\1\164\1\0\2\15\2\0\15\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\21\205\1\347\5\205\1\207\5\205\1\0\36\205\1\0"+
    "\17\205\13\260\2\210\5\260\1\350\7\210\27\260\3\210"+
    "\14\260\1\210\13\260\13\0\2\23\5\0\1\23\1\351"+
    "\6\23\27\0\3\23\14\0\1\23\13\0\35\212\1\0"+
    "\36\212\1\0\17\212\27\0\1\352\10\0\1\352\54\0"+
    "\7\353\1\0\2\353\2\0\4\353\6\0\1\352\2\0"+
    "\2\353\1\354\1\0\2\353\1\352\1\0\15\353\11\0"+
    "\4\353\1\0\1\353\3\0\4\353\2\0\5\353\13\0"+
    "\2\355\5\0\10\355\6\0\1\352\20\0\3\355\14\0"+
    "\1\355\13\0\3\216\1\356\2\216\1\356\4\216\2\220"+
    "\5\216\10\220\3\216\1\0\1\357\22\216\3\220\4\216"+
    "\2\356\2\216\1\0\3\216\1\220\13\216\27\222\1\223"+
    "\5\222\1\0\3\222\1\360\32\222\1\0\54\222\1\0"+
    "\36\222\1\0\17\222\41\0\1\361\53\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\1\15\1\362\13\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\2\15\1\363\1\15\1\364\10\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\4\15\1\365\10\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\7\15\1\366\2\15\1\367\2\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\1\370"+
    "\1\15\2\0\1\15\1\371\11\15\1\372\1\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\2\15\2\0\4\15\11\0\2\15\1\164"+
    "\1\0\2\15\2\0\15\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\1\373\4\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\1\15\1\374\13\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\15\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\1\375\4\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\14\15\1\376"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\1\15\1\377\5\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\15\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\2\15\2\0\4\15\11\0\2\15\1\164"+
    "\1\0\2\15\2\0\15\15\11\0\4\15\1\0\1\15"+
    "\3\0\3\15\1\u0100\2\0\5\15\1\0\7\15\1\0"+
    "\1\15\1\u0101\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\15\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\2\15"+
    "\1\u0102\12\15\11\0\3\15\1\u0103\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\2\15"+
    "\1\u0104\12\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\15\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\1\u0105\4\15"+
    "\1\0\7\15\1\0\1\15\1\u0106\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\15\15\11\0\4\15"+
    "\1\0\1\15\3\0\4\15\2\0\5\15\1\0\7\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\12\15\1\u0107\2\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\2\15\1\u0108\12\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\2\u0109\1\0\1\u0109"+
    "\2\0\1\u0109\1\0\2\u0109\2\0\4\u0109\1\0\1\u010a"+
    "\7\0\1\u0109\1\0\1\u0109\1\0\2\u0109\2\0\15\u0109"+
    "\14\0\1\u0109\4\0\1\u010b\4\u0109\2\0\5\u0109\1\0"+
    "\2\u010c\1\0\1\u010c\2\0\1\u010c\1\0\2\u010c\2\0"+
    "\4\u010c\1\0\1\u010d\7\0\1\u010c\1\0\1\u010c\1\0"+
    "\2\u010c\2\0\15\u010c\14\0\1\u010c\4\0\1\u010e\4\u010c"+
    "\2\0\5\u010c\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\1\u010f\14\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\7\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\6\15\1\u0110\3\15\1\u0111"+
    "\2\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\1\15\1\u0112\5\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\7\15"+
    "\1\u0113\5\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\22\260\1\u0114\71\260\23\0\1\u0115\73\0"+
    "\1\u0116\1\0\2\u0116\1\0\1\u0117\2\u0118\2\0\4\u0119"+
    "\47\0\3\u0116\24\0\1\u0117\1\0\2\u0117\61\0\3\u0117"+
    "\23\0\1\u011a\1\0\1\u011b\157\0\1\u011c\3\0\1\u011d"+
    "\75\0\1\u011e\56\0\2\u011f\1\0\1\u011f\2\0\1\u011f"+
    "\1\0\2\u011f\1\0\1\u0120\4\u011f\1\0\1\u0121\2\0"+
    "\1\u0120\4\0\1\u011f\1\0\1\u011f\1\0\2\u011f\2\0"+
    "\15\u011f\4\0\1\u0120\7\0\1\u011f\4\0\1\u0122\4\u011f"+
    "\2\0\5\u011f\1\0\7\u0123\1\0\2\u0123\2\0\4\u0123"+
    "\11\0\3\u0123\1\0\2\u0123\2\0\15\u0123\11\0\4\u0123"+
    "\1\0\1\u0123\3\0\4\u0123\2\0\5\u0123\43\0\1\u0124"+
    "\62\0\1\u0125\144\0\1\u0126\124\0\1\u0127\113\0\1\u0128"+
    "\121\0\1\u0120\56\0\1\u0120\67\0\2\u0129\1\0\1\u0129"+
    "\2\0\1\u0129\1\0\2\u0129\2\0\4\u0129\1\0\1\u012a"+
    "\7\0\1\u0129\1\0\1\u0129\1\0\2\u0129\2\0\15\u0129"+
    "\14\0\1\u0129\4\0\1\u012b\4\u0129\2\0\5\u0129\14\0"+
    "\1\u012c\47\0\1\u012d\30\0\2\304\1\0\1\304\2\0"+
    "\1\304\1\0\2\304\2\0\4\304\11\0\1\304\1\0"+
    "\1\304\1\0\2\304\2\0\15\304\14\0\1\304\5\0"+
    "\4\304\2\0\5\304\12\0\1\u012e\144\0\1\u012f\116\0"+
    "\1\u0130\47\0\1\u0131\153\0\1\u0132\1\0\1\u0133\61\0"+
    "\1\u0134\5\0\1\u0135\75\0\1\u0136\114\0\1\u0137\1\0"+
    "\2\u0137\1\0\1\154\57\0\3\u0137\32\0\2\320\104\0"+
    "\1\322\1\0\2\322\1\0\1\317\2\320\2\321\53\0"+
    "\3\322\22\0\2\323\1\324\2\0\1\324\61\0\2\324"+
    "\25\0\1\u0138\1\0\3\u0138\1\0\2\u0138\2\0\4\u0138"+
    "\16\0\1\u0138\2\0\2\u0138\24\0\3\u0138\6\0\1\u0138"+
    "\1\0\1\u0138\20\0\1\313\16\0\1\163\113\0\1\163"+
    "\65\0\7\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\13\15\1\u0139\1\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\2\333\1\0\1\333\2\0\1\333\1\0\2\333\2\335"+
    "\4\333\1\336\10\335\1\333\1\0\1\333\1\0\2\333"+
    "\2\0\15\333\2\0\3\335\7\0\1\333\4\0\1\335"+
    "\4\333\2\0\5\333\1\0\2\166\1\332\1\0\3\332"+
    "\1\331\2\332\2\0\4\332\16\0\1\332\2\0\2\332"+
    "\24\0\3\332\6\0\1\332\1\0\1\332\11\0\7\333"+
    "\1\0\2\333\2\0\4\333\11\0\2\333\1\u013a\1\0"+
    "\2\333\2\0\15\333\11\0\4\333\1\0\1\333\3\0"+
    "\4\333\2\0\5\333\1\0\7\333\1\0\2\333\2\340"+
    "\4\333\11\0\2\333\1\u013a\1\0\2\333\2\0\15\333"+
    "\11\0\4\333\1\0\1\333\3\0\4\333\2\0\5\333"+
    "\13\0\2\335\5\0\10\335\27\0\3\335\14\0\1\335"+
    "\13\0\21\336\1\u013b\5\336\1\u013c\5\336\1\0\3\336"+
    "\1\0\32\336\3\0\15\336\3\0\1\337\1\0\2\337"+
    "\6\0\4\174\47\0\3\337\24\0\1\337\1\0\2\337"+
    "\61\0\3\337\22\0\7\15\1\0\1\15\1\u013d\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\15\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\7\15\1\0\1\15\1\u013e\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\15\15\11\0\4\15"+
    "\1\0\1\15\3\0\4\15\2\0\5\15\1\0\7\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\4\15\1\u013f\10\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\10\15\1\u0140\4\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\1\15\1\u0141\13\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\13\260\2\210\5\260\1\350\1\u0142"+
    "\6\210\27\260\3\210\14\260\1\210\13\260\13\0\2\23"+
    "\5\0\1\u0143\7\23\27\0\3\23\14\0\1\23\14\0"+
    "\7\353\1\0\2\353\2\0\4\353\11\0\2\353\1\354"+
    "\1\0\2\353\2\0\15\353\11\0\4\353\1\0\1\353"+
    "\3\0\4\353\2\0\5\353\1\0\7\353\1\0\2\353"+
    "\2\355\4\353\1\0\10\355\2\353\1\354\1\0\2\353"+
    "\2\0\15\353\2\0\3\355\4\0\4\353\1\0\1\353"+
    "\2\0\1\355\4\353\2\0\5\353\13\0\2\355\5\0"+
    "\10\355\27\0\3\355\14\0\1\355\16\0\1\u0144\2\0"+
    "\1\u0144\20\0\1\352\10\0\1\352\27\0\2\u0144\25\0"+
    "\1\u0145\1\0\3\u0146\1\0\2\u0146\2\0\4\u0146\6\0"+
    "\1\352\7\0\1\u0146\1\352\1\0\2\u0146\24\0\3\u0146"+
    "\6\0\1\u0146\1\0\1\u0146\10\0\41\361\1\u0147\52\361"+
    "\1\0\7\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\4\15\1\u0148\10\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\2\15\2\0\4\15\11\0\2\15\1\164"+
    "\1\0\2\15\2\0\1\u0149\14\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\1\15\1\u014a\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\15\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\2\15"+
    "\1\u014b\12\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\6\15\1\u014c"+
    "\6\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\4\15\1\u014d\10\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\7\15\1\0\1\15\1\u014e\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\15\15\11\0\4\15"+
    "\1\0\1\15\3\0\4\15\2\0\5\15\1\0\7\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\12\15\1\u014f\2\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\1\15\1\u0150\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\15\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\1\15\1\u0151\5\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\1\15\1\u0152\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\15\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\1\15\1\u0153\5\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\15\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\1\15\1\u0154\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\15\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\7\15\1\u0155\5\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\1\u0156\1\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\1\u0157\1\15\2\0\15\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\7\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\1\u0158\14\15\11\0\4\15"+
    "\1\0\1\15\3\0\4\15\2\0\5\15\1\0\1\15"+
    "\1\u0159\5\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\6\15\1\u015a\6\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\1\15\1\u015b\5\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\15\15\11\0\4\15"+
    "\1\0\1\15\3\0\4\15\2\0\5\15\1\0\1\15"+
    "\1\u015c\5\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\15\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\3\15\1\u015d\11\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\14\0\1\u015e\47\0\1\u015f"+
    "\30\0\2\u0109\1\0\1\u0109\2\0\1\u0109\1\0\2\u0109"+
    "\2\0\4\u0109\11\0\1\u0109\1\0\1\u0109\1\0\2\u0109"+
    "\2\0\15\u0109\14\0\1\u0109\5\0\4\u0109\2\0\5\u0109"+
    "\14\0\1\u0160\47\0\1\u0161\30\0\2\u010c\1\0\1\u010c"+
    "\2\0\1\u010c\1\0\2\u010c\2\0\4\u010c\11\0\1\u010c"+
    "\1\0\1\u010c\1\0\2\u010c\2\0\15\u010c\14\0\1\u010c"+
    "\5\0\4\u010c\2\0\5\u010c\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\15\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\3\15\1\u0162\1\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\2\15"+
    "\1\u0163\12\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\15\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\2\15\1\u0164"+
    "\2\15\22\260\1\u0114\1\u0165\70\260\22\0\1\u0166\74\0"+
    "\1\u0117\1\0\2\u0117\2\0\2\u0118\2\0\4\u0119\47\0"+
    "\3\u0117\24\0\1\u0167\1\0\2\u0167\4\0\2\u0168\53\0"+
    "\3\u0167\67\0\1\u0169\111\0\1\u016a\120\0\1\u016b\111\0"+
    "\1\u016c\134\0\1\u016d\37\0\1\u016e\47\0\1\u016f\30\0"+
    "\2\u011f\1\0\1\u011f\2\0\1\u011f\1\0\2\u011f\2\0"+
    "\4\u011f\11\0\1\u011f\1\0\1\u011f\1\0\2\u011f\2\0"+
    "\15\u011f\14\0\1\u011f\5\0\4\u011f\2\0\5\u011f\44\0"+
    "\1\u0170\1\0\1\u0171\140\0\1\u0172\64\0\1\u0170\61\0"+
    "\1\u0173\145\0\1\u0174\63\0\1\u0175\47\0\1\u0176\30\0"+
    "\2\u0129\1\0\1\u0129\2\0\1\u0129\1\0\2\u0129\2\0"+
    "\4\u0129\11\0\1\u0129\1\0\1\u0129\1\0\2\u0129\2\0"+
    "\15\u0129\14\0\1\u0129\5\0\4\u0129\2\0\5\u0129\14\0"+
    "\1\304\200\0\1\u0177\116\0\1\u0178\11\0\1\u0179\113\0"+
    "\1\u017a\40\0\1\u017b\62\0\1\u017c\145\0\1\u017d\123\0"+
    "\1\u017e\110\0\1\u017f\111\0\1\u0180\46\0\1\u0181\114\0"+
    "\1\u0137\1\0\2\u0137\1\0\1\317\57\0\3\u0137\22\0"+
    "\2\323\1\u0138\1\0\3\u0138\1\0\2\u0138\2\0\4\u0138"+
    "\16\0\1\u0138\2\0\2\u0138\24\0\3\u0138\6\0\1\u0138"+
    "\1\0\1\u0138\11\0\7\333\1\0\2\333\2\335\4\333"+
    "\1\0\10\335\2\333\1\u013a\1\0\2\333\2\0\15\333"+
    "\2\0\3\335\4\0\4\333\1\0\1\333\2\0\1\335"+
    "\4\333\2\0\5\333\21\336\1\u0182\5\336\1\u013c\5\336"+
    "\1\0\36\336\1\0\17\336\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\5\15\1\u0183\7\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\1\15\1\u0184"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\15\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\6\15\1\u0185\6\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\1\15\1\u0186\5\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\15\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\13\u0166"+
    "\2\u0143\5\u0166\3\u0143\1\u0187\4\u0143\27\u0166\3\u0143\14\u0166"+
    "\1\u0143\13\u0166\3\0\1\216\2\0\1\216\20\0\1\352"+
    "\10\0\1\352\27\0\2\216\25\0\1\u0188\1\0\3\u0189"+
    "\1\0\2\u0189\2\0\4\u0189\16\0\1\u0189\2\0\2\u0189"+
    "\24\0\3\u0189\6\0\1\u0189\1\0\1\u0189\13\0\1\u0189"+
    "\1\0\3\u0189\1\0\2\u0189\2\0\4\u0189\16\0\1\u0189"+
    "\2\0\2\u0189\24\0\3\u0189\6\0\1\u0189\1\0\1\u0189"+
    "\10\0\41\361\1\u018a\52\361\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\4\15\1\u018b\10\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\3\15"+
    "\1\u018c\11\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\u018d\2\15\2\0\15\15\11\0"+
    "\4\15\1\u018d\1\u018e\2\u018d\1\0\4\15\2\0\5\15"+
    "\1\0\7\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\7\15\1\u018f\5\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\2\15\2\0\4\15\11\0\2\15\1\164"+
    "\1\0\2\15\2\0\14\15\1\u0190\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\2\15\1\u0191\12\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\1\15"+
    "\1\u0192\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\7\15\1\u0193"+
    "\5\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\1\u0194\14\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\2\15\2\0\4\15\11\0\2\15\1\164"+
    "\1\0\2\15\2\0\7\15\1\u0195\5\15\11\0\4\15"+
    "\1\0\1\15\3\0\4\15\2\0\5\15\1\0\7\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\7\15\1\u0196\5\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\12\15\1\u0197\2\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\3\15\1\u0198\11\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\12\15"+
    "\1\u0199\2\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\7\15\1\u019a"+
    "\5\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\3\15\1\u019b"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\15\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\1\15\1\u019c\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\15\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\14\0\1\u0109\200\0"+
    "\1\u019d\26\0\1\u010c\200\0\1\u019e\13\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\1\15\1\u019f\13\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\1\15"+
    "\1\u01a0\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\1\15\1\u01a1"+
    "\13\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\25\u0166\1\u01a2\66\u0166\3\0\1\u0167\1\0\2\u0167"+
    "\6\0\4\u0119\47\0\3\u0167\24\0\1\u0167\1\0\2\u0167"+
    "\61\0\3\u0167\33\0\1\u01a3\113\0\1\u01a4\153\0\1\u01a5"+
    "\104\0\1\u01a6\141\0\1\u01a7\36\0\1\u011f\200\0\1\u01a8"+
    "\54\0\1\u01a9\63\0\1\u01aa\137\0\1\u01ab\57\0\1\u01ac"+
    "\156\0\1\u01a3\62\0\1\u0129\200\0\1\u01ad\31\0\1\u01ae"+
    "\177\0\1\u01af\52\0\1\u01b0\63\0\1\313\143\0\1\313"+
    "\125\0\1\u01b1\102\0\1\u01b2\126\0\1\313\111\0\1\u01b3"+
    "\51\0\1\u01b4\144\0\1\u01b5\51\0\7\15\1\0\2\15"+
    "\2\0\3\15\1\u01b6\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\11\15\1\u01b7"+
    "\3\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\1\15\1\u01b8\5\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\15\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\13\u0166\2\u0143\5\u0166\3\u0143\1\u01b9\4\u0143\27\u0166\3\u0143"+
    "\14\u0166\1\u0143\13\u0166\3\0\1\u01ba\1\0\3\u01bb\1\0"+
    "\2\u01bb\2\0\4\u01bb\16\0\1\u01bb\2\0\2\u01bb\24\0"+
    "\3\u01bb\6\0\1\u01bb\1\0\1\u01bb\13\0\1\u01bb\1\0"+
    "\3\u01bb\1\0\2\u01bb\2\0\4\u01bb\16\0\1\u01bb\2\0"+
    "\2\u01bb\24\0\3\u01bb\6\0\1\u01bb\1\0\1\u01bb\10\0"+
    "\41\361\1\u01bc\52\361\35\0\1\u018d\4\0\1\u01bd\5\0"+
    "\1\u01be\23\0\4\u018d\15\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\u018d\2\15\2\0\1\u01bf"+
    "\5\15\1\u01c0\6\15\11\0\4\15\1\u018d\1\u018e\2\u018d"+
    "\1\0\4\15\2\0\5\15\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\1\15\1\u01c1\13\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\3\15\1\u01c2\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\15\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\2\15\1\u01c3\12\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\7\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\12\15\1\u01c4\2\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\2\15\2\0\4\15\11\0\2\15\1\164"+
    "\1\0\2\15\2\0\5\15\1\u01c5\7\15\11\0\4\15"+
    "\1\0\1\15\3\0\4\15\2\0\5\15\1\0\7\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\7\15\1\u01c6\5\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\1\u01c7\14\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\2\15"+
    "\1\u01c8\12\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\17\0\1\u01c9\113\0\1\u01ca\75\0\7\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\15\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\4\15\1\u01cb\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\1\u01cc\14\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\2\15\1\u01cd"+
    "\12\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\25\u0166\1\u01ce\66\u0166\47\0\1\u01cf\114\0\1\u01d0"+
    "\45\0\1\u01d1\130\0\1\u01d2\52\0\1\u01d3\40\0\1\u01d4"+
    "\141\0\1\u01d5\47\0\7\u0123\1\0\2\u0123\2\0\4\u0123"+
    "\11\0\3\u0123\1\u01d6\2\u0123\2\0\15\u0123\11\0\4\u0123"+
    "\1\u01d6\1\u01d7\2\u01d6\1\0\4\u0123\2\0\5\u0123\54\0"+
    "\1\u01d8\57\0\1\u01d5\112\0\1\u01d9\133\0\1\u01da\124\0"+
    "\1\u01b0\100\0\1\u01db\36\0\4\u01db\71\0\1\313\100\0"+
    "\1\313\10\0\1\313\76\0\1\u01dc\121\0\1\u01dd\116\0"+
    "\1\u01de\45\0\7\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\4\15\1\u01df\10\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\1\0\7\15\1\0\1\15\1\u01e0\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\15\15\11\0\4\15"+
    "\1\0\1\15\3\0\4\15\2\0\5\15\1\0\7\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\13\15\1\u01e1\1\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\13\u0166\2\u0143\5\u0166"+
    "\1\u01e2\2\u0143\1\u01b9\4\u0143\27\u0166\3\u0143\14\u0166\1\u0143"+
    "\13\u0166\3\0\1\216\1\0\3\216\1\0\2\216\2\0"+
    "\4\216\16\0\1\u01e3\2\0\2\216\24\0\3\216\6\0"+
    "\1\216\1\0\1\216\13\0\1\216\1\0\3\216\1\0"+
    "\2\216\2\0\4\216\16\0\1\216\2\0\2\216\24\0"+
    "\3\216\6\0\1\216\1\0\1\216\51\0\1\u01bc\54\0"+
    "\1\u01e4\214\0\1\u01e5\11\0\1\15\1\u01e6\5\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\15\15\11\0"+
    "\4\15\1\0\1\15\3\0\2\15\1\u01e7\1\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\1\u01e8\14\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\2\15\2\0\3\15\1\u01e9\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\15\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\1\15\1\u01ea\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\15\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\12\15"+
    "\1\u01eb\2\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\37\0\1\u01ec\113\0\1\u01ed\55\0\7\15"+
    "\1\0\1\15\1\u01ee\2\0\4\15\11\0\2\15\1\164"+
    "\1\0\2\15\2\0\15\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\2\15"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\2\15\1\u01ef\12\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\1\0\7\15\1\0\1\15\1\u01f0"+
    "\2\0\4\15\11\0\2\15\1\164\1\0\2\15\2\0"+
    "\15\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\22\u0166\1\u01f1\2\u0166\1\u01ce\66\u0166\20\0\1\u01f2"+
    "\146\0\1\u01f3\42\0\1\u01f4\201\0\1\u01f5\26\0\1\u01f5"+
    "\147\0\1\u01f6\111\0\1\u01d6\4\0\1\u01f7\5\0\1\u01f8"+
    "\23\0\4\u01d6\65\0\1\u01f9\101\0\1\u01fa\156\0\1\u01fb"+
    "\23\0\1\u01fc\22\0\1\u01db\36\0\4\u01db\107\0\1\u01fd"+
    "\24\0\1\u017a\163\0\1\u01fe\37\0\13\u0166\2\u0143\5\u0166"+
    "\1\u0143\1\u01ff\1\u0143\1\u0187\4\u0143\27\u0166\3\u0143\14\u0166"+
    "\1\u0143\13\u0166\40\0\1\352\116\0\1\u0200\154\0\1\u0201"+
    "\10\0\7\15\1\0\2\15\2\0\4\15\11\0\2\15"+
    "\1\164\1\0\2\15\2\0\1\15\1\u0202\13\15\11\0"+
    "\4\15\1\0\1\15\3\0\4\15\2\0\5\15\1\0"+
    "\7\15\1\0\2\15\2\0\4\15\11\0\2\15\1\164"+
    "\1\0\2\15\2\0\15\15\11\0\4\15\1\0\1\15"+
    "\3\0\3\15\1\u0203\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\2\15\1\u0204\12\15\11\0\4\15\1\0\1\15"+
    "\3\0\4\15\2\0\5\15\1\0\7\15\1\0\1\15"+
    "\1\u0205\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\2\15\2\0\4\15"+
    "\11\0\2\15\1\164\1\0\2\15\2\0\4\15\1\u0206"+
    "\10\15\11\0\4\15\1\0\1\15\3\0\4\15\2\0"+
    "\5\15\1\0\7\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\2\15\1\u0207\12\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\102\0\1\u0208\113\0\1\u0209\12\0\7\15\1\0\1\15"+
    "\1\u020a\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\23\u0166\1\u020b\1\u0166\1\u01a2\66\u0166\46\0"+
    "\1\u020c\57\0\1\u020d\156\0\1\u020c\140\0\1\u020e\13\0"+
    "\1\u020f\214\0\1\u0210\22\0\1\u0211\203\0\1\u0212\50\0"+
    "\1\u0213\122\0\1\u0214\57\0\1\u0215\117\0\1\313\143\0"+
    "\1\u0216\57\0\1\u0217\102\0\7\15\1\0\2\15\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\4\15"+
    "\1\u0218\10\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\1\0\7\15\1\0\1\15\1\u0219\2\0"+
    "\4\15\11\0\2\15\1\164\1\0\2\15\2\0\15\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\37\0\1\u021a\113\0\1\u021b\55\0\7\15\1\0\2\15"+
    "\2\0\3\15\1\u021c\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\15\15\11\0\4\15\1\0\1\15\3\0\4\15"+
    "\2\0\5\15\37\0\1\u021d\117\0\1\u021e\154\0\1\u021f"+
    "\55\0\1\u0220\104\0\1\u0221\140\0\1\304\72\0\1\u017b"+
    "\121\0\1\313\110\0\1\u0222\107\0\1\u0223\52\0\7\15"+
    "\1\0\2\15\2\0\4\15\11\0\2\15\1\164\1\0"+
    "\2\15\2\0\4\15\1\u0224\10\15\11\0\4\15\1\0"+
    "\1\15\3\0\4\15\2\0\5\15\1\0\7\15\1\0"+
    "\2\15\2\0\4\15\11\0\2\15\1\164\1\0\2\15"+
    "\2\0\1\u0225\14\15\11\0\4\15\1\0\1\15\3\0"+
    "\4\15\2\0\5\15\64\0\1\u0109\113\0\1\u010c\113\0"+
    "\1\u011f\75\0\1\u0226\57\0\1\u0227\165\0\1\u0129\73\0"+
    "\1\u0222\50\0\7\15\1\0\2\15\2\0\4\15\11\0"+
    "\2\15\1\164\1\0\2\15\2\0\2\15\1\u0224\12\15"+
    "\11\0\4\15\1\0\1\15\3\0\4\15\2\0\5\15"+
    "\46\0\1\u0228\107\0\1\u0229\115\0\1\u0228\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\36\1\2\11\2\1\5\11\5\1\4\11"+
    "\42\1\1\11\5\1\1\11\2\1\6\0\2\1\4\0"+
    "\4\1\2\0\1\1\1\0\1\11\10\1\1\0\1\11"+
    "\1\0\6\1\1\0\4\1\1\0\26\1\2\0\4\1"+
    "\2\0\1\11\4\1\1\11\13\1\1\0\1\11\6\0"+
    "\1\11\3\0\1\1\2\0\1\1\1\11\1\1\3\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\0\11\1\1\11"+
    "\3\1\2\0\1\11\1\0\27\1\1\11\2\0\1\11"+
    "\2\0\5\1\3\0\1\1\1\0\1\11\5\0\2\11"+
    "\2\0\1\11\5\0\1\11\15\0\4\1\1\11\1\0"+
    "\7\1\4\0\26\1\4\0\4\1\1\0\1\1\32\0"+
    "\6\1\3\0\2\1\1\0\17\1\2\0\3\1\1\0"+
    "\1\1\6\0\1\1\13\0\4\1\2\0\1\1\2\0"+
    "\12\1\2\0\3\1\7\0\1\1\1\0\1\1\7\0"+
    "\4\1\3\0\6\1\2\0\3\1\4\0\1\11\11\0"+
    "\1\1\2\0\6\1\2\0\3\1\1\11\12\0\2\1"+
    "\2\0\1\1\5\0\1\11\1\0\2\1\2\0\1\11"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[553];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Stack for braces
    private Stack <IElementType> braceStack = new Stack<IElementType>();

    /* Defines, is in this section new line is whitespace or not? */
    public boolean newLineAllowed(){
      if (braceStack.isEmpty()){
        return true;
      } else {
        return ScalaTokenTypes.tLBRACE.equals(braceStack.peek());
      }
    }

    /* Changes state depending on brace stack */
    private void changeState(){
      if (braceStack.isEmpty()) {
        yybegin(YYINITIAL);
      } else if ( tLPARENTHESIS.equals(braceStack.peek()) || tLSQBRACKET.equals(braceStack.peek()) ){
        yybegin(NEW_LINE_DEPRECATED);
      } else {
        yybegin(COMMON_STATE);
      }
    }

    /* removes brace from stack */
    private IElementType popBraceStack(IElementType elem){
     if (
          !braceStack.isEmpty() &&
          (
            (elem.equals(tRSQBRACKET) && tLSQBRACKET.equals(braceStack.peek())) ||
            (elem.equals(tRBRACE) && tLBRACE.equals(braceStack.peek())) ||
            (elem.equals(tRPARENTHESIS) && tLPARENTHESIS.equals(braceStack.peek()))
          )
        ) {
          braceStack.pop();
          return process(elem);
        } else if (elem.equals(tFUNTYPE)) {
          if (!braceStack.isEmpty() && kCASE.equals(braceStack.peek())) {
            braceStack.pop();
          }
          return process(elem);
        } else {
          return process(elem);
        }
    }

    private IElementType process(IElementType type){
        return type;
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 73: 
          { return process(kTRAIT);
          }
        case 100: break;
        case 71: 
          { return process(kCATCH);
          }
        case 101: break;
        case 43: 
          { changeState();
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 102: break;
        case 35: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSYMBOL);
          }
        case 103: break;
        case 97: 
          { return process(kPROTECTED);
          }
        case 104: break;
        case 39: 
          { return process(tLOWER_BOUND);
          }
        case 105: break;
        case 31: 
          { return process(tLINE_COMMENT);
          }
        case 106: break;
        case 61: 
          { return process(tSH_COMMENT);
          }
        case 107: break;
        case 6: 
          { return process(tCOLON);
          }
        case 108: break;
        case 86: 
          { return process(kEXTENDS);
          }
        case 109: break;
        case 53: 
          { return process(kVAR);
          }
        case 110: break;
        case 2: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tIDENTIFIER);
          }
        case 111: break;
        case 25: 
          { yypushback(yylength());
                                                    changeState();
          }
        case 112: break;
        case 12: 
          { return process(tSEMICOLON);
          }
        case 113: break;
        case 58: 
          { yybegin(WAIT_FOR_XML);
                                                   yypushback(2);
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 114: break;
        case 15: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRPARENTHESIS);
          }
        case 115: break;
        case 82: 
          { return process(kOBJECT);
          }
        case 116: break;
        case 24: 
          { yybegin(WAIT_FOR_XML); return process(tLINE_TERMINATOR);
          }
        case 117: break;
        case 40: 
          { return popBraceStack(tFUNTYPE);
          }
        case 118: break;
        case 1: 
          { return process(tSTUB);
          }
        case 119: break;
        case 67: 
          { return process(kWITH);
          }
        case 120: break;
        case 33: 
          { return process(tUPPER_BOUND);
          }
        case 121: break;
        case 4: 
          { return process(tDOT);
          }
        case 122: break;
        case 80: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tMULTILINE_STRING);
          }
        case 123: break;
        case 75: 
          { return process(kMATCH);
          }
        case 124: break;
        case 11: 
          { return process(tCOMMA);
          }
        case 125: break;
        case 20: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRPARENTHESIS);
          }
        case 126: break;
        case 22: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRBRACE);
          }
        case 127: break;
        case 41: 
          { yypushback(1);
                                                    changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 128: break;
        case 96: 
          // lookahead expression with fixed lookahead length
          yypushback(7);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 129: break;
        case 91: 
          // lookahead expression with fixed lookahead length
          yypushback(6);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 130: break;
        case 85: 
          // lookahead expression with fixed lookahead length
          yypushback(5);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 131: break;
        case 78: 
          // lookahead expression with fixed lookahead length
          yypushback(4);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 132: break;
        case 72: 
          { return process(kTHROW);
          }
        case 133: break;
        case 42: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 134: break;
        case 56: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 135: break;
        case 52: 
          { return process(kVAL);
          }
        case 136: break;
        case 90: 
          { return process(kPRIVATE);
          }
        case 137: break;
        case 68: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kFALSE);
          }
        case 138: break;
        case 88: 
          { return process(kFINALLY);
          }
        case 139: break;
        case 87: 
          { return process(kFOR_SOME);
          }
        case 140: break;
        case 65: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTYPE);
          }
        case 141: break;
        case 27: 
          { return process(tWHITE_SPACE_IN_LINE);
          }
        case 142: break;
        case 28: 
          { changeState();
                                            yypushback(yytext().length());
          }
        case 143: break;
        case 81: 
          { return process(kSEALED);
          }
        case 144: break;
        case 70: 
          { return process(kCLASS);
          }
        case 145: break;
        case 83: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kRETURN);
          }
        case 146: break;
        case 93: 
          { return process(kOVERRIDE);
          }
        case 147: break;
        case 89: 
          { return process(kPACKAGE);
          }
        case 148: break;
        case 51: 
          { braceStack.push(tLPARENTHESIS);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLPARENTHESIS);
          }
        case 149: break;
        case 30: 
          { return process(kDO);
          }
        case 150: break;
        case 26: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 151: break;
        case 45: 
          { return process(kFOR);
          }
        case 152: break;
        case 36: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSTRING);
          }
        case 153: break;
        case 17: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRBRACE);
          }
        case 154: break;
        case 32: 
          { return process(tCHOOSE);
          }
        case 155: break;
        case 16: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRSQBRACKET);
          }
        case 156: break;
        case 76: 
          { return process(kYIELD);
          }
        case 157: break;
        case 7: 
          { return process(tAT);
          }
        case 158: break;
        case 47: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tCHAR);
          }
        case 159: break;
        case 8: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tUNDER);
          }
        case 160: break;
        case 49: 
          { return process(kNEW);
          }
        case 161: break;
        case 94: 
          { return process(kREQUIRES);
          }
        case 162: break;
        case 14: 
          { braceStack.push(tLSQBRACKET);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLSQBRACKET);
          }
        case 163: break;
        case 23: 
          { yypushback(1);  yybegin(YYINITIAL);
          }
        case 164: break;
        case 3: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tINTEGER);
          }
        case 165: break;
        case 44: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 10;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tINTEGER);
          }
        case 166: break;
        case 34: 
          { return process(tVIEW);
          }
        case 167: break;
        case 29: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tFLOAT);
          }
        case 168: break;
        case 95: 
          { return process(kIMPLICIT);
          }
        case 169: break;
        case 19: 
          { braceStack.push(tLPARENTHESIS);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLPARENTHESIS);
          }
        case 170: break;
        case 69: 
          { return process(kFINAL);
          }
        case 171: break;
        case 48: 
          { return process(kTRY);
          }
        case 172: break;
        case 5: 
          { return process(tINNER_CLASS);
          }
        case 173: break;
        case 59: 
          { return process(kLAZY);
          }
        case 174: break;
        case 74: 
          { return process(kSUPER);
          }
        case 175: break;
        case 98: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return process(kCASE);
          }
        case 176: break;
        case 99: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 177: break;
        case 10: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tWRONG_STRING);
          }
        case 178: break;
        case 54: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 179: break;
        case 57: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 7;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 180: break;
        case 79: 
          { yypushback(4);
                                                   changeState();
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 181: break;
        case 13: 
          { return process(tASSIGN);
          }
        case 182: break;
        case 64: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTRUE);
          }
        case 183: break;
        case 84: 
          { return process(kIMPORT);
          }
        case 184: break;
        case 18: 
          { braceStack.push(tLBRACE);
                                            return process(tLBRACE);
          }
        case 185: break;
        case 92: 
          { return process(kABSTRACT);
          }
        case 186: break;
        case 50: 
          { braceStack.push(tLBRACE);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLBRACE);
          }
        case 187: break;
        case 37: 
          { return process(kIF);
          }
        case 188: break;
        case 62: 
          { braceStack.push(kCASE);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(kCASE);
          }
        case 189: break;
        case 63: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTHIS);
          }
        case 190: break;
        case 9: 
          { yybegin(WAIT_FOR_XML);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 191: break;
        case 21: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRSQBRACKET);
          }
        case 192: break;
        case 66: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kNULL);
          }
        case 193: break;
        case 38: 
          { return process(tFUNTYPE);
          }
        case 194: break;
        case 77: 
          { return process(kWHILE);
          }
        case 195: break;
        case 46: 
          { return process(kDEF);
          }
        case 196: break;
        case 55: 
          { yybegin(WAIT_FOR_XML);
                                                    yypushback(2);
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 197: break;
        case 60: 
          { return process(kELSE);
          }
        case 198: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
