/* The following code was generated by JFlex 1.4.3 on 3/11/12 1:35 PM */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/11/12 1:35 PM from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMMON_STATE = 2;
  public static final int YYINITIAL = 0;
  public static final int WAIT_FOR_XML = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\33\1\44\1\35\1\0\1\44\1\35\16\33\4\0\1\44\1\22"+
    "\1\41\1\23\1\32\1\112\1\24\1\40\1\55\1\56\1\24\1\13"+
    "\1\114\1\14\1\10\1\30\1\3\1\106\1\105\5\6\1\5\1\110"+
    "\1\25\1\113\1\45\1\104\1\31\1\46\1\26\1\37\1\7\1\50"+
    "\1\17\1\11\1\15\5\32\1\1\6\32\1\73\1\51\6\32\1\47"+
    "\1\27\1\52\1\24\1\34\1\21\1\57\1\60\1\64\1\20\1\12"+
    "\1\16\1\102\1\67\1\71\1\66\1\101\1\2\1\74\1\70\1\65"+
    "\1\75\1\103\1\63\1\61\1\62\1\36\1\100\1\77\1\4\1\72"+
    "\1\76\1\53\1\24\1\54\1\24\6\33\1\42\32\33\2\0\4\32"+
    "\2\24\1\0\1\24\1\32\1\0\1\24\1\33\1\24\1\0\1\24"+
    "\1\24\3\0\1\32\1\24\3\0\1\32\5\0\27\32\1\24\37\32"+
    "\1\24\u013f\32\31\0\162\32\4\0\14\32\16\0\5\32\11\0\1\32"+
    "\21\0\130\33\5\0\23\33\12\0\1\32\13\0\1\32\1\0\3\32"+
    "\1\0\1\32\1\0\24\32\1\0\54\32\1\0\46\32\1\24\5\32"+
    "\4\0\202\32\1\24\4\33\3\0\105\32\1\0\46\32\2\0\2\32"+
    "\6\0\20\32\41\0\46\32\2\0\1\32\7\0\47\32\11\0\21\33"+
    "\1\0\27\33\1\0\3\33\1\0\1\33\1\0\2\33\1\0\1\33"+
    "\13\0\33\32\5\0\3\32\15\0\4\33\12\0\2\24\6\33\13\0"+
    "\32\32\5\0\13\32\16\33\7\0\12\33\4\0\2\32\1\33\143\32"+
    "\1\0\1\32\10\33\1\0\6\33\2\32\2\33\1\24\4\33\2\32"+
    "\12\33\3\32\2\24\1\32\17\0\1\33\1\32\1\33\36\32\33\33"+
    "\2\0\3\32\60\0\46\32\13\33\1\32\u014f\0\3\33\66\32\2\0"+
    "\1\33\1\32\20\33\2\0\1\32\4\33\3\0\12\32\2\33\2\0"+
    "\12\33\21\0\3\33\1\0\10\32\2\0\2\32\2\0\26\32\1\0"+
    "\7\32\1\0\1\32\3\0\4\32\2\0\1\33\1\32\7\33\2\0"+
    "\2\33\2\0\3\33\11\0\1\33\4\0\2\32\1\0\3\32\2\33"+
    "\2\0\12\33\4\32\6\0\1\24\6\0\3\33\1\0\6\32\4\0"+
    "\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0\2\32\1\0"+
    "\2\32\2\0\1\33\1\0\5\33\4\0\2\33\2\0\3\33\13\0"+
    "\4\32\1\0\1\32\7\0\14\33\3\32\14\0\3\33\1\0\11\32"+
    "\1\0\3\32\1\0\26\32\1\0\7\32\1\0\2\32\1\0\5\32"+
    "\2\0\1\33\1\32\10\33\1\0\3\33\1\0\3\33\2\0\1\32"+
    "\17\0\2\32\2\33\2\0\12\33\1\0\1\32\17\0\3\33\1\0"+
    "\10\32\2\0\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0"+
    "\5\32\2\0\1\33\1\32\6\33\3\0\2\33\2\0\3\33\10\0"+
    "\2\33\4\0\2\32\1\0\3\32\4\0\12\33\1\24\1\32\20\0"+
    "\1\33\1\32\1\0\6\32\3\0\3\32\1\0\4\32\3\0\2\32"+
    "\1\0\1\32\1\0\2\32\3\0\2\32\3\0\3\32\3\0\10\32"+
    "\1\0\3\32\4\0\5\33\3\0\3\33\1\0\4\33\11\0\1\33"+
    "\17\0\11\33\3\0\6\24\1\32\1\24\6\0\3\33\1\0\10\32"+
    "\1\0\3\32\1\0\27\32\1\0\12\32\1\0\5\32\4\0\7\33"+
    "\1\0\3\33\1\0\4\33\7\0\2\33\11\0\2\32\4\0\12\33"+
    "\22\0\2\33\1\0\10\32\1\0\3\32\1\0\27\32\1\0\12\32"+
    "\1\0\5\32\2\0\1\33\1\32\7\33\1\0\3\33\1\0\4\33"+
    "\7\0\2\33\7\0\1\32\1\0\2\32\4\0\12\33\22\0\2\33"+
    "\1\0\10\32\1\0\3\32\1\0\27\32\1\0\20\32\4\0\6\33"+
    "\2\0\3\33\1\0\4\33\11\0\1\33\10\0\2\32\4\0\12\33"+
    "\22\0\2\33\1\0\22\32\3\0\30\32\1\0\11\32\1\0\1\32"+
    "\2\0\7\32\3\0\1\33\4\0\6\33\1\0\1\33\1\0\10\33"+
    "\22\0\2\33\15\0\60\32\1\33\2\32\7\33\4\0\10\32\10\33"+
    "\1\0\12\33\47\0\2\32\1\0\1\32\2\0\2\32\1\0\1\32"+
    "\2\0\1\32\6\0\4\32\1\0\7\32\1\0\3\32\1\0\1\32"+
    "\1\0\1\32\2\0\2\32\1\0\4\32\1\33\2\32\6\33\1\0"+
    "\2\33\1\32\2\0\5\32\1\0\1\32\1\0\6\33\2\0\12\33"+
    "\2\0\2\32\42\0\1\32\3\24\17\0\5\24\2\33\6\24\12\33"+
    "\12\0\1\24\1\33\1\24\1\33\1\24\1\33\4\0\2\33\10\32"+
    "\1\0\42\32\6\0\24\33\1\0\2\33\4\32\4\0\10\33\1\0"+
    "\44\33\1\0\10\24\1\33\6\24\2\0\1\24\60\0\42\32\1\0"+
    "\5\32\1\0\2\32\1\0\7\33\3\0\4\33\6\0\12\33\6\0"+
    "\6\32\4\33\106\0\46\32\12\0\51\32\7\0\132\32\5\0\104\32"+
    "\5\0\122\32\6\0\7\32\1\0\77\32\1\0\1\32\1\0\4\32"+
    "\2\0\7\32\1\0\1\32\1\0\4\32\2\0\47\32\1\0\1\32"+
    "\1\0\4\32\2\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32"+
    "\1\0\1\32\1\0\4\32\2\0\7\32\1\0\7\32\1\0\27\32"+
    "\1\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32\1\0\47\32"+
    "\1\0\23\32\16\0\11\33\56\0\125\32\14\0\u026c\32\2\0\10\32"+
    "\12\0\32\32\5\0\113\32\3\0\3\32\17\0\15\32\1\0\4\32"+
    "\3\33\13\0\22\32\3\33\13\0\22\32\2\33\14\0\15\32\1\0"+
    "\3\32\1\0\2\33\14\0\64\32\40\33\3\0\1\32\3\0\2\32"+
    "\1\33\2\0\12\33\41\0\3\33\2\0\12\33\6\0\130\32\10\0"+
    "\51\32\1\33\126\0\35\32\3\0\14\33\4\0\14\33\4\0\1\24"+
    "\5\0\12\33\36\32\2\0\5\32\153\0\40\24\u0300\0\154\32\224\0"+
    "\234\32\4\0\132\32\6\0\26\32\2\0\6\32\2\0\46\32\2\0"+
    "\6\32\2\0\10\32\1\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\37\32\2\0\65\32\1\0\7\32\1\0\1\32\3\0\3\32\1\0"+
    "\7\32\3\0\4\32\2\0\6\32\4\0\15\32\5\0\3\32\1\0"+
    "\7\32\17\0\4\33\30\0\1\43\1\43\5\33\20\0\2\32\3\0"+
    "\1\24\15\0\1\24\1\0\1\32\13\0\4\33\6\0\6\33\1\0"+
    "\1\32\10\0\3\24\2\0\1\32\12\0\3\24\23\0\22\32\36\0"+
    "\15\33\4\0\1\33\3\0\6\33\25\0\2\24\1\32\4\24\1\32"+
    "\2\24\12\32\1\24\1\32\3\24\5\32\6\24\1\32\1\24\1\32"+
    "\1\24\1\32\1\24\4\32\1\24\3\32\1\24\7\32\2\24\1\0"+
    "\3\32\5\24\5\32\1\24\1\24\24\0\44\32\14\0\1\111\4\24"+
    "\5\24\2\24\4\24\1\24\2\24\1\24\2\24\1\24\7\24\1\24"+
    "\37\24\2\24\2\24\1\107\1\24\1\24\37\24\u010c\24\10\24\4\24"+
    "\24\24\2\24\7\24\2\0\121\24\1\24\36\24\31\24\3\0\32\24"+
    "\57\0\47\24\31\0\13\24\121\0\116\24\26\0\267\24\1\24\11\24"+
    "\1\24\66\24\10\24\30\24\1\0\126\24\1\24\16\24\2\0\22\24"+
    "\16\0\2\24\137\0\4\24\1\0\4\24\2\0\34\24\1\0\43\24"+
    "\1\0\1\24\1\0\4\24\3\0\1\24\1\0\7\24\2\0\7\24"+
    "\54\0\1\24\3\0\30\24\1\0\16\24\21\0\26\24\12\0\20\24"+
    "\u0100\24\203\24\26\0\77\24\4\0\40\24\2\0\u0102\24\16\24\u0372\0"+
    "\32\24\1\0\131\24\14\0\326\24\32\0\14\24\10\0\1\24\3\32"+
    "\12\0\2\24\14\0\1\24\11\32\6\33\1\0\5\32\2\24\5\32"+
    "\1\0\2\24\1\0\126\32\2\0\2\33\2\0\3\32\1\0\137\32"+
    "\5\0\50\32\4\0\136\32\1\0\2\24\4\0\12\24\30\32\70\0"+
    "\20\32\37\24\13\0\32\24\14\0\1\24\17\0\36\24\1\0\1\24"+
    "\12\0\47\24\17\0\77\24\1\0\u0100\24\u19b6\32\12\0\100\24\u51a6\32"+
    "\132\0\u048d\32\3\0\67\24\u0739\0\u2ba4\32\u215c\0\u012e\32\2\0\73\32"+
    "\225\0\7\32\14\0\5\32\5\0\1\32\1\33\12\32\1\24\15\32"+
    "\1\0\5\32\1\0\1\32\1\0\2\32\1\0\2\32\1\0\154\32"+
    "\41\0\u016b\32\22\0\100\32\2\0\66\32\50\0\15\32\1\24\2\0"+
    "\20\33\20\0\4\33\17\0\2\32\30\0\3\32\22\0\1\24\1\0"+
    "\3\24\2\0\1\32\6\0\5\32\1\0\207\32\2\0\1\33\4\0"+
    "\1\32\6\0\1\24\4\0\12\33\2\0\3\24\2\0\32\32\4\0"+
    "\1\32\1\0\32\32\1\0\1\24\1\0\1\24\6\0\132\32\3\0"+
    "\6\32\2\0\6\32\2\0\6\32\2\0\3\32\3\0\2\32\1\24"+
    "\1\0\1\24\2\32\1\0\1\24\4\24\2\24\12\0\3\33\2\24"+
    "\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\2\3\1\4\4\2\1\1\1\5"+
    "\1\6\1\7\3\2\1\10\1\11\1\1\1\12\1\11"+
    "\1\2\1\13\1\14\1\15\1\16\1\17\1\20\15\2"+
    "\1\21\1\22\1\23\1\24\1\25\1\2\2\26\6\0"+
    "\2\2\2\3\2\0\1\27\1\0\2\27\6\2\1\30"+
    "\1\0\1\2\1\0\2\2\1\0\1\31\1\32\1\0"+
    "\3\33\1\12\1\0\1\34\1\35\1\2\1\36\1\2"+
    "\1\37\2\0\15\2\1\40\10\2\10\0\1\2\1\0"+
    "\1\3\3\41\1\0\1\27\1\0\3\2\1\42\1\2"+
    "\1\43\1\2\1\0\2\2\1\0\1\44\3\33\2\0"+
    "\1\34\1\0\1\2\1\0\1\45\2\0\1\46\2\0"+
    "\5\2\1\47\12\2\1\50\12\2\1\51\1\52\2\0"+
    "\1\53\2\41\1\0\1\54\4\2\1\0\1\55\1\2"+
    "\5\0\1\35\5\0\3\2\1\56\2\2\1\57\1\60"+
    "\3\2\1\61\3\2\1\62\11\2\1\63\1\41\1\2"+
    "\1\64\1\2\1\65\1\55\1\0\1\2\10\0\2\2"+
    "\1\66\1\67\1\70\2\2\1\71\1\0\1\2\1\72"+
    "\4\2\1\73\1\74\1\75\3\2\1\76\3\2\1\0"+
    "\1\2\1\22\1\23\2\0\1\77\3\0\1\2\1\100"+
    "\1\101\1\2\2\0\2\2\1\102\2\2\1\103\3\2"+
    "\1\104\1\105\1\106\1\0\1\2\4\0\2\2\2\0"+
    "\4\2\1\107\1\2\1\110\1\0\1\55\3\0\1\111"+
    "\1\112\2\0\2\2\1\113\1\114\1\2\1\55\4\0"+
    "\2\2\1\115\1\116\1\0\1\116\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483"+
    "\0\u04d0\0\u051d\0\u039c\0\u056a\0\u05b7\0\u0604\0\u01ce\0\u0651"+
    "\0\u069e\0\u06eb\0\u0181\0\u0738\0\u0181\0\u0181\0\u0785\0\u0181"+
    "\0\u07d2\0\u0181\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953\0\u09a0"+
    "\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08"+
    "\0\u039c\0\u039c\0\u0181\0\u0181\0\u0c55\0\u0181\0\u0ca2\0\u0cef"+
    "\0\u0d3c\0\u0d89\0\u0dd6\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a\0\u0f57"+
    "\0\u0fa4\0\u0ff1\0\u103e\0\u108b\0\u10d8\0\u0181\0\u1125\0\u1172"+
    "\0\u11bf\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u01ce\0\u0483\0\u0181"+
    "\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474\0\u039c\0\u14c1\0\u150e"+
    "\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u0181\0\u16dc\0\u039c"+
    "\0\u1729\0\u039c\0\u1776\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7"+
    "\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f"+
    "\0\u1bac\0\u01ce\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a"+
    "\0\u1dc7\0\u1e14\0\u1e61\0\u1eae\0\u0181\0\u1efb\0\u1f48\0\u0181"+
    "\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0"+
    "\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418"+
    "\0\u01ce\0\u0483\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u0181\0\u2599"+
    "\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u0181\0\u271a\0\u2767\0\u27b4"+
    "\0\u0181\0\u2801\0\u284e\0\u0181\0\u289b\0\u28e8\0\u2935\0\u2982"+
    "\0\u29cf\0\u2a1c\0\u2a69\0\u01ce\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d"+
    "\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\u2d1e\0\u2d6b\0\u01ce\0\u2db8"+
    "\0\u2e05\0\u2e52\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020"+
    "\0\u306d\0\u01ce\0\u01ce\0\u30ba\0\u3107\0\u01ce\0\u3154\0\u0181"+
    "\0\u31a1\0\u01ce\0\u31ee\0\u323b\0\u3288\0\u32d5\0\u3322\0\u138d"+
    "\0\u336f\0\u33bc\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u039c\0\u353d"+
    "\0\u358a\0\u35d7\0\u3624\0\u3671\0\u36be\0\u370b\0\u3758\0\u01ce"+
    "\0\u37a5\0\u37f2\0\u01ce\0\u01ce\0\u383f\0\u388c\0\u38d9\0\u3926"+
    "\0\u3973\0\u39c0\0\u3a0d\0\u01ce\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41"+
    "\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2\0\u01ce\0\u21fd\0\u3d0f"+
    "\0\u01ce\0\u3d5c\0\u3da9\0\u2465\0\u3df6\0\u3e43\0\u3e90\0\u3edd"+
    "\0\u3f2a\0\u3f77\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u40f8\0\u4145"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u4192\0\u41df\0\u01ce\0\u422c\0\u4279"+
    "\0\u01ce\0\u42c6\0\u4313\0\u4360\0\u43ad\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u43fa\0\u4447\0\u4494\0\u01ce\0\u44e1\0\u452e\0\u457b\0\u45c8"+
    "\0\u4615\0\u0181\0\u0181\0\u4662\0\u46af\0\u46fc\0\u4749\0\u4796"+
    "\0\u47e3\0\u4830\0\u01ce\0\u01ce\0\u487d\0\u48ca\0\u4917\0\u4964"+
    "\0\u49b1\0\u01ce\0\u49fe\0\u4a4b\0\u01ce\0\u4a98\0\u4ae5\0\u4b32"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u4b7f\0\u4bcc\0\u4c19\0\u4c66\0\u4cb3"+
    "\0\u4d00\0\u4d4d\0\u4d9a\0\u4de7\0\u4e34\0\u4e81\0\u4ece\0\u4f1b"+
    "\0\u4f68\0\u01ce\0\u4fb5\0\u01ce\0\u5002\0\u336f\0\u504f\0\u509c"+
    "\0\u50e9\0\u01ce\0\u01ce\0\u5136\0\u5183\0\u51d0\0\u521d\0\u01ce"+
    "\0\u01ce\0\u526a\0\u3df6\0\u52b7\0\u5304\0\u5351\0\u539e\0\u53eb"+
    "\0\u5438\0\u01ce\0\u0181\0\u5485\0\u01ce\0\u54d2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\7\2\12\1\7\1\13"+
    "\1\7\1\14\2\15\1\7\1\16\1\7\1\17\1\20"+
    "\1\15\1\21\1\15\1\22\1\23\1\24\1\25\1\26"+
    "\1\7\1\6\1\27\1\30\2\7\1\31\1\32\2\30"+
    "\1\33\1\34\1\15\1\35\2\7\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\7\1\44\1\45\1\46\1\47"+
    "\1\50\2\7\1\51\1\52\1\53\1\7\1\54\1\55"+
    "\1\7\1\56\1\57\3\7\1\60\2\12\1\61\1\12"+
    "\1\62\1\15\1\63\1\64\1\6\1\7\1\10\1\11"+
    "\1\7\2\12\1\7\1\13\1\7\1\14\2\15\1\7"+
    "\1\16\1\7\1\17\1\20\1\15\1\21\1\15\1\22"+
    "\1\23\1\24\1\25\1\26\1\7\1\6\1\27\1\30"+
    "\2\7\1\31\1\32\2\30\1\33\1\65\1\15\1\35"+
    "\2\7\1\36\1\37\1\40\1\41\1\42\1\43\1\7"+
    "\1\44\1\45\1\46\1\47\1\50\2\7\1\51\1\52"+
    "\1\53\1\7\1\54\1\55\1\7\1\56\1\57\3\7"+
    "\1\60\2\12\1\61\1\12\1\62\1\15\1\63\1\64"+
    "\45\66\1\67\47\66\3\0\1\70\1\0\2\71\76\0"+
    "\2\71\1\0\1\71\5\0\2\72\1\73\1\72\2\73"+
    "\1\72\1\0\2\72\2\74\4\72\1\75\10\74\1\72"+
    "\1\73\1\72\1\0\2\72\2\0\1\73\2\0\2\74"+
    "\1\0\2\72\5\0\25\72\1\74\2\73\1\74\1\73"+
    "\2\74\120\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\25\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\1\77\24\7"+
    "\1\0\2\7\1\0\1\7\5\0\2\100\1\101\1\102"+
    "\1\103\1\101\1\0\1\104\2\105\2\0\4\106\64\0"+
    "\2\101\1\0\1\103\5\0\2\100\1\12\1\0\2\12"+
    "\1\0\1\104\2\105\2\0\4\106\64\0\2\12\1\0"+
    "\1\12\7\0\1\107\1\0\2\107\76\0\2\107\1\0"+
    "\1\107\5\0\1\7\1\110\1\7\1\111\3\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\25\7\1\0\2\7"+
    "\1\0\1\7\17\0\2\15\5\0\10\15\13\0\2\15"+
    "\35\0\1\15\2\0\1\15\1\0\2\15\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\1\112\5\7"+
    "\1\113\3\7\1\114\12\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\1\7\1\115\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\6\7\1\116\16\7\1\0\2\7\1\0\1\7"+
    "\4\0\21\117\1\120\5\117\1\121\5\117\1\0\3\117"+
    "\3\0\51\117\13\0\2\15\5\0\1\122\7\15\13\0"+
    "\2\15\35\0\1\15\2\0\1\15\1\0\2\15\15\0"+
    "\2\15\5\0\3\15\1\123\4\15\13\0\2\15\35\0"+
    "\1\15\2\0\1\15\1\0\2\15\15\0\2\15\5\0"+
    "\10\15\4\0\1\124\6\0\2\15\35\0\1\15\2\0"+
    "\1\15\1\0\2\15\15\0\2\15\5\0\6\15\1\125"+
    "\1\15\13\0\2\15\35\0\1\15\2\0\1\15\1\0"+
    "\2\15\15\0\2\15\5\0\3\15\1\126\4\15\13\0"+
    "\2\15\35\0\1\15\2\0\1\15\1\0\2\15\37\0"+
    "\1\30\4\0\3\30\50\0\1\127\2\130\1\127\1\130"+
    "\2\127\1\130\1\127\2\130\2\131\4\130\1\127\5\131"+
    "\1\132\2\131\1\130\1\127\1\130\1\0\2\130\1\0"+
    "\4\127\2\131\1\127\2\130\5\127\25\130\1\131\2\127"+
    "\1\131\1\127\2\131\2\127\27\133\1\134\5\133\1\0"+
    "\3\133\1\135\53\133\1\0\2\136\1\0\1\136\2\0"+
    "\1\136\1\0\2\136\1\15\1\62\4\136\1\0\1\137"+
    "\2\15\1\140\4\15\1\136\1\0\1\136\1\0\2\136"+
    "\5\0\1\15\1\141\1\0\2\136\5\0\25\136\1\15"+
    "\2\0\1\15\1\0\1\15\1\142\47\0\1\143\114\0"+
    "\1\144\50\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\1\7\1\145\23\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\1\7\1\146\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\1\147\1\7\2\0\1\7\5\0"+
    "\2\7\5\0\25\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\4\7"+
    "\1\150\3\7\1\151\2\7\1\152\11\7\1\0\2\7"+
    "\1\0\1\7\5\0\7\7\1\0\1\7\1\153\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\25\7\1\0\2\7\1\0\1\7"+
    "\5\0\1\7\1\154\5\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\1\155\24\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\1\7\1\156\17\7\1\157\3\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\1\7\1\160\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\1\161\1\7\2\0\1\7"+
    "\5\0\2\7\5\0\25\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\1\7\1\162\2\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\15\7\1\163\7\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\12\7\1\164\12\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\1\165\24\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\1\166\3\7"+
    "\1\167\20\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\10\7\1\170"+
    "\1\7\1\171\12\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\1\172"+
    "\24\7\1\0\2\7\1\0\1\7\17\0\2\15\5\0"+
    "\7\15\1\61\13\0\2\15\35\0\1\15\2\0\1\15"+
    "\1\0\2\15\15\0\1\15\1\62\5\0\3\15\1\140"+
    "\4\15\13\0\2\15\35\0\1\15\2\0\1\15\1\0"+
    "\1\15\1\142\3\0\2\136\1\0\1\136\2\0\1\136"+
    "\1\0\2\136\2\0\4\136\1\0\1\173\7\0\1\136"+
    "\1\0\1\136\1\0\2\136\6\0\1\174\1\0\2\136"+
    "\5\0\25\136\12\0\2\175\1\176\1\177\1\0\1\176"+
    "\76\0\2\176\7\0\2\175\1\71\1\0\2\71\76\0"+
    "\2\71\1\0\1\71\5\0\2\72\1\73\1\72\2\73"+
    "\1\72\1\200\2\72\2\0\4\72\11\0\1\72\1\73"+
    "\1\72\1\0\2\72\2\0\1\73\5\0\2\72\5\0"+
    "\25\72\1\0\2\73\1\0\1\73\5\0\2\72\1\73"+
    "\1\72\2\73\1\72\1\0\2\72\2\0\4\72\11\0"+
    "\1\72\1\73\1\72\1\0\2\72\2\0\1\73\5\0"+
    "\2\72\5\0\25\72\1\0\2\73\1\0\1\73\14\0"+
    "\1\200\2\0\2\74\5\0\10\74\2\0\1\73\10\0"+
    "\2\74\35\0\1\74\2\0\1\74\1\0\2\74\2\0"+
    "\21\75\1\201\13\75\1\0\3\75\3\202\51\75\1\0"+
    "\7\7\1\0\2\7\2\15\4\7\1\0\10\15\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\2\0\2\15\1\0"+
    "\2\7\5\0\25\7\1\15\2\7\1\15\1\7\2\15"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\17\7\1\203\5\7\1\0\2\7\1\0\1\7\14\0"+
    "\1\204\105\0\2\100\1\101\1\0\1\103\1\101\1\0"+
    "\1\104\2\105\2\0\4\106\64\0\2\101\1\0\1\103"+
    "\7\0\1\205\1\0\3\205\1\0\2\205\2\0\4\205"+
    "\16\0\1\205\10\0\1\205\6\0\2\205\3\0\1\205"+
    "\20\0\2\205\1\0\1\205\7\0\1\103\1\0\2\103"+
    "\1\0\1\107\2\105\2\0\4\106\64\0\2\103\1\0"+
    "\1\103\5\0\2\206\1\107\1\206\2\107\1\206\1\0"+
    "\2\207\2\210\4\206\1\211\10\210\1\206\1\0\1\206"+
    "\1\0\2\206\5\0\2\210\1\0\2\206\5\0\25\206"+
    "\1\210\2\107\1\210\1\107\2\210\5\0\1\212\1\0"+
    "\2\212\4\0\2\213\70\0\2\212\1\0\1\212\7\0"+
    "\1\107\1\0\2\107\2\0\2\105\2\0\4\106\64\0"+
    "\2\107\1\0\1\107\5\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\2\7\1\214\22\7\1\0\2\7"+
    "\1\0\1\7\5\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\3\7\1\215\21\7\1\0\2\7\1\0"+
    "\1\7\5\0\1\7\1\216\5\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\25\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\4\7\1\217\20\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\11\7"+
    "\1\220\13\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\1\7\1\221\2\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\25\7\1\0\2\7\1\0\1\7\4\0\21\117\1\222"+
    "\5\117\1\121\5\117\1\0\57\117\13\223\2\122\5\223"+
    "\1\224\7\122\13\223\2\122\35\223\1\122\2\223\1\122"+
    "\1\223\2\122\2\223\13\0\2\15\5\0\1\15\1\225"+
    "\6\15\13\0\2\15\35\0\1\15\2\0\1\15\1\0"+
    "\2\15\107\0\1\226\7\0\35\125\1\0\57\125\27\0"+
    "\1\227\10\0\1\227\55\0\7\230\1\0\2\230\2\0"+
    "\4\230\6\0\1\227\2\0\2\230\1\231\1\0\2\230"+
    "\1\227\1\0\1\230\5\0\2\230\5\0\25\230\1\0"+
    "\2\230\1\0\1\230\17\0\2\232\5\0\10\232\6\0"+
    "\1\227\4\0\2\232\35\0\1\232\2\0\1\232\1\0"+
    "\2\232\2\0\3\127\1\233\2\127\1\233\4\127\2\131"+
    "\5\127\10\131\3\127\1\0\1\234\6\127\2\131\35\127"+
    "\1\131\2\233\1\131\1\127\2\131\2\127\27\133\1\134"+
    "\5\133\1\0\3\133\1\235\110\133\1\0\57\133\41\0"+
    "\1\236\66\0\1\15\1\237\5\0\10\15\13\0\2\15"+
    "\1\240\34\0\1\15\2\0\1\15\1\0\2\15\3\0"+
    "\2\136\1\0\1\136\2\0\1\136\1\0\2\136\2\15"+
    "\4\136\1\0\10\15\1\136\1\0\1\136\1\0\2\136"+
    "\5\0\2\15\1\0\2\136\5\0\25\136\1\15\2\0"+
    "\1\15\1\0\2\15\3\0\2\241\1\0\1\241\2\0"+
    "\1\241\1\0\2\241\2\0\4\241\1\0\1\242\7\0"+
    "\1\241\1\0\1\241\1\0\2\241\6\0\1\243\1\0"+
    "\2\241\5\0\25\241\12\0\2\244\1\0\1\244\2\0"+
    "\1\244\1\0\2\244\2\0\4\244\1\0\1\245\7\0"+
    "\1\244\1\0\1\244\1\0\2\244\6\0\1\246\1\0"+
    "\2\244\5\0\25\244\12\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\2\7\1\247\22\7\1\0\2\7"+
    "\1\0\1\7\5\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\1\250\24\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\16\7\1\251\6\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\1\252\1\7\2\0\1\7\5\0\2\7\5\0"+
    "\1\253\12\7\1\254\11\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\4\7\1\255\5\7\1\256\12\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\16\7\1\257\6\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\3\7\1\260\20\7\1\261\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\1\262\24\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\2\7\1\263"+
    "\1\264\21\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\7\7\1\265"+
    "\15\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\1\7\1\266\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\25\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\20\7\1\267\4\7\1\0\2\7"+
    "\1\0\1\7\5\0\1\7\1\270\5\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\25\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\16\7\1\271\6\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\1\7\1\272\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\25\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\3\7\1\273"+
    "\1\7\1\274\17\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\5\7"+
    "\1\275\17\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\6\7\1\276"+
    "\3\7\1\277\12\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\12\7"+
    "\1\300\12\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\3\7\1\301"+
    "\21\7\1\0\2\7\1\0\1\7\5\0\1\7\1\302"+
    "\5\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\4\7"+
    "\1\303\20\7\1\0\2\7\1\0\1\7\20\0\1\304"+
    "\32\0\1\240\46\0\2\136\1\0\1\136\2\0\1\136"+
    "\1\0\2\136\2\0\4\136\11\0\1\136\1\0\1\136"+
    "\1\0\2\136\10\0\2\136\5\0\25\136\12\0\2\175"+
    "\1\176\2\0\1\176\76\0\2\176\11\0\1\305\1\0"+
    "\3\305\1\0\2\305\2\0\4\305\16\0\1\305\10\0"+
    "\1\305\6\0\2\305\3\0\1\305\20\0\2\305\1\0"+
    "\1\305\14\0\1\200\16\0\1\75\114\0\1\75\66\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\13\7"+
    "\1\306\11\7\1\0\2\7\1\0\1\7\5\0\2\206"+
    "\1\0\1\206\2\0\1\206\1\0\2\206\2\210\4\206"+
    "\1\211\10\210\1\206\1\0\1\206\1\0\2\206\5\0"+
    "\2\210\1\0\2\206\5\0\25\206\1\210\2\0\1\210"+
    "\1\0\2\210\3\0\2\100\1\205\1\0\3\205\1\204"+
    "\2\205\2\0\4\205\16\0\1\205\10\0\1\205\6\0"+
    "\2\205\3\0\1\205\20\0\2\205\1\0\1\205\5\0"+
    "\7\206\1\0\2\206\2\0\4\206\11\0\2\206\1\307"+
    "\1\0\2\206\2\0\1\206\5\0\2\206\5\0\25\206"+
    "\1\0\2\206\1\0\1\206\5\0\7\206\1\0\2\206"+
    "\2\213\4\206\11\0\2\206\1\307\1\0\2\206\2\0"+
    "\1\206\5\0\2\206\5\0\25\206\1\0\2\206\1\0"+
    "\1\206\17\0\2\210\5\0\10\210\13\0\2\210\35\0"+
    "\1\210\2\0\1\210\1\0\2\210\2\0\21\211\1\310"+
    "\5\211\1\311\5\211\1\0\3\211\3\0\51\211\3\0"+
    "\1\212\1\0\2\212\6\0\4\106\64\0\2\212\1\0"+
    "\1\212\7\0\1\212\1\0\2\212\76\0\2\212\1\0"+
    "\1\212\5\0\7\7\1\0\1\7\1\312\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\25\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\1\7\1\313\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\25\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\2\7\1\314\22\7"+
    "\1\0\2\7\1\0\1\7\5\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\14\7\1\315\10\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\1\316\24\7\1\0\2\7\1\0"+
    "\1\7\4\0\22\223\1\317\105\223\2\122\5\223\1\224"+
    "\1\320\6\122\13\223\2\122\35\223\1\122\2\223\1\122"+
    "\1\223\2\122\2\223\13\0\2\15\5\0\1\321\7\15"+
    "\13\0\2\15\35\0\1\15\2\0\1\15\1\0\2\15"+
    "\110\0\1\322\7\0\7\230\1\0\2\230\2\0\4\230"+
    "\11\0\2\230\1\231\1\0\2\230\2\0\1\230\5\0"+
    "\2\230\5\0\25\230\1\0\2\230\1\0\1\230\5\0"+
    "\7\230\1\0\2\230\2\232\4\230\1\0\10\232\2\230"+
    "\1\231\1\0\2\230\2\0\1\230\2\0\2\232\1\0"+
    "\2\230\5\0\25\230\1\232\2\230\1\232\1\230\2\232"+
    "\15\0\2\232\5\0\10\232\13\0\2\232\35\0\1\232"+
    "\2\0\1\232\1\0\2\232\5\0\1\323\2\0\1\323"+
    "\20\0\1\227\10\0\1\227\44\0\2\323\11\0\1\324"+
    "\1\0\3\325\1\0\2\325\2\0\4\325\6\0\1\227"+
    "\7\0\1\325\1\227\7\0\1\325\6\0\2\325\3\0"+
    "\1\325\20\0\2\325\1\0\1\325\4\0\41\236\1\326"+
    "\53\236\13\0\1\15\1\327\5\0\10\15\13\0\2\15"+
    "\35\0\1\15\2\0\1\15\1\0\2\15\52\0\1\330"+
    "\60\0\1\331\32\0\1\332\46\0\2\241\1\0\1\241"+
    "\2\0\1\241\1\0\2\241\2\0\4\241\11\0\1\241"+
    "\1\0\1\241\1\0\2\241\10\0\2\241\5\0\25\241"+
    "\25\0\1\333\32\0\1\334\46\0\2\244\1\0\1\244"+
    "\2\0\1\244\1\0\2\244\2\0\4\244\11\0\1\244"+
    "\1\0\1\244\1\0\2\244\10\0\2\244\5\0\25\244"+
    "\12\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\3\7\1\335\21\7\1\0\2\7\1\0\1\7\5\0"+
    "\1\7\1\336\5\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\25\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\1\7\1\337\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\25\7"+
    "\1\0\2\7\1\0\1\7\5\0\7\7\1\0\1\7"+
    "\1\340\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\25\7\1\0\2\7"+
    "\1\0\1\7\5\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\12\7\1\341\12\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\6\7\1\342\16\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\2\7\1\343\22\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\1\7\1\344\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\25\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\1\345"+
    "\1\7\2\0\1\7\5\0\2\7\5\0\25\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\1\346\1\7\2\0"+
    "\1\7\5\0\2\7\5\0\25\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\2\7\1\347\22\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\1\7\1\350\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\25\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\5\7\1\351"+
    "\17\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\1\7\1\352\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\25\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\4\7\1\353\20\7\1\0\2\7"+
    "\1\0\1\7\5\0\1\7\1\354\5\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\25\7\1\0\2\7\1\0"+
    "\1\7\5\0\1\7\1\355\5\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\6\7\1\356\16\7\1\0\2\7"+
    "\1\0\1\7\5\0\1\7\1\357\5\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\25\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\5\7\1\360\17\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\4\7\1\361\20\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\22\7"+
    "\1\362\2\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\3\7\1\363"+
    "\21\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\21\7\1\364\3\7"+
    "\1\0\2\7\1\0\1\7\5\0\1\7\1\365\5\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\25\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\10\7\1\366\14\7\1\0\2\7"+
    "\1\0\1\7\20\0\1\136\101\0\2\175\1\305\1\0"+
    "\3\305\1\0\2\305\2\0\4\305\16\0\1\305\10\0"+
    "\1\305\6\0\2\305\3\0\1\305\20\0\2\305\1\0"+
    "\1\305\5\0\7\206\1\0\2\206\2\210\4\206\1\0"+
    "\10\210\2\206\1\307\1\0\2\206\2\0\1\206\2\0"+
    "\2\210\1\0\2\206\5\0\25\206\1\210\2\206\1\210"+
    "\1\206\2\210\2\0\21\211\1\367\5\211\1\311\5\211"+
    "\1\0\57\211\1\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\11\7\1\370\13\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\1\7\1\371\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\25\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\6\7"+
    "\1\372\16\7\1\0\2\7\1\0\1\7\5\0\1\7"+
    "\1\373\5\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\25\7\1\0\2\7\1\0\1\7\4\0\22\223\1\317"+
    "\1\374\71\223\13\375\2\321\5\375\3\321\1\376\4\321"+
    "\13\375\2\321\35\375\1\321\2\375\1\321\1\375\2\321"+
    "\2\375\17\0\1\377\70\0\1\u0100\7\0\1\127\2\0"+
    "\1\127\20\0\1\227\10\0\1\227\44\0\2\127\11\0"+
    "\1\u0101\1\0\3\u0102\1\0\2\u0102\2\0\4\u0102\16\0"+
    "\1\u0102\10\0\1\u0102\6\0\2\u0102\3\0\1\u0102\20\0"+
    "\2\u0102\1\0\1\u0102\7\0\1\u0102\1\0\3\u0102\1\0"+
    "\2\u0102\2\0\4\u0102\16\0\1\u0102\10\0\1\u0102\6\0"+
    "\2\u0102\3\0\1\u0102\20\0\2\u0102\1\0\1\u0102\4\0"+
    "\41\236\1\u0103\53\236\17\0\1\u0104\111\0\1\241\150\0"+
    "\1\u0105\60\0\1\244\150\0\1\u0106\45\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\4\7\1\u0107\20\7"+
    "\1\0\2\7\1\0\1\7\5\0\7\7\1\0\1\7"+
    "\1\u0108\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\25\7\1\0\2\7"+
    "\1\0\1\7\5\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\4\7\1\u0109\20\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\3\7\1\u010a\21\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\20\7\1\u010b\4\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\4\7"+
    "\1\u010c\20\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\12\7\1\u010d"+
    "\12\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\2\7\1\u010e\22\7"+
    "\1\0\2\7\1\0\1\7\5\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\76\1\u010f\2\7\2\0"+
    "\1\u0110\2\u010f\3\0\2\7\5\0\25\7\1\0\2\7"+
    "\1\0\1\7\5\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\10\7\1\u0111\14\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\5\7\1\u0112\17\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\4\7\1\u0113\20\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\12\7"+
    "\1\u0114\12\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\4\7\1\u0115"+
    "\20\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\2\7\2\0\3\7\1\u0116\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\25\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\10\7\1\u0117\14\7\1\0\2\7"+
    "\1\0\1\7\5\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\6\7\1\u0118\16\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\1\u0119\24\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\1\7\1\u011a\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\25\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\1\u011b\24\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\1\7\1\u011c"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\25\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\3\7\1\u011d"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\25\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\15\7"+
    "\1\u011e\7\7\1\0\2\7\1\0\1\7\5\0\1\7"+
    "\1\u011f\5\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\25\7\1\0\2\7\1\0\1\7\4\0\25\375\1\u0120"+
    "\102\375\2\321\5\375\3\321\1\u0121\4\321\13\375\2\321"+
    "\35\375\1\321\2\375\1\321\1\375\2\321\2\375\105\0"+
    "\1\u0122\12\0\1\u0123\114\0\1\u0124\1\0\3\u0125\1\0"+
    "\2\u0125\2\0\4\u0125\16\0\1\u0125\10\0\1\u0125\6\0"+
    "\2\u0125\3\0\1\u0125\20\0\2\u0125\1\0\1\u0125\7\0"+
    "\1\u0125\1\0\3\u0125\1\0\2\u0125\2\0\4\u0125\16\0"+
    "\1\u0125\10\0\1\u0125\6\0\2\u0125\3\0\1\u0125\20\0"+
    "\2\u0125\1\0\1\u0125\4\0\41\236\1\u0126\53\236\37\0"+
    "\1\u0127\74\0\1\u0128\114\0\1\u0129\76\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\1\u012a\24\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\3\7\1\u012b\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\25\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\11\7\1\u012c\13\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\4\7\1\u012d\20\7\1\0\2\7\1\0\1\7\41\0"+
    "\1\u010f\4\0\3\u010f\17\0\1\u012e\1\u012f\30\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\u010f"+
    "\2\7\2\0\1\u0110\2\u010f\3\0\2\7\5\0\5\7"+
    "\1\u0130\1\u0131\16\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\3\7"+
    "\1\u0132\21\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\12\7\1\u0133"+
    "\12\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\5\7\1\u0134\17\7"+
    "\1\0\2\7\1\0\1\7\5\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\3\7\1\u0135\21\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\23\7\1\u0136\1\7\1\0\2\7"+
    "\1\0\1\7\5\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\5\7\1\u0137\17\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\3\7\1\u0138\21\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\2\7\1\u0139\22\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\1\7\1\u013a\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\25\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\76\1\0\2\7"+
    "\2\0\1\7\5\0\2\7\5\0\13\7\1\u013b\11\7"+
    "\1\0\2\7\1\0\1\7\4\0\25\375\1\u013c\102\375"+
    "\2\321\5\375\1\u013d\2\321\1\u0121\4\321\13\375\2\321"+
    "\35\375\1\321\2\375\1\321\1\375\2\321\2\375\3\0"+
    "\1\127\1\0\3\127\1\0\2\127\2\0\4\127\16\0"+
    "\1\u013e\10\0\1\127\6\0\2\127\3\0\1\127\20\0"+
    "\2\127\1\0\1\127\7\0\1\127\1\0\3\127\1\0"+
    "\2\127\2\0\4\127\16\0\1\127\10\0\1\127\6\0"+
    "\2\127\3\0\1\127\20\0\2\127\1\0\1\127\45\0"+
    "\1\u0126\124\0\1\u013f\102\0\1\u0140\114\0\1\u0141\56\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\5\7"+
    "\1\u0142\17\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\1\7\1\u0143\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\25\7"+
    "\1\0\2\7\1\0\1\7\6\0\1\u0144\172\0\1\u0145"+
    "\35\0\1\7\1\u0146\5\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\76\1\0\2\7\2\0\1\7\5\0"+
    "\2\7\5\0\25\7\1\0\2\7\1\0\1\7\5\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\1\7"+
    "\1\u0147\23\7\1\0\2\7\1\0\1\7\5\0\7\7"+
    "\1\0\2\7\2\0\3\7\1\u0148\11\0\2\7\1\76"+
    "\1\0\2\7\2\0\1\7\5\0\2\7\5\0\25\7"+
    "\1\0\2\7\1\0\1\7\5\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\12\7\1\u0149\12\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\1\7\1\u014a"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\25\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\3\7\1\u014b\21\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\1\7\1\u014c\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\25\7\1\0\2\7\1\0\1\7\4\0\22\375"+
    "\1\u014d\2\375\1\u013c\102\375\2\321\5\375\1\321\1\u014e"+
    "\1\321\1\376\4\321\13\375\2\321\35\375\1\321\2\375"+
    "\1\321\1\375\2\321\2\375\40\0\1\227\113\0\1\u014f"+
    "\126\0\1\u0150\114\0\1\u0151\44\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\3\7\1\u0152\21\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\76\1\0\2\7\2\0\1\7"+
    "\5\0\2\7\5\0\2\7\1\u0153\22\7\1\0\2\7"+
    "\1\0\1\7\63\0\1\u0154\123\0\1\u0155\27\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\1\u0156\24\7"+
    "\1\0\2\7\1\0\1\7\5\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\7\7\1\u0157\15\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\1\7\1\u0158"+
    "\2\0\4\7\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\25\7\1\0\2\7\1\0"+
    "\1\7\5\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\3\7\1\u0159\21\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\1\7\1\u015a\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\25\7\1\0\2\7\1\0\1\7\4\0\23\375"+
    "\1\u015b\1\375\1\u0120\67\375\47\0\1\136\104\0\1\u015c"+
    "\114\0\1\u015d\136\0\1\u015e\45\0\1\u015f\103\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\2\7\1\u0160"+
    "\22\7\1\0\2\7\1\0\1\7\5\0\7\7\1\0"+
    "\1\7\1\u0161\2\0\4\7\11\0\2\7\1\76\1\0"+
    "\2\7\2\0\1\7\5\0\2\7\5\0\25\7\1\0"+
    "\2\7\1\0\1\7\5\0\7\7\1\0\2\7\2\0"+
    "\3\7\1\u0162\11\0\2\7\1\76\1\0\2\7\2\0"+
    "\1\7\5\0\2\7\5\0\25\7\1\0\2\7\1\0"+
    "\1\7\53\0\1\241\114\0\1\244\126\0\1\u0163\117\0"+
    "\1\u0164\31\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\2\7\1\u0165\22\7\1\0\2\7\1\0\1\7"+
    "\5\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\76\1\0\2\7\2\0\1\7\5\0\2\7\5\0"+
    "\5\7\1\u0166\17\7\1\0\2\7\1\0\1\7\66\0"+
    "\1\u0163\33\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\76\1\0\2\7\2\0\1\7\5\0\2\7"+
    "\5\0\3\7\1\u0165\21\7\1\0\2\7\1\0\1\7"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21791];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\24\1\1\11\1\1\2\11\1\1\1\11"+
    "\1\1\1\11\20\1\2\11\1\1\1\11\3\1\4\0"+
    "\4\1\2\0\1\1\1\0\1\11\10\1\1\0\1\11"+
    "\1\0\2\1\1\0\2\1\1\0\4\1\1\0\1\1"+
    "\1\11\4\1\2\0\26\1\2\0\1\11\1\1\1\0"+
    "\1\11\2\0\1\1\1\0\4\1\1\0\1\1\1\0"+
    "\7\1\1\0\2\1\1\0\1\11\3\1\2\0\1\11"+
    "\1\0\1\1\1\0\1\11\2\0\1\11\2\0\35\1"+
    "\1\0\3\1\1\11\1\0\5\1\1\0\2\1\5\0"+
    "\1\1\5\0\40\1\1\0\1\1\10\0\10\1\1\0"+
    "\20\1\1\0\1\1\2\11\2\0\1\1\3\0\4\1"+
    "\2\0\14\1\1\0\1\1\4\0\2\1\2\0\7\1"+
    "\1\0\1\1\3\0\2\1\2\0\6\1\4\0\3\1"+
    "\1\11\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Stack for braces
    private Stack <IElementType> braceStack = new Stack<IElementType>();

    /* removes brace from stack */
    private IElementType popBraceStack(IElementType elem){
     if (
          !braceStack.isEmpty() &&
          (
            (elem.equals(tRSQBRACKET) && tLSQBRACKET.equals(braceStack.peek())) ||
            (elem.equals(tRBRACE) && tLBRACE.equals(braceStack.peek())) ||
            (elem.equals(tRPARENTHESIS) && tLPARENTHESIS.equals(braceStack.peek()))
          )
        ) {
          braceStack.pop();
          return process(elem);
        } else if (elem.equals(tFUNTYPE)) {
          if (!braceStack.isEmpty() && kCASE.equals(braceStack.peek())) {
            braceStack.pop();
          }
          return process(elem);
        } else {
          return process(elem);
        }
    }

    private IElementType process(IElementType type){
        return type;
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 58: 
          { return process(kCATCH);
          }
        case 79: break;
        case 55: 
          { return process(kTRAIT);
          }
        case 80: break;
        case 77: 
          { return process(kPROTECTED);
          }
        case 81: break;
        case 26: 
          { return process(tLOWER_BOUND);
          }
        case 82: break;
        case 25: 
          { return process(tLINE_COMMENT);
          }
        case 83: break;
        case 45: 
          { return process(tSH_COMMENT);
          }
        case 84: break;
        case 6: 
          { return process(tCOLON);
          }
        case 85: break;
        case 68: 
          { return process(kEXTENDS);
          }
        case 86: break;
        case 38: 
          { braceStack.push(tLPARENTHESIS);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLPARENTHESIS);
          }
        case 87: break;
        case 42: 
          { return process(kVAR);
          }
        case 88: break;
        case 65: 
          { return process(kRETURN);
          }
        case 89: break;
        case 20: 
          { return process(tSEMICOLON);
          }
        case 90: break;
        case 46: 
          { return process(kTRUE);
          }
        case 91: break;
        case 10: 
          { return process(tWRONG_STRING);
          }
        case 92: break;
        case 66: 
          { return process(kOBJECT);
          }
        case 93: break;
        case 18: 
          { return popBraceStack(tFUNTYPE);
          }
        case 94: break;
        case 1: 
          { return process(tSTUB);
          }
        case 95: break;
        case 51: 
          { return process(kWITH);
          }
        case 96: break;
        case 30: 
          { return process(tUPPER_BOUND);
          }
        case 97: break;
        case 4: 
          { return process(tDOT);
          }
        case 98: break;
        case 60: 
          { return process(kMATCH);
          }
        case 99: break;
        case 21: 
          { return process(tCOMMA);
          }
        case 100: break;
        case 28: 
          { return process(tSTRING);
          }
        case 101: break;
        case 12: 
          { return popBraceStack(tRSQBRACKET);
          }
        case 102: break;
        case 47: 
          { return process(kTHIS);
          }
        case 103: break;
        case 56: 
          { return process(kTHROW);
          }
        case 104: break;
        case 41: 
          { return process(kVAL);
          }
        case 105: break;
        case 72: 
          { return process(kPRIVATE);
          }
        case 106: break;
        case 50: 
          { return process(kNULL);
          }
        case 107: break;
        case 70: 
          { return process(kFINALLY);
          }
        case 108: break;
        case 69: 
          { return process(kFOR_SOME);
          }
        case 109: break;
        case 13: 
          { braceStack.push(tLBRACE);
                                            return process(tLBRACE);
          }
        case 110: break;
        case 64: 
          { return process(kSEALED);
          }
        case 111: break;
        case 33: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 3;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length()) { zzFin = new boolean[zzBufferL.length()+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL.charAt(zzFPos++);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 4;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL.charAt(--zzFPos);
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { return process(tINTEGER);
          }
        case 112: break;
        case 3: 
          { return process(tINTEGER);
          }
        case 113: break;
        case 57: 
          { return process(kCLASS);
          }
        case 114: break;
        case 75: 
          { return process(kOVERRIDE);
          }
        case 115: break;
        case 71: 
          { return process(kPACKAGE);
          }
        case 116: break;
        case 11: 
          { braceStack.push(tLSQBRACKET);
                                            return process(tLSQBRACKET);
          }
        case 117: break;
        case 24: 
          { return process(kDO);
          }
        case 118: break;
        case 34: 
          { return process(kFOR);
          }
        case 119: break;
        case 52: 
          { return process(kFALSE);
          }
        case 120: break;
        case 19: 
          { return process(tCHOOSE);
          }
        case 121: break;
        case 59: 
          { return process(kYIELD);
          }
        case 122: break;
        case 7: 
          { return process(tAT);
          }
        case 123: break;
        case 2: 
          { return process(tIDENTIFIER);
          }
        case 124: break;
        case 40: 
          { return process(kNEW);
          }
        case 125: break;
        case 74: 
          { return process(kREQUIRES);
          }
        case 126: break;
        case 49: 
          { braceStack.push(kCASE);
                                            return process(kCASE);
          }
        case 127: break;
        case 61: 
          { return process(kMACRO);
          }
        case 128: break;
        case 15: 
          { braceStack.push(tLPARENTHESIS);
                                            return process(tLPARENTHESIS);
          }
        case 129: break;
        case 31: 
          { return process(tVIEW);
          }
        case 130: break;
        case 76: 
          { return process(kIMPLICIT);
          }
        case 131: break;
        case 14: 
          { return popBraceStack(tRBRACE);
          }
        case 132: break;
        case 29: 
          { yybegin(COMMON_STATE);
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 133: break;
        case 63: 
          { return process(tMULTILINE_STRING);
          }
        case 134: break;
        case 53: 
          { return process(kFINAL);
          }
        case 135: break;
        case 39: 
          { return process(kTRY);
          }
        case 136: break;
        case 48: 
          { return process(kTYPE);
          }
        case 137: break;
        case 5: 
          { return process(tINNER_CLASS);
          }
        case 138: break;
        case 43: 
          { return process(kLAZY);
          }
        case 139: break;
        case 54: 
          { return process(kSUPER);
          }
        case 140: break;
        case 78: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return process(kCASE);
          }
        case 141: break;
        case 8: 
          { return process(tUNDER);
          }
        case 142: break;
        case 16: 
          { return popBraceStack(tRPARENTHESIS);
          }
        case 143: break;
        case 27: 
          { return process(tSYMBOL);
          }
        case 144: break;
        case 17: 
          { return process(tASSIGN);
          }
        case 145: break;
        case 37: 
          { braceStack.push(tLBRACE);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLBRACE);
          }
        case 146: break;
        case 67: 
          { return process(kIMPORT);
          }
        case 147: break;
        case 73: 
          { return process(kABSTRACT);
          }
        case 148: break;
        case 23: 
          { return process(tFLOAT);
          }
        case 149: break;
        case 32: 
          { return process(kIF);
          }
        case 150: break;
        case 36: 
          { return process(tCHAR);
          }
        case 151: break;
        case 9: 
          { yybegin(WAIT_FOR_XML);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 152: break;
        case 62: 
          { return process(kWHILE);
          }
        case 153: break;
        case 35: 
          { return process(kDEF);
          }
        case 154: break;
        case 44: 
          { return process(kELSE);
          }
        case 155: break;
        case 22: 
          { yybegin(COMMON_STATE);
                                            yypushback(yytext().length());
          }
        case 156: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
