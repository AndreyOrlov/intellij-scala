/* The following code was generated by JFlex 1.4.1 on 03.02.09 17:18 */

package org.jetbrains.plugins.scala.lang.lexer.core;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.*;
import java.lang.reflect.Field;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypesEx;
import org.jetbrains.plugins.scala.lang.lexer.ScalaTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 03.02.09 17:18 from the specification file
 * <tt>scala.flex</tt>
 */
public class _ScalaCoreLexer implements FlexLexer, ScalaTokenTypesEx {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int COMMON_STATE = 1;
  public static final int YYINITIAL = 0;
  public static final int NEW_LINE_ALLOWED = 2;
  public static final int NEW_LINE_DEPRECATED = 1;
  public static final int PROCESS_NEW_LINE = 3;
  public static final int WAIT_FOR_XML = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\33\1\100\1\35\1\0\1\100\1\75\16\33\4\0\1\100\1\22"+
    "\1\41\1\23\1\32\1\65\1\24\1\40\1\107\1\67\1\24\1\13"+
    "\1\60\1\14\1\10\1\30\1\3\1\73\1\72\5\6\1\5\1\74"+
    "\1\25\1\61\1\64\1\62\1\63\1\101\1\26\1\37\1\7\1\102"+
    "\1\17\1\11\1\15\5\32\1\1\6\32\1\52\1\103\6\32\1\66"+
    "\1\27\1\70\1\24\1\34\1\21\1\43\1\104\1\42\1\20\1\12"+
    "\1\16\1\114\1\45\1\54\1\105\1\113\1\2\1\53\1\47\1\50"+
    "\1\110\1\56\1\51\1\46\1\44\1\36\1\112\1\57\1\4\1\55"+
    "\1\111\1\106\1\31\1\71\1\24\6\33\1\76\32\33\2\0\4\32"+
    "\4\0\1\32\2\0\1\33\7\0\1\32\4\0\1\32\5\0\27\32"+
    "\1\0\37\32\1\0\u013f\32\31\0\162\32\4\0\14\32\16\0\5\32"+
    "\11\0\1\32\21\0\130\33\5\0\23\33\12\0\1\32\13\0\1\32"+
    "\1\0\3\32\1\0\1\32\1\0\24\32\1\0\54\32\1\0\46\32"+
    "\1\0\5\32\4\0\202\32\1\0\4\33\3\0\105\32\1\0\46\32"+
    "\2\0\2\32\6\0\20\32\41\0\46\32\2\0\1\32\7\0\47\32"+
    "\11\0\21\33\1\0\27\33\1\0\3\33\1\0\1\33\1\0\2\33"+
    "\1\0\1\33\13\0\33\32\5\0\3\32\15\0\4\33\14\0\6\33"+
    "\13\0\32\32\5\0\13\32\16\33\7\0\12\33\4\0\2\32\1\33"+
    "\143\32\1\0\1\32\10\33\1\0\6\33\2\32\2\33\1\0\4\33"+
    "\2\32\12\33\3\32\2\0\1\32\17\0\1\33\1\32\1\33\36\32"+
    "\33\33\2\0\3\32\60\0\46\32\13\33\1\32\u014f\0\3\33\66\32"+
    "\2\0\1\33\1\32\20\33\2\0\1\32\4\33\3\0\12\32\2\33"+
    "\2\0\12\33\21\0\3\33\1\0\10\32\2\0\2\32\2\0\26\32"+
    "\1\0\7\32\1\0\1\32\3\0\4\32\2\0\1\33\1\32\7\33"+
    "\2\0\2\33\2\0\3\33\11\0\1\33\4\0\2\32\1\0\3\32"+
    "\2\33\2\0\12\33\4\32\15\0\3\33\1\0\6\32\4\0\2\32"+
    "\2\0\26\32\1\0\7\32\1\0\2\32\1\0\2\32\1\0\2\32"+
    "\2\0\1\33\1\0\5\33\4\0\2\33\2\0\3\33\13\0\4\32"+
    "\1\0\1\32\7\0\14\33\3\32\14\0\3\33\1\0\11\32\1\0"+
    "\3\32\1\0\26\32\1\0\7\32\1\0\2\32\1\0\5\32\2\0"+
    "\1\33\1\32\10\33\1\0\3\33\1\0\3\33\2\0\1\32\17\0"+
    "\2\32\2\33\2\0\12\33\1\0\1\32\17\0\3\33\1\0\10\32"+
    "\2\0\2\32\2\0\26\32\1\0\7\32\1\0\2\32\1\0\5\32"+
    "\2\0\1\33\1\32\6\33\3\0\2\33\2\0\3\33\10\0\2\33"+
    "\4\0\2\32\1\0\3\32\4\0\12\33\1\0\1\32\20\0\1\33"+
    "\1\32\1\0\6\32\3\0\3\32\1\0\4\32\3\0\2\32\1\0"+
    "\1\32\1\0\2\32\3\0\2\32\3\0\3\32\3\0\10\32\1\0"+
    "\3\32\4\0\5\33\3\0\3\33\1\0\4\33\11\0\1\33\17\0"+
    "\11\33\11\0\1\32\7\0\3\33\1\0\10\32\1\0\3\32\1\0"+
    "\27\32\1\0\12\32\1\0\5\32\4\0\7\33\1\0\3\33\1\0"+
    "\4\33\7\0\2\33\11\0\2\32\4\0\12\33\22\0\2\33\1\0"+
    "\10\32\1\0\3\32\1\0\27\32\1\0\12\32\1\0\5\32\2\0"+
    "\1\33\1\32\7\33\1\0\3\33\1\0\4\33\7\0\2\33\7\0"+
    "\1\32\1\0\2\32\4\0\12\33\22\0\2\33\1\0\10\32\1\0"+
    "\3\32\1\0\27\32\1\0\20\32\4\0\6\33\2\0\3\33\1\0"+
    "\4\33\11\0\1\33\10\0\2\32\4\0\12\33\22\0\2\33\1\0"+
    "\22\32\3\0\30\32\1\0\11\32\1\0\1\32\2\0\7\32\3\0"+
    "\1\33\4\0\6\33\1\0\1\33\1\0\10\33\22\0\2\33\15\0"+
    "\60\32\1\33\2\32\7\33\4\0\10\32\10\33\1\0\12\33\47\0"+
    "\2\32\1\0\1\32\2\0\2\32\1\0\1\32\2\0\1\32\6\0"+
    "\4\32\1\0\7\32\1\0\3\32\1\0\1\32\1\0\1\32\2\0"+
    "\2\32\1\0\4\32\1\33\2\32\6\33\1\0\2\33\1\32\2\0"+
    "\5\32\1\0\1\32\1\0\6\33\2\0\12\33\2\0\2\32\42\0"+
    "\1\32\27\0\2\33\6\0\12\33\13\0\1\33\1\0\1\33\1\0"+
    "\1\33\4\0\2\33\10\32\1\0\42\32\6\0\24\33\1\0\2\33"+
    "\4\32\4\0\10\33\1\0\44\33\11\0\1\33\71\0\42\32\1\0"+
    "\5\32\1\0\2\32\1\0\7\33\3\0\4\33\6\0\12\33\6\0"+
    "\6\32\4\33\106\0\46\32\12\0\51\32\7\0\132\32\5\0\104\32"+
    "\5\0\122\32\6\0\7\32\1\0\77\32\1\0\1\32\1\0\4\32"+
    "\2\0\7\32\1\0\1\32\1\0\4\32\2\0\47\32\1\0\1\32"+
    "\1\0\4\32\2\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32"+
    "\1\0\1\32\1\0\4\32\2\0\7\32\1\0\7\32\1\0\27\32"+
    "\1\0\37\32\1\0\1\32\1\0\4\32\2\0\7\32\1\0\47\32"+
    "\1\0\23\32\16\0\11\33\56\0\125\32\14\0\u026c\32\2\0\10\32"+
    "\12\0\32\32\5\0\113\32\3\0\3\32\17\0\15\32\1\0\4\32"+
    "\3\33\13\0\22\32\3\33\13\0\22\32\2\33\14\0\15\32\1\0"+
    "\3\32\1\0\2\33\14\0\64\32\40\33\3\0\1\32\3\0\2\32"+
    "\1\33\2\0\12\33\41\0\3\33\2\0\12\33\6\0\130\32\10\0"+
    "\51\32\1\33\126\0\35\32\3\0\14\33\4\0\14\33\12\0\12\33"+
    "\36\32\2\0\5\32\u038b\0\154\32\224\0\234\32\4\0\132\32\6\0"+
    "\26\32\2\0\6\32\2\0\46\32\2\0\6\32\2\0\10\32\1\0"+
    "\1\32\1\0\1\32\1\0\1\32\1\0\37\32\2\0\65\32\1\0"+
    "\7\32\1\0\1\32\3\0\3\32\1\0\7\32\3\0\4\32\2\0"+
    "\6\32\4\0\15\32\5\0\3\32\1\0\7\32\17\0\4\33\30\0"+
    "\1\77\1\77\5\33\20\0\2\32\23\0\1\32\13\0\4\33\6\0"+
    "\6\33\1\0\1\32\15\0\1\32\40\0\22\32\36\0\15\33\4\0"+
    "\1\33\3\0\6\33\27\0\1\32\4\0\1\32\2\0\12\32\1\0"+
    "\1\32\3\0\5\32\6\0\1\32\1\0\1\32\1\0\1\32\1\0"+
    "\4\32\1\0\3\32\1\0\7\32\3\0\3\32\5\0\5\32\26\0"+
    "\44\32\14\0\1\116\1\0\1\24\77\0\1\115\u0e32\0\3\32\31\0"+
    "\11\32\6\33\1\0\5\32\2\0\5\32\4\0\126\32\2\0\2\33"+
    "\2\0\3\32\1\0\137\32\5\0\50\32\4\0\136\32\21\0\30\32"+
    "\70\0\20\32\u0200\0\u19b6\32\112\0\u51a6\32\132\0\u048d\32\u0773\0\u2ba4\32"+
    "\u215c\0\u012e\32\2\0\73\32\225\0\7\32\14\0\5\32\5\0\1\32"+
    "\1\33\12\32\1\0\15\32\1\0\5\32\1\0\1\32\1\0\2\32"+
    "\1\0\2\32\1\0\154\32\41\0\u016b\32\22\0\100\32\2\0\66\32"+
    "\50\0\15\32\3\0\20\33\20\0\4\33\17\0\2\32\30\0\3\32"+
    "\31\0\1\32\6\0\5\32\1\0\207\32\2\0\1\33\4\0\1\32"+
    "\13\0\12\33\7\0\32\32\4\0\1\32\1\0\32\32\12\0\132\32"+
    "\3\0\6\32\2\0\6\32\2\0\6\32\2\0\3\32\3\0\2\32"+
    "\3\0\2\32\22\0\3\33\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\2\3\1\4\4\2\1\1\1\5"+
    "\1\6\1\7\2\2\1\10\1\11\1\1\1\12\13\2"+
    "\1\13\1\14\1\15\2\2\1\16\1\17\1\20\1\21"+
    "\1\11\1\22\1\23\2\2\1\24\1\25\1\15\1\26"+
    "\1\27\1\30\17\31\1\32\24\31\4\33\1\34\1\35"+
    "\2\36\2\2\2\3\2\0\1\37\1\0\2\37\6\2"+
    "\1\40\1\0\1\2\1\0\2\2\1\0\1\41\1\0"+
    "\3\42\1\0\1\12\1\0\1\43\16\2\1\44\4\2"+
    "\1\24\1\45\1\25\1\46\1\47\2\0\3\2\1\50"+
    "\2\0\2\51\1\52\2\51\1\52\1\51\1\52\5\51"+
    "\1\52\3\51\1\0\1\53\3\0\1\2\1\0\4\3"+
    "\2\0\1\37\1\0\3\2\1\54\1\2\1\55\3\2"+
    "\1\0\1\56\3\42\2\0\1\43\1\0\10\2\1\57"+
    "\3\2\1\60\12\2\1\61\2\0\1\62\2\0\3\2"+
    "\1\63\1\64\3\0\1\65\1\0\1\65\12\0\1\66"+
    "\2\0\1\67\4\0\1\70\2\3\1\0\1\71\4\2"+
    "\1\72\1\2\6\0\2\2\1\73\2\2\1\74\1\75"+
    "\1\2\1\76\2\2\1\77\11\2\1\100\4\0\3\2"+
    "\1\72\1\0\1\65\20\0\1\3\1\2\1\101\1\2"+
    "\1\102\1\2\5\0\1\103\1\104\1\0\2\2\1\105"+
    "\1\106\1\2\1\107\4\2\1\110\2\2\1\111\1\112"+
    "\2\0\3\2\5\0\1\113\5\0\4\2\2\0\1\114"+
    "\2\0\3\2\1\115\1\116\1\2\1\117\2\2\1\120"+
    "\2\0\3\2\7\0\1\65\4\0\1\121\1\122\1\123"+
    "\1\2\3\0\6\2\2\0\1\124\1\2\1\125\12\0"+
    "\1\72\2\0\2\2\1\126\1\127\1\130\1\131\2\0"+
    "\1\2\1\72\7\0\2\2\2\0\1\132\4\0\1\133"+
    "\1\0\1\133\1\2\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229"+
    "\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4\0\u0403\0\u0452\0\u04a1"+
    "\0\u04f0\0\u053f\0\u03b4\0\u058e\0\u05dd\0\u01da\0\u062c\0\u067b"+
    "\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4\0\u08f3"+
    "\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u018b\0\u018b\0\u0a7e\0\u0acd"+
    "\0\u0b1c\0\u018b\0\u018b\0\u018b\0\u018b\0\u018b\0\u0b6b\0\u0bba"+
    "\0\u0c09\0\u0c58\0\u018b\0\u018b\0\u0ca7\0\u018b\0\u018b\0\u018b"+
    "\0\u018b\0\u01da\0\u0229\0\u0278\0\u02c7\0\u0316\0\u0365\0\u03b4"+
    "\0\u0403\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u0cf6"+
    "\0\u067b\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0806\0\u0855\0\u08a4"+
    "\0\u08f3\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0ca7\0\u0acd\0\u0b1c"+
    "\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u018b\0\u0d45\0\u0d94\0\u0de3"+
    "\0\u0e32\0\u0e81\0\u018b\0\u0ed0\0\u0f1f\0\u0f6e\0\u0fbd\0\u100c"+
    "\0\u105b\0\u10aa\0\u10f9\0\u1148\0\u018b\0\u1197\0\u11e6\0\u1235"+
    "\0\u1284\0\u12d3\0\u1322\0\u1371\0\u01da\0\u04a1\0\u018b\0\u13c0"+
    "\0\u140f\0\u145e\0\u14ad\0\u14fc\0\u154b\0\u159a\0\u15e9\0\u1638"+
    "\0\u15e9\0\u1687\0\u16d6\0\u1725\0\u1774\0\u17c3\0\u1812\0\u1861"+
    "\0\u18b0\0\u18ff\0\u194e\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9"+
    "\0\u1b28\0\u1b77\0\u01da\0\u1bc6\0\u1c15\0\u1c64\0\u1cb3\0\u03b4"+
    "\0\u03b4\0\u03b4\0\u03b4\0\u03b4\0\u1d02\0\u1d51\0\u1da0\0\u1def"+
    "\0\u1e3e\0\u03b4\0\u1e8d\0\u1edc\0\u018b\0\u1f2b\0\u1f7a\0\u1fc9"+
    "\0\u2018\0\u018b\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2"+
    "\0\u2241\0\u2290\0\u22df\0\u232e\0\u0e32\0\u237d\0\u018b\0\u23cc"+
    "\0\u241b\0\u03b4\0\u246a\0\u24b9\0\u2508\0\u2557\0\u25a6\0\u25f5"+
    "\0\u2644\0\u25f5\0\u2693\0\u26e2\0\u2731\0\u2780\0\u27cf\0\u281e"+
    "\0\u286d\0\u01da\0\u04a1\0\u28bc\0\u290b\0\u295a\0\u018b\0\u29a9"+
    "\0\u29f8\0\u2a47\0\u2a96\0\u2ae5\0\u018b\0\u2b34\0\u2b83\0\u2bd2"+
    "\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u01da\0\u2dfb"+
    "\0\u2e4a\0\u2e99\0\u01da\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024"+
    "\0\u3073\0\u30c2\0\u3111\0\u3160\0\u31af\0\u018b\0\u31fe\0\u324d"+
    "\0\u018b\0\u329c\0\u32eb\0\u333a\0\u3389\0\u33d8\0\u01da\0\u01da"+
    "\0\u3427\0\u3476\0\u1f2b\0\u34c5\0\u3514\0\u018b\0\u3563\0\u35b2"+
    "\0\u3601\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c\0\u37db\0\u382a"+
    "\0\u018b\0\u3879\0\u38c8\0\u018b\0\u3917\0\u3966\0\u39b5\0\u3a04"+
    "\0\u01da\0\u3a53\0\u018b\0\u3aa2\0\u01da\0\u3af1\0\u3b40\0\u3b8f"+
    "\0\u3bde\0\u140f\0\u3c2d\0\u3c7c\0\u2a47\0\u3ccb\0\u3d1a\0\u3d69"+
    "\0\u3db8\0\u3e07\0\u3e56\0\u3ea5\0\u3ef4\0\u3f43\0\u01da\0\u01da"+
    "\0\u3f92\0\u01da\0\u3fe1\0\u4030\0\u01da\0\u407f\0\u40ce\0\u411d"+
    "\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u42f7\0\u01da\0\u4346"+
    "\0\u4395\0\u43e4\0\u4433\0\u4482\0\u44d1\0\u4520\0\u1e8d\0\u456f"+
    "\0\u45be\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u4749\0\u4798\0\u47e7"+
    "\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u4a10\0\u4a5f"+
    "\0\u4aae\0\u2644\0\u4afd\0\u01da\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39"+
    "\0\u4c88\0\u4cd7\0\u4d26\0\u4d75\0\u01da\0\u01da\0\u4dc4\0\u4e13"+
    "\0\u4e62\0\u01da\0\u01da\0\u4eb1\0\u01da\0\u4f00\0\u4f4f\0\u4f9e"+
    "\0\u4fed\0\u01da\0\u503c\0\u508b\0\u01da\0\u01da\0\u50da\0\u5129"+
    "\0\u5178\0\u51c7\0\u5216\0\u5265\0\u52b4\0\u5303\0\u5352\0\u53a1"+
    "\0\u53f0\0\u543f\0\u548e\0\u54dd\0\u552c\0\u557b\0\u55ca\0\u5619"+
    "\0\u5668\0\u56b7\0\u5706\0\u5755\0\u018b\0\u57a4\0\u57f3\0\u5842"+
    "\0\u5891\0\u58e0\0\u01da\0\u01da\0\u592f\0\u01da\0\u597e\0\u59cd"+
    "\0\u01da\0\u5a1c\0\u5a6b\0\u5aba\0\u5b09\0\u5b58\0\u5ba7\0\u5bf6"+
    "\0\u5c45\0\u5c94\0\u5ce3\0\u5d32\0\u5d81\0\u5d81\0\u5dd0\0\u5e1f"+
    "\0\u5e6e\0\u5ebd\0\u01da\0\u01da\0\u01da\0\u5f0c\0\u5f5b\0\u5faa"+
    "\0\u5ff9\0\u6048\0\u6097\0\u60e6\0\u6135\0\u6184\0\u61d3\0\u6222"+
    "\0\u6271\0\u01da\0\u62c0\0\u01da\0\u630f\0\u635e\0\u63ad\0\u63fc"+
    "\0\u644b\0\u649a\0\u64e9\0\u6538\0\u6587\0\u65d6\0\u3c2d\0\u6625"+
    "\0\u6674\0\u66c3\0\u6712\0\u01da\0\u01da\0\u01da\0\u01da\0\u6761"+
    "\0\u67b0\0\u67ff\0\u456f\0\u684e\0\u689d\0\u68ec\0\u693b\0\u698a"+
    "\0\u69d9\0\u6a28\0\u6a77\0\u6ac6\0\u6b15\0\u6b64\0\u01da\0\u6bb3"+
    "\0\u6c02\0\u6c51\0\u6ca0\0\u018b\0\u6cef\0\u01da\0\u6d3e\0\u6d8d"+
    "\0\u6ddc\0\u6e2b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\7\2\12\1\7\1\13"+
    "\1\7\1\14\2\15\1\7\1\16\1\7\1\17\1\20"+
    "\1\15\1\21\1\15\1\22\1\23\1\24\1\25\1\15"+
    "\1\7\1\6\1\26\1\27\2\7\1\30\1\31\1\32"+
    "\1\33\1\34\1\7\1\35\1\36\1\37\1\40\1\7"+
    "\1\41\1\42\1\43\1\7\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\15\1\52\1\53\1\54\1\55\3\12"+
    "\3\27\1\56\1\15\4\7\1\57\1\60\1\61\1\7"+
    "\1\62\2\7\1\63\1\64\1\6\1\7\1\10\1\11"+
    "\1\7\2\12\1\7\1\13\1\7\1\14\2\15\1\7"+
    "\1\16\1\7\1\17\1\20\1\15\1\21\1\15\1\22"+
    "\1\23\1\24\1\25\1\15\1\7\1\6\1\26\1\27"+
    "\2\7\1\30\1\31\1\32\1\33\1\34\1\7\1\35"+
    "\1\36\1\37\1\40\1\7\1\41\1\42\1\43\1\7"+
    "\1\44\1\45\1\46\1\65\1\50\1\51\1\15\1\52"+
    "\1\66\1\67\1\70\3\12\3\27\1\56\1\15\4\7"+
    "\1\57\1\60\1\61\1\7\1\62\2\7\1\63\1\64"+
    "\1\71\1\72\1\73\1\74\1\72\2\75\1\72\1\76"+
    "\1\72\1\77\2\100\1\72\1\101\1\72\1\102\1\103"+
    "\1\100\1\104\1\100\1\105\1\100\1\106\1\107\1\100"+
    "\1\72\1\71\1\72\1\110\2\72\1\111\1\112\1\113"+
    "\1\114\1\115\1\72\1\116\1\117\1\120\1\121\1\72"+
    "\1\122\1\123\1\124\1\72\1\125\2\71\1\126\1\127"+
    "\1\130\1\100\4\71\3\75\3\110\1\71\1\100\4\72"+
    "\1\131\1\132\1\133\1\72\1\134\2\72\2\71\23\135"+
    "\1\136\1\135\1\137\2\135\1\140\4\135\1\141\37\135"+
    "\3\141\1\142\16\135\64\143\1\144\32\143\120\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\1\7"+
    "\1\146\14\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\2\147\1\150\1\151\1\152\1\150"+
    "\1\0\1\153\2\154\2\0\4\155\51\0\2\150\1\152"+
    "\23\0\2\147\1\12\1\0\2\12\1\0\1\153\2\154"+
    "\2\0\4\155\51\0\3\12\25\0\1\156\1\0\2\156"+
    "\63\0\3\156\23\0\1\7\1\157\1\7\1\160\3\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\15\0\2\15\5\0\10\15\30\0"+
    "\4\15\13\0\1\15\16\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\1\7"+
    "\1\161\4\7\1\162\3\7\1\163\3\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\1\7\1\164\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\6\7\1\165\7\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\2\0\21\166"+
    "\1\167\5\166\1\170\5\166\1\0\3\166\1\0\33\166"+
    "\3\0\17\166\13\0\2\15\5\0\1\171\7\15\30\0"+
    "\4\15\13\0\1\15\30\0\2\15\5\0\3\15\1\172"+
    "\4\15\30\0\4\15\13\0\1\15\30\0\2\15\5\0"+
    "\10\15\4\0\1\173\23\0\4\15\13\0\1\15\30\0"+
    "\2\15\5\0\6\15\1\174\1\15\30\0\4\15\13\0"+
    "\1\15\52\0\1\27\37\0\4\27\16\0\1\175\2\176"+
    "\1\175\1\176\2\175\1\176\1\175\2\176\2\177\4\176"+
    "\1\175\5\177\1\200\1\177\1\201\1\176\1\175\1\176"+
    "\1\0\2\176\1\0\1\175\16\176\2\175\4\177\7\175"+
    "\1\0\3\175\1\177\4\176\2\175\5\176\2\175\27\202"+
    "\1\203\5\202\1\0\3\202\1\204\33\202\1\0\21\202"+
    "\1\0\1\7\1\205\5\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\1\7\1\206"+
    "\14\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\16\7\12\0\3\7"+
    "\1\0\1\7\3\0\2\7\1\207\1\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\3\7\1\210\3\7\1\211"+
    "\3\7\1\212\2\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\1\7\1\213"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\1\214\1\7"+
    "\2\0\16\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\7\7\1\0\1\7\1\215\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\1\216\1\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\16\7\12\0\3\7"+
    "\1\0\1\7\3\0\2\7\1\217\1\7\2\0\2\7"+
    "\1\220\2\7\3\0\7\7\1\0\1\7\1\221\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\16\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\1\7\1\222\14\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\2\7\2\0\1\7\1\223\2\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\11\7\1\224\4\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\12\7\1\225\3\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\3\7\1\226\6\7\1\227\3\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\15\0\2\15\5\0\10\15\30\0\1\15\1\230\2\15"+
    "\13\0\1\15\30\0\2\15\5\0\3\15\1\231\4\15"+
    "\30\0\4\15\13\0\1\15\30\0\1\15\1\232\5\0"+
    "\3\15\1\233\4\15\30\0\3\15\1\234\13\0\1\15"+
    "\101\0\1\235\116\0\1\236\33\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\1\7\1\237\5\7\1\240\6\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\1\7\1\241\14\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\15\0\2\15\5\0\10\15"+
    "\30\0\1\15\1\242\2\15\13\0\1\15\52\0\1\110"+
    "\37\0\4\110\40\0\1\243\121\0\1\244\121\0\1\174"+
    "\66\0\3\245\1\246\1\245\2\246\1\245\1\247\1\245"+
    "\1\250\3\245\1\251\4\245\1\252\1\245\1\252\1\245"+
    "\1\253\4\245\1\254\1\141\4\245\1\255\6\245\1\256"+
    "\1\245\1\257\1\245\1\260\1\245\1\261\2\252\1\262"+
    "\1\263\1\264\1\245\4\252\3\246\4\265\16\245\64\0"+
    "\1\266\33\0\2\267\1\0\1\267\2\0\1\267\1\0"+
    "\2\267\2\0\4\267\1\0\1\270\7\0\1\267\1\0"+
    "\1\267\1\0\2\267\2\0\16\267\21\0\1\271\4\267"+
    "\2\0\5\267\3\0\7\7\1\0\2\7\2\15\4\7"+
    "\1\0\7\15\1\272\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\2\0\4\15\4\0\3\7\1\0\1\7\2\0"+
    "\1\15\4\7\2\0\5\7\3\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\1\7\1\273\3\7\12\0\1\274\107\0\2\147\1\150"+
    "\1\0\1\152\1\150\1\0\1\153\2\154\2\0\4\155"+
    "\51\0\2\150\1\152\25\0\1\275\1\0\3\275\1\0"+
    "\2\275\2\0\4\275\16\0\1\275\2\0\2\275\26\0"+
    "\3\275\5\0\1\275\1\0\1\275\15\0\1\152\1\0"+
    "\2\152\1\0\1\156\2\154\2\0\4\155\51\0\3\152"+
    "\23\0\2\276\1\156\1\276\2\156\1\276\1\0\2\277"+
    "\2\300\4\276\1\301\7\300\1\302\1\276\1\0\1\276"+
    "\1\274\2\276\2\0\16\276\2\0\4\300\4\0\3\156"+
    "\4\274\1\300\4\276\2\0\5\276\5\0\1\303\1\0"+
    "\2\303\4\0\2\304\55\0\3\303\25\0\1\156\1\0"+
    "\2\156\2\0\2\154\2\0\4\155\51\0\3\156\23\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\4\7\1\305\11\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\2\7\1\306\13\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\1\7\1\307"+
    "\5\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\16\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\3\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\7\7\1\310\6\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\5\7"+
    "\1\311\10\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\7\7\1\0\2\7\2\0\1\7"+
    "\1\312\2\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\2\0\21\166\1\313\5\166\1\170\5\166\1\0"+
    "\37\166\1\0\21\166\13\243\2\171\5\243\1\314\7\171"+
    "\30\243\4\171\13\243\1\171\15\243\13\0\2\15\5\0"+
    "\1\15\1\315\6\15\30\0\4\15\13\0\1\15\107\0"+
    "\1\316\24\0\35\174\1\0\37\174\1\0\21\174\27\0"+
    "\1\317\10\0\1\317\57\0\7\320\1\0\2\320\2\0"+
    "\4\320\6\0\1\317\2\0\2\320\1\321\1\0\2\320"+
    "\1\317\1\0\16\320\12\0\3\320\1\0\1\320\3\0"+
    "\4\320\2\0\5\320\15\0\2\322\5\0\10\322\6\0"+
    "\1\317\21\0\4\322\13\0\1\322\15\0\3\175\1\323"+
    "\2\175\1\323\4\175\2\177\5\175\10\177\3\175\1\0"+
    "\1\324\23\175\4\177\4\175\2\323\1\175\1\0\3\175"+
    "\1\177\15\175\27\202\1\203\5\202\1\0\3\202\1\325"+
    "\33\202\1\0\56\202\1\0\37\202\1\0\21\202\41\0"+
    "\1\326\56\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\1\7\1\327\14\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\2\7\1\330\1\7\1\331"+
    "\11\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\4\7\1\332\11\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\7\7\1\333\2\7\1\334"+
    "\3\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\1\335\1\7\2\0\1\7\1\336"+
    "\11\7\1\337\2\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\16\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\1\340"+
    "\4\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\1\7\1\341\14\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\16\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\1\342\4\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\15\7\1\343\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\3\0\1\7\1\344\5\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\16\7"+
    "\12\0\3\7\1\0\1\7\3\0\3\7\1\345\2\0"+
    "\5\7\3\0\7\7\1\0\1\7\1\346\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\16\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\2\7\1\347\11\7\1\350\1\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\2\7\1\351\13\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\16\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\1\352\4\7\3\0\7\7\1\0"+
    "\1\7\1\353\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\12\7"+
    "\1\354\3\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\2\7\1\355"+
    "\13\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\2\356\1\0\1\356\2\0\1\356\1\0"+
    "\2\356\2\0\4\356\1\0\1\357\7\0\1\356\1\0"+
    "\1\356\1\0\2\356\2\0\16\356\21\0\1\360\4\356"+
    "\2\0\5\356\3\0\2\361\1\0\1\361\2\0\1\361"+
    "\1\0\2\361\2\0\4\361\1\0\1\362\7\0\1\361"+
    "\1\0\1\361\1\0\2\361\2\0\16\361\21\0\1\363"+
    "\4\361\2\0\5\361\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\1\364"+
    "\15\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\6\7\1\365\3\7"+
    "\1\366\3\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\1\7\1\367\5\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\7\7\1\370\6\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\2\0\22\243\1\371\74\243\23\0"+
    "\1\372\76\0\1\373\1\0\2\373\1\0\1\374\2\375"+
    "\2\0\4\376\51\0\3\373\25\0\1\374\1\0\2\374"+
    "\63\0\3\374\24\0\1\377\1\0\1\u0100\162\0\1\u0101"+
    "\3\0\1\u0102\100\0\1\u0103\61\0\7\376\1\0\2\376"+
    "\2\0\4\376\11\0\3\376\1\0\2\376\2\0\16\376"+
    "\12\0\3\376\1\0\1\376\3\0\4\376\2\0\5\376"+
    "\45\0\1\u0104\65\0\1\u0105\147\0\1\u0106\127\0\1\u0107"+
    "\116\0\1\u0108\125\0\1\252\60\0\1\252\72\0\2\u0109"+
    "\1\0\1\u0109\2\0\1\u0109\1\0\2\u0109\1\0\1\252"+
    "\4\u0109\1\0\1\u010a\2\0\1\252\4\0\1\u0109\1\0"+
    "\1\u0109\1\0\2\u0109\2\0\16\u0109\5\0\1\252\13\0"+
    "\1\u010b\4\u0109\2\0\5\u0109\3\0\2\u010c\1\0\1\u010c"+
    "\2\0\1\u010c\1\0\2\u010c\2\0\4\u010c\1\0\1\u010d"+
    "\7\0\1\u010c\1\0\1\u010c\1\0\2\u010c\2\0\16\u010c"+
    "\21\0\1\u010e\4\u010c\2\0\5\u010c\16\0\1\u010f\51\0"+
    "\1\u0110\31\0\2\267\1\0\1\267\2\0\1\267\1\0"+
    "\2\267\2\0\4\267\11\0\1\267\1\0\1\267\1\0"+
    "\2\267\2\0\16\267\22\0\4\267\2\0\5\267\3\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\13\7\1\u0111\2\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\2\276"+
    "\1\0\1\276\2\0\1\276\1\0\2\276\2\300\4\276"+
    "\1\301\7\300\1\302\1\276\1\0\1\276\1\274\2\276"+
    "\2\0\16\276\2\0\4\300\7\0\4\274\1\300\4\276"+
    "\2\0\5\276\3\0\2\147\1\275\1\0\3\275\1\274"+
    "\2\275\2\0\4\275\16\0\1\275\2\0\2\275\26\0"+
    "\3\275\5\0\1\275\1\0\1\275\13\0\7\276\1\0"+
    "\2\276\2\0\4\276\11\0\2\276\1\u0112\1\0\2\276"+
    "\2\0\16\276\12\0\3\276\1\0\1\276\3\0\4\276"+
    "\2\0\5\276\3\0\7\276\1\0\2\276\2\304\4\276"+
    "\11\0\2\276\1\u0112\1\0\2\276\2\0\16\276\12\0"+
    "\3\276\1\0\1\276\3\0\4\276\2\0\5\276\15\0"+
    "\2\300\5\0\10\300\30\0\4\300\13\0\1\300\15\0"+
    "\21\301\1\u0113\5\301\1\u0114\5\301\1\0\3\301\1\0"+
    "\33\301\3\0\17\301\3\0\1\303\1\0\2\303\6\0"+
    "\4\155\51\0\3\303\25\0\1\303\1\0\2\303\63\0"+
    "\3\303\23\0\7\7\1\0\1\7\1\u0115\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\16\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\1\7\1\u0116\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\16\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\4\7\1\u0117\11\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\3\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\10\7\1\u0118\5\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\1\7"+
    "\1\u0119\14\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\2\0\13\243\2\171\5\243\1\314\1\u011a"+
    "\6\171\30\243\4\171\13\243\1\171\15\243\13\0\2\15"+
    "\5\0\1\u011b\7\15\30\0\4\15\13\0\1\15\110\0"+
    "\1\u011c\24\0\7\320\1\0\2\320\2\0\4\320\11\0"+
    "\2\320\1\321\1\0\2\320\2\0\16\320\12\0\3\320"+
    "\1\0\1\320\3\0\4\320\2\0\5\320\3\0\7\320"+
    "\1\0\2\320\2\322\4\320\1\0\7\322\1\u011d\2\320"+
    "\1\321\1\0\2\320\2\0\16\320\2\0\4\322\4\0"+
    "\3\320\1\0\1\320\2\0\1\322\4\320\2\0\5\320"+
    "\15\0\2\322\5\0\10\322\30\0\4\322\13\0\1\322"+
    "\20\0\1\u011e\2\0\1\u011e\20\0\1\317\10\0\1\317"+
    "\31\0\2\u011e\26\0\1\u011f\1\0\3\u0120\1\0\2\u0120"+
    "\2\0\4\u0120\6\0\1\317\7\0\1\u0120\1\317\1\0"+
    "\2\u0120\26\0\3\u0120\5\0\1\u0120\1\0\1\u0120\12\0"+
    "\41\326\1\u0121\55\326\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\4\7"+
    "\1\u0122\11\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\1\u0123\15\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\1\7\1\u0124\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\16\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\2\7\1\u0125\13\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\6\7\1\u0126\7\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\3\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\4\7\1\u0127\11\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\1\7\1\u0128"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\12\7\1\u0129\3\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\1\7\1\u012a\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\16\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\1\7"+
    "\1\u012b\5\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\16\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\1\7\1\u012c\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\1\7\1\u012d\5\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\16\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\7\7\1\0\1\7\1\u012e\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\16\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\7\7\1\u012f\6\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\1\u0130\1\7\2\0\16\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\1\u0131"+
    "\1\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\1\u0132"+
    "\15\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\1\7\1\u0133\5\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\6\7"+
    "\1\u0134\7\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\1\7\1\u0135\5\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\1\7\1\u0136\5\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\16\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\3\7\1\u0137\12\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\16\0"+
    "\1\u0138\51\0\1\u0139\31\0\2\356\1\0\1\356\2\0"+
    "\1\356\1\0\2\356\2\0\4\356\11\0\1\356\1\0"+
    "\1\356\1\0\2\356\2\0\16\356\22\0\4\356\2\0"+
    "\5\356\16\0\1\u013a\51\0\1\u013b\31\0\2\361\1\0"+
    "\1\361\2\0\1\361\1\0\2\361\2\0\4\361\11\0"+
    "\1\361\1\0\1\361\1\0\2\361\2\0\16\361\22\0"+
    "\4\361\2\0\5\361\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\16\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\3\7"+
    "\1\u013c\1\7\3\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\2\7\1\u013d"+
    "\13\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\16\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\2\7\1\u013e\2\7"+
    "\2\0\22\243\1\371\1\u013f\73\243\22\0\1\u0140\77\0"+
    "\1\374\1\0\2\374\2\0\2\375\2\0\4\376\51\0"+
    "\3\374\25\0\1\u0141\1\0\2\u0141\4\0\2\u0142\55\0"+
    "\3\u0141\70\0\1\u0143\114\0\1\u0144\123\0\1\u0145\114\0"+
    "\1\u0146\141\0\1\u0147\70\0\1\u0148\1\0\1\u0149\126\0"+
    "\1\u014a\104\0\1\u0148\64\0\1\u014b\150\0\1\u014c\66\0"+
    "\1\u014d\51\0\1\u014e\31\0\2\u0109\1\0\1\u0109\2\0"+
    "\1\u0109\1\0\2\u0109\2\0\4\u0109\11\0\1\u0109\1\0"+
    "\1\u0109\1\0\2\u0109\2\0\16\u0109\22\0\4\u0109\2\0"+
    "\5\u0109\16\0\1\u014f\51\0\1\u0150\31\0\2\u010c\1\0"+
    "\1\u010c\2\0\1\u010c\1\0\2\u010c\2\0\4\u010c\11\0"+
    "\1\u010c\1\0\1\u010c\1\0\2\u010c\2\0\16\u010c\22\0"+
    "\4\u010c\2\0\5\u010c\16\0\1\267\204\0\1\u0151\15\0"+
    "\7\276\1\0\2\276\2\300\4\276\1\0\7\300\1\302"+
    "\2\276\1\u0112\1\0\2\276\2\0\16\276\2\0\4\300"+
    "\4\0\3\276\1\0\1\276\2\0\1\300\4\276\2\0"+
    "\5\276\2\0\21\301\1\u0152\5\301\1\u0114\5\301\1\0"+
    "\37\301\1\0\21\301\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\5\7"+
    "\1\u0153\10\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\7\7\1\0\1\7\1\u0154\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\16\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\6\7\1\u0155\7\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\1\7\1\u0156\5\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\16\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\2\0\13\u0140"+
    "\2\u011b\5\u0140\3\u011b\1\u0157\4\u011b\30\u0140\4\u011b\13\u0140"+
    "\1\u011b\15\u0140\17\0\1\u0158\54\0\1\u0159\25\0\1\175"+
    "\2\0\1\175\20\0\1\317\10\0\1\317\31\0\2\175"+
    "\26\0\1\u015a\1\0\3\u015b\1\0\2\u015b\2\0\4\u015b"+
    "\16\0\1\u015b\2\0\2\u015b\26\0\3\u015b\5\0\1\u015b"+
    "\1\0\1\u015b\15\0\1\u015b\1\0\3\u015b\1\0\2\u015b"+
    "\2\0\4\u015b\16\0\1\u015b\2\0\2\u015b\26\0\3\u015b"+
    "\5\0\1\u015b\1\0\1\u015b\12\0\41\326\1\u015c\55\326"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\4\7\1\u015d\11\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\3\7\1\u015e\12\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\u015f"+
    "\2\7\2\0\16\7\12\0\3\7\1\u015f\1\u0160\2\u015f"+
    "\1\0\4\7\2\0\5\7\3\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\7\7\1\u0161\6\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\15\7"+
    "\1\u0162\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\2\7\1\u0163\13\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\1\7\1\u0164\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\16\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\7\7\1\u0165\6\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\1\u0166\15\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\7\7"+
    "\1\u0167\6\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\7\7\1\u0168"+
    "\6\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\12\7\1\u0169\3\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\3\7\1\u016a\12\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\12\7\1\u016b\3\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\7\7\1\u016c\6\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\2\7\2\0\3\7\1\u016d\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\1\7\1\u016e"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\16\0\1\356\204\0\1\u016f\30\0\1\361\204\0"+
    "\1\u0170\15\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\1\7\1\u0171\14\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\1\7\1\u0172\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\16\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\1\7\1\u0173\14\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\2\0\25\u0140\1\u0174"+
    "\71\u0140\3\0\1\u0141\1\0\2\u0141\6\0\4\376\51\0"+
    "\3\u0141\25\0\1\u0141\1\0\2\u0141\63\0\3\u0141\34\0"+
    "\1\254\116\0\1\u0175\156\0\1\u0176\107\0\1\u0177\146\0"+
    "\1\u0178\65\0\1\u014c\66\0\1\u0179\142\0\1\u017a\62\0"+
    "\1\u017b\161\0\1\254\65\0\1\u0109\204\0\1\u017c\30\0"+
    "\1\u010c\204\0\1\u017d\33\0\1\u017e\100\0\7\7\1\0"+
    "\2\7\2\0\3\7\1\u017f\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\11\7"+
    "\1\u0180\4\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\3\0\1\7\1\u0181\5\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\2\0\13\u0140\2\u011b\5\u0140\3\u011b\1\u0182\4\u011b"+
    "\30\u0140\4\u011b\13\u0140\1\u011b\15\u0140\72\0\1\63\27\0"+
    "\1\64\116\0\1\u0183\1\0\3\u0184\1\0\2\u0184\2\0"+
    "\4\u0184\16\0\1\u0184\2\0\2\u0184\26\0\3\u0184\5\0"+
    "\1\u0184\1\0\1\u0184\15\0\1\u0184\1\0\3\u0184\1\0"+
    "\2\u0184\2\0\4\u0184\16\0\1\u0184\2\0\2\u0184\26\0"+
    "\3\u0184\5\0\1\u0184\1\0\1\u0184\12\0\41\326\1\u0185"+
    "\55\326\35\0\1\u015f\4\0\1\u0186\5\0\1\u0187\24\0"+
    "\4\u015f\17\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\u015f\2\7\2\0\1\u0188\5\7\1\u0189"+
    "\7\7\12\0\3\7\1\u015f\1\u0160\2\u015f\1\0\4\7"+
    "\2\0\5\7\3\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\1\7\1\u018a"+
    "\14\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\3\7\1\u018b"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\16\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\2\7\1\u018c\13\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\12\7\1\u018d\3\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\5\7\1\u018e\10\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\3\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\7\7\1\u018f\6\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\1\u0190"+
    "\15\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\2\7\1\u0191\13\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\21\0\1\u0192\116\0\1\u0193\100\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\4\7\1\u0194\3\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\1\u0195\15\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\2\7\1\u0196\13\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\2\0"+
    "\25\u0140\1\u0197\71\u0140\47\0\1\u0198\117\0\1\u0199\50\0"+
    "\1\u019a\133\0\1\u019b\54\0\1\u019c\23\0\7\376\1\0"+
    "\2\376\2\0\4\376\11\0\3\376\1\u019d\2\376\2\0"+
    "\16\376\12\0\3\376\1\u019d\1\u019e\2\u019d\1\0\4\376"+
    "\2\0\5\376\56\0\1\u019f\62\0\1\254\115\0\1\u01a0"+
    "\116\0\1\u01a1\136\0\1\u01a2\60\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\4\7\1\u01a3\11\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\1\7\1\u01a4"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\13\7\1\u01a5\2\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\2\0\13\u0140\2\u011b\5\u0140\1\u01a6\2\u011b\1\u0182\4\u011b"+
    "\30\u0140\4\u011b\13\u0140\1\u011b\15\u0140\3\0\1\175\1\0"+
    "\3\175\1\0\2\175\2\0\4\175\16\0\1\u01a7\2\0"+
    "\2\175\26\0\3\175\5\0\1\175\1\0\1\175\15\0"+
    "\1\175\1\0\3\175\1\0\2\175\2\0\4\175\16\0"+
    "\1\175\2\0\2\175\26\0\3\175\5\0\1\175\1\0"+
    "\1\175\14\0\1\u01a8\220\0\1\u01a9\13\0\1\7\1\u01aa"+
    "\5\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\16\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\3\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\2\7\1\u01ab"+
    "\1\7\2\0\5\7\3\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\2\7\1\145\1\0\2\7\2\0\1\u01ac"+
    "\15\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\3\7\1\u01ad"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\16\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\3\0"+
    "\7\7\1\0\1\7\1\u01ae\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\16\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\12\7\1\u01af\3\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\41\0\1\u01b0\116\0\1\u01b1"+
    "\60\0\7\7\1\0\1\7\1\u01b2\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\16\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\2\7\1\u01b3\13\7\12\0\3\7\1\0"+
    "\1\7\3\0\4\7\2\0\5\7\3\0\7\7\1\0"+
    "\1\7\1\u01b4\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\2\0\22\u0140\1\u01b5\2\u0140\1\u0197"+
    "\71\u0140\20\0\1\u01b6\151\0\1\u01b7\45\0\1\u01b8\206\0"+
    "\1\252\27\0\1\252\150\0\1\u019d\4\0\1\u01b9\5\0"+
    "\1\u01ba\24\0\4\u019d\67\0\1\u01bb\104\0\1\u01bc\116\0"+
    "\1\u01bd\162\0\1\u01be\13\0\13\u0140\2\u011b\5\u0140\1\u011b"+
    "\1\u01bf\1\u011b\1\u0157\4\u011b\30\u0140\4\u011b\13\u0140\1\u011b"+
    "\15\u0140\40\0\1\317\121\0\1\u01c0\160\0\1\u01c1\12\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\1\7\1\u01c2\14\7\12\0\3\7"+
    "\1\0\1\7\3\0\4\7\2\0\5\7\3\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\2\7\1\145\1\0"+
    "\2\7\2\0\16\7\12\0\3\7\1\0\1\7\3\0"+
    "\3\7\1\u01c3\2\0\5\7\3\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\2\7\1\u01c4\13\7\12\0\3\7\1\0\1\7\3\0"+
    "\4\7\2\0\5\7\3\0\7\7\1\0\1\7\1\u01c5"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\4\7\1\u01c6\11\7"+
    "\12\0\3\7\1\0\1\7\3\0\4\7\2\0\5\7"+
    "\3\0\7\7\1\0\2\7\2\0\4\7\11\0\2\7"+
    "\1\145\1\0\2\7\2\0\2\7\1\u01c7\13\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\105\0"+
    "\1\u01c8\116\0\1\u01c9\14\0\7\7\1\0\1\7\1\u01ca"+
    "\2\0\4\7\11\0\2\7\1\145\1\0\2\7\2\0"+
    "\16\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\2\0\23\u0140\1\u01cb\1\u0140\1\u0174\71\u0140\46\0"+
    "\1\254\62\0\1\252\161\0\1\254\43\0\1\u01cc\220\0"+
    "\1\u01cd\24\0\1\u01b6\207\0\1\u01ce\116\0\1\u01cf\52\0"+
    "\1\u01d0\125\0\1\u01d1\62\0\1\u01d2\105\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\4\7\1\u01d3\11\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\3\0\7\7\1\0\1\7"+
    "\1\u01d4\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\16\7\12\0\3\7\1\0\1\7\3\0\4\7"+
    "\2\0\5\7\41\0\1\u01d5\116\0\1\u01d6\60\0\7\7"+
    "\1\0\2\7\2\0\3\7\1\u01d7\11\0\2\7\1\145"+
    "\1\0\2\7\2\0\16\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\45\0\1\u01d8\160\0\1\u01d9"+
    "\50\0\1\u01da\116\0\1\u01db\145\0\1\267\76\0\1\u01dc"+
    "\112\0\1\u01dd\55\0\7\7\1\0\2\7\2\0\4\7"+
    "\11\0\2\7\1\145\1\0\2\7\2\0\4\7\1\u01de"+
    "\11\7\12\0\3\7\1\0\1\7\3\0\4\7\2\0"+
    "\5\7\3\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\145\1\0\2\7\2\0\1\u01df\15\7\12\0"+
    "\3\7\1\0\1\7\3\0\4\7\2\0\5\7\70\0"+
    "\1\356\116\0\1\361\76\0\1\u01e0\62\0\1\u01e1\172\0"+
    "\1\u0109\116\0\1\u010c\74\0\1\u01dc\53\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\2\7\1\145\1\0\2\7"+
    "\2\0\2\7\1\u01de\13\7\12\0\3\7\1\0\1\7"+
    "\3\0\4\7\2\0\5\7\50\0\1\376\112\0\1\u01e2"+
    "\120\0\1\376\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28282];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\2\3\32\1\2\11\3\1\5\11"+
    "\4\1\2\11\1\1\4\11\2\1\2\3\37\1\1\11"+
    "\3\1\1\3\1\1\1\11\3\1\2\3\2\0\1\1"+
    "\1\0\1\11\10\1\1\0\1\11\1\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\31\1\2\0"+
    "\4\1\2\0\1\11\1\1\1\5\2\1\1\15\1\1"+
    "\1\5\5\1\1\5\2\1\1\3\1\0\1\11\3\0"+
    "\1\1\1\0\1\3\3\5\2\0\1\1\1\0\11\1"+
    "\1\0\1\11\3\1\2\0\1\11\1\0\27\1\1\11"+
    "\2\0\1\11\2\0\5\1\3\0\1\5\1\0\1\15"+
    "\12\0\1\11\2\0\1\11\4\0\1\1\1\5\1\15"+
    "\1\0\7\1\6\0\2\1\1\3\23\1\4\0\4\1"+
    "\1\0\1\5\20\0\1\5\5\1\5\0\2\1\1\0"+
    "\17\1\2\0\3\1\5\0\1\1\5\0\4\1\2\0"+
    "\1\11\2\0\12\1\2\0\3\1\7\0\1\5\4\0"+
    "\4\1\3\0\6\1\2\0\3\1\12\0\1\1\2\0"+
    "\6\1\2\0\2\1\7\0\2\1\2\0\1\1\4\0"+
    "\1\15\1\0\1\5\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[482];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Stack for braces
    private Stack <IElementType> braceStack = new Stack<IElementType>();

    /* Defines, is in this section new line is whitespace or not? */
    public boolean newLineAllowed(){
      if (braceStack.isEmpty()){
        return true;
      } else {
        return ScalaTokenTypes.tLBRACE.equals(braceStack.peek());
      }
    }

    /* Changes state depending on brace stack */
    private void changeState(){
      if (braceStack.isEmpty()) {
        yybegin(YYINITIAL);
      } else if ( tLPARENTHESIS.equals(braceStack.peek()) || tLSQBRACKET.equals(braceStack.peek()) ){
        yybegin(NEW_LINE_DEPRECATED);
      } else {
        yybegin(COMMON_STATE);
      }
    }

    /* removes brace from stack */
    private IElementType popBraceStack(IElementType elem){
     if (
          !braceStack.isEmpty() &&
          (
            (elem.equals(tRSQBRACKET) && tLSQBRACKET.equals(braceStack.peek())) ||
            (elem.equals(tRBRACE) && tLBRACE.equals(braceStack.peek())) ||
            (elem.equals(tRPARENTHESIS) && tLPARENTHESIS.equals(braceStack.peek()))
          )
        ) {
          braceStack.pop();
          return process(elem);
        } else if (elem.equals(tFUNTYPE)) {
          if (!braceStack.isEmpty() && kCASE.equals(braceStack.peek())) {
            braceStack.pop();
          }
          return process(elem);
        } else {
          return process(elem);
        }
    }

    private IElementType process(IElementType type){
        return type;
    }


  public _ScalaCoreLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ScalaCoreLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1810) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 68: 
          { return process(kCATCH);
          }
        case 92: break;
        case 70: 
          { return process(kTRAIT);
          }
        case 93: break;
        case 43: 
          { changeState();
                                            yypushback(yytext().length());
                                            return SCALA_XML_CONTENT_START;
          }
        case 94: break;
        case 34: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSYMBOL);
          }
        case 95: break;
        case 90: 
          { return process(kPROTECTED);
          }
        case 96: break;
        case 37: 
          { return process(tLOWER_BOUND);
          }
        case 97: break;
        case 33: 
          { return process(tLINE_COMMENT);
          }
        case 98: break;
        case 58: 
          { return process(tSH_COMMENT);
          }
        case 99: break;
        case 6: 
          { return process(tCOLON);
          }
        case 100: break;
        case 81: 
          { return process(kEXTENDS);
          }
        case 101: break;
        case 52: 
          { return process(kVAR);
          }
        case 102: break;
        case 2: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tIDENTIFIER);
          }
        case 103: break;
        case 27: 
          { yypushback(yylength());
                                                    changeState();
          }
        case 104: break;
        case 12: 
          { return process(tSEMICOLON);
          }
        case 105: break;
        case 55: 
          { yybegin(WAIT_FOR_XML);
                                                   yypushback(2);
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 106: break;
        case 15: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRPARENTHESIS);
          }
        case 107: break;
        case 78: 
          { return process(kOBJECT);
          }
        case 108: break;
        case 26: 
          { yybegin(WAIT_FOR_XML); return process(tLINE_TERMINATOR);
          }
        case 109: break;
        case 40: 
          { return popBraceStack(tFUNTYPE);
          }
        case 110: break;
        case 1: 
          { return process(tSTUB);
          }
        case 111: break;
        case 64: 
          { return process(kWITH);
          }
        case 112: break;
        case 38: 
          { return process(tUPPER_BOUND);
          }
        case 113: break;
        case 4: 
          { return process(tDOT);
          }
        case 114: break;
        case 76: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tMULTILINE_STRING);
          }
        case 115: break;
        case 72: 
          { return process(kMATCH);
          }
        case 116: break;
        case 11: 
          { return process(tCOMMA);
          }
        case 117: break;
        case 22: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRPARENTHESIS);
          }
        case 118: break;
        case 24: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRBRACE);
          }
        case 119: break;
        case 41: 
          { yypushback(1);
                                                    changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 120: break;
        case 69: 
          { return process(kTHROW);
          }
        case 121: break;
        case 42: 
          { changeState();
                                                    return process(tWHITE_SPACE_IN_LINE);
          }
        case 122: break;
        case 51: 
          { return process(kVAL);
          }
        case 123: break;
        case 85: 
          { return process(kPRIVATE);
          }
        case 124: break;
        case 65: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kFALSE);
          }
        case 125: break;
        case 83: 
          { return process(kFINALLY);
          }
        case 126: break;
        case 82: 
          { return process(kFOR_SOME);
          }
        case 127: break;
        case 62: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTYPE);
          }
        case 128: break;
        case 29: 
          { return process(tWHITE_SPACE_IN_LINE);
          }
        case 129: break;
        case 30: 
          { changeState();
                                            yypushback(yytext().length());
          }
        case 130: break;
        case 77: 
          { return process(kSEALED);
          }
        case 131: break;
        case 67: 
          { return process(kCLASS);
          }
        case 132: break;
        case 79: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kRETURN);
          }
        case 133: break;
        case 87: 
          { return process(kOVERRIDE);
          }
        case 134: break;
        case 84: 
          { return process(kPACKAGE);
          }
        case 135: break;
        case 50: 
          { braceStack.push(tLPARENTHESIS);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLPARENTHESIS);
          }
        case 136: break;
        case 32: 
          { return process(kDO);
          }
        case 137: break;
        case 28: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 138: break;
        case 44: 
          { return process(kFOR);
          }
        case 139: break;
        case 35: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tSTRING);
          }
        case 140: break;
        case 17: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRBRACE);
          }
        case 141: break;
        case 21: 
          { return process(tCHOOSE);
          }
        case 142: break;
        case 16: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tRSQBRACKET);
          }
        case 143: break;
        case 73: 
          { return process(kYIELD);
          }
        case 144: break;
        case 7: 
          { return process(tAT);
          }
        case 145: break;
        case 46: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tCHAR);
          }
        case 146: break;
        case 8: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tUNDER);
          }
        case 147: break;
        case 48: 
          { return process(kNEW);
          }
        case 148: break;
        case 88: 
          { return process(kREQUIRES);
          }
        case 149: break;
        case 14: 
          { braceStack.push(tLSQBRACKET);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLSQBRACKET);
          }
        case 150: break;
        case 25: 
          { yypushback(1);  yybegin(YYINITIAL);
          }
        case 151: break;
        case 3: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tINTEGER);
          }
        case 152: break;
        case 39: 
          { return process(tVIEW);
          }
        case 153: break;
        case 31: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tFLOAT);
          }
        case 154: break;
        case 89: 
          { return process(kIMPLICIT);
          }
        case 155: break;
        case 19: 
          { braceStack.push(tLPARENTHESIS);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(tLPARENTHESIS);
          }
        case 156: break;
        case 66: 
          { return process(kFINAL);
          }
        case 157: break;
        case 47: 
          { return process(kTRY);
          }
        case 158: break;
        case 5: 
          { return process(tINNER_CLASS);
          }
        case 159: break;
        case 56: 
          { return process(kLAZY);
          }
        case 160: break;
        case 71: 
          { return process(kSUPER);
          }
        case 161: break;
        case 91: 
          { return process(kCASE);
          }
        case 162: break;
        case 10: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(tWRONG_STRING);
          }
        case 163: break;
        case 53: 
          { changeState();
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                     return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 164: break;
        case 75: 
          { yypushback(4);
                                                   changeState();
                                                   return process(tWHITE_SPACE_IN_LINE);
          }
        case 165: break;
        case 13: 
          { return process(tASSIGN);
          }
        case 166: break;
        case 61: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTRUE);
          }
        case 167: break;
        case 80: 
          { return process(kIMPORT);
          }
        case 168: break;
        case 18: 
          { braceStack.push(tLBRACE);
                                            return process(tLBRACE);
          }
        case 169: break;
        case 86: 
          { return process(kABSTRACT);
          }
        case 170: break;
        case 49: 
          { braceStack.push(tLBRACE);
                                            yypushback(yytext().length() - 1);
                                            yybegin(WAIT_FOR_XML);
                                            return process(tLBRACE);
          }
        case 171: break;
        case 36: 
          { return process(kIF);
          }
        case 172: break;
        case 59: 
          { braceStack.push(kCASE);
                                            yybegin(NEW_LINE_DEPRECATED);
                                            return process(kCASE);
          }
        case 173: break;
        case 60: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kTHIS);
          }
        case 174: break;
        case 9: 
          { yybegin(WAIT_FOR_XML);
                                            return process(tWHITE_SPACE_IN_LINE);
          }
        case 175: break;
        case 23: 
          { yybegin(PROCESS_NEW_LINE);
                                            return popBraceStack(tRSQBRACKET);
          }
        case 176: break;
        case 63: 
          { yybegin(PROCESS_NEW_LINE);
                                            return process(kNULL);
          }
        case 177: break;
        case 20: 
          { return process(tFUNTYPE);
          }
        case 178: break;
        case 74: 
          { return process(kWHILE);
          }
        case 179: break;
        case 45: 
          { return process(kDEF);
          }
        case 180: break;
        case 54: 
          { yybegin(WAIT_FOR_XML);
                                                    yypushback(2);
                                                    if(newLineAllowed()){
                                                      return process(tLINE_TERMINATOR);
                                                    } else {
                                                      return process(tWHITE_SPACE_IN_LINE);
                                                    }
          }
        case 181: break;
        case 57: 
          { return process(kELSE);
          }
        case 182: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
