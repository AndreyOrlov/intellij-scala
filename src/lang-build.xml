<project name="Generate various scala packages for parser needs" default="rebuild.all">
  <property file="scala.properties"/>
  <property name="base.dir" value="${project.lib}/../../.."/>
  <property name="output" value="${base.dir}/dist"/>
  <property name="test.lib" value="${project.lib}/../../test/Scala"/>

  <property name="output" value="${basedir}/dist"/>

  <path id="base.path">
    <fileset dir="${scala.home}/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${idea.lib}/../jre/jre/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${idea.lib}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${ant.lib}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${project.lib}">
      <include name="**/*.class"/>
    </fileset>
  </path>

  <path id="test.base.path">
    <fileset dir="${scala.home}/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${idea.lib}/../jre/jre/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${idea.lib}/../jre/lib">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${idea.lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="clear.all" description="Clears results">
    <mkdir dir="${project.lib}"/>
    <delete includeemptydirs="true">
      <fileset dir="${project.lib}"/>
    </delete>
  </target>

  <target name="create.lexer" description="Makes lexer file">
    <ant dir="org/jetbrains/plugins/scala/lang/lexer/"
         antfile="build.xml" target="generate.lexer"/>
  </target>

  <target name="make.project" depends="create.lexer" description="Builds all classes">

    <mkdir dir="${project.lib}/../"/>
    <mkdir dir="${project.lib}"/>
    <mkdir dir="${project.lib}/META-INF"/>

    <copy todir="${project.lib}/META-INF">
      <fileset dir="../META-INF"/>
    </copy>

    <copy todir="${project.lib}">
      <fileset dir="../resources/"/>
    </copy>
    <javac srcdir="."
           destdir="../classes/production/Scala">
      <classpath refid="base.path"/>
    </javac>

    <javac srcdir="./../util"
           destdir="../classes/production/Scala">
      <classpath refid="base.path"/>
    </javac>

    <!--Scala taskdef-->
    <taskdef name="scalac"
             classname="org.jetbrains.plugins.scala.util.AntScalaCompiler"
             classpath="${project.lib}">
      <classpath>
        <pathelement location="${scala.home}/lib/scala-compiler.jar"/>
        <pathelement location="${scala.home}/lib/scala-library.jar"/>
      </classpath>
    </taskdef>

    <scalac srcdir="."
            destdir="${project.lib}"
            force="changed">
      <classpath refid="base.path"/>
      <include name="**/*.scala"/>
    </scalac>

    <copy file="./org/jetbrains/plugins/scala/ScalaBundle.properties"
          tofile="${project.lib}/org/jetbrains/plugins/scala/ScalaBundle.properties"/>

    <delete>
      <fileset dir="${project.lib}" includes="**/AntScalaCompiler*, **/*MyAnt*, **/*AntRunner*"/>
    </delete>
  </target>


  <target name="jar.plugin" depends="make.project" description="Makes jar">
    <mkdir dir="${base.dir}/tempjar/Scala/lib"/>
    <jar destfile="${base.dir}/Scala.jar">
      <fileset dir="${project.lib}" excludes="**/*build.xml, **/scala.properties"/>
    </jar>
    <copy todir="${base.dir}/tempjar/Scala/lib">
      <fileset dir="${base.dir}">
        <include name="Scala.jar"/>
      </fileset>
      <fileset dir="${scala.home}/lib">
        <include name="**/*.jar"/>
      </fileset>
    </copy>
    <delete>
      <fileset dir="${base.dir}" includes="Scala.jar"/>
    </delete>
    <zip destfile="${base.dir}/Scala.zip" basedir="${base.dir}/tempjar"/>
    <delete dir="${base.dir}/tempjar"/>
  </target>

  <target name="rebuild.all" depends="clear.all, make.project, jar.plugin" description="Builds all classes"/>

  <target name="move.to.sandbox" depends="make.project">
    <mkdir dir="C:\Documents and Settings\Dmitry.Krasilschikov\.IntelliJIdea70\sandbox\plugins\Scala\classes"/>
    <mkdir dir="C:\Documents and Settings\Dmitry.Krasilschikov\.IntelliJIdea70\sandbox\plugins\Scala\lib"/>
    <copy todir="C:\Documents and Settings\Dmitry.Krasilschikov\.IntelliJIdea70\sandbox\plugins\Scala\classes">
      <fileset dir="${project.lib}"/>
    </copy>
    <copy todir="C:\Documents and Settings\Dmitry.Krasilschikov\.IntelliJIdea70\sandbox\plugins\Scala\lib">
      <fileset dir="${scala.home}/lib"/>
    </copy>
    <copy todir="C:\Documents and Settings\Dmitry.Krasilschikov\.IntelliJIdea70\sandbox\plugins\Scala\META-INF">
      <fileset dir="${project.lib}/Meta-Inf"/>
    </copy>
  </target>


  <target name="build.tests" depends="make.project">

    <mkdir dir="${project.lib}/../../test"/>
    <mkdir dir="${project.lib}/../../test/Scala"/>
    <javac srcdir="../test"
           destdir="../classes/test/Scala">
      <classpath refid="base.path"/>
      <classpath>
        <path location="${project.lib}"/>
      </classpath>
    </javac>
  </target>

  <target name="run.tests" depends="build.tests">

    <mkdir dir="${base.dir}/logs"/>

    <junit fork="yes"
           dir="${base.dir}"
           printsummary="yes"
           haltonfailure="no">

      <classpath>
        <path location="${project.lib}"/>
        <path location="${test.lib}"/>        
        <path refid="test.base.path"/>
      </classpath>

      <jvmarg value="-Xbootclasspath/p:${idea.lib}/boot.jar"/>
      <jvmarg value="-Djava.awt.headless=true"/>
      <jvmarg value="-Didea.load.plugins.id=org.intellij.scala"/>
      <jvmarg value="-ea"/>
      <jvmarg value="-Xmx256M"/>
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Djava.compiler=NONE"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5006"/>

      <jvmarg value="-Didea.config.path=${output}/config"/>
      <jvmarg value="-Didea.system.path=${output}/system"/>


      <formatter type="plain"/>

      <batchtest todir="${base.dir}/logs">
        <fileset dir="${base.dir}/test">
          <include name="**/FormatterTest.java"/>
          <include name="**/EnterActionTest.java"/>
          <include name="**/ParserTest.java"/>
        </fileset>
      </batchtest>

    </junit>
  </target>

</project>